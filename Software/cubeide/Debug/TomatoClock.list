
TomatoClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fc4  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d8  0800a0d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0d8  0800a0d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0d8  0800a0d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0001a0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  2000000c  0800a0ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800a0ec  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007dfeb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af3  00000000  00000000  0009e020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003130  00000000  00000000  000a1b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f70  00000000  00000000  000a4c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001979a  00000000  00000000  000a7bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d9f  00000000  00000000  000c1352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d53  00000000  00000000  000e40f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00185e44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d738  00000000  00000000  00185e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080050fc 	.word	0x080050fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080050fc 	.word	0x080050fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb3b 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f977 	bl	800044c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f887 	bl	8000270 <MX_I2C1_Init>
  MX_RTC_Init();
 8000162:	f000 f8b3 	bl	80002cc <MX_RTC_Init>
  MX_TIM2_Init();
 8000166:	f000 f8fb 	bl	8000360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Show the running status.
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	480d      	ldr	r0, [pc, #52]	; (80001a8 <main+0x5c>)
 8000172:	f000 fe19 	bl	8000da8 <HAL_GPIO_WritePin>

  // Initialize u8g2
  u8g2_t u8g2;
  u8g2Init(&u8g2);
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	4618      	mov	r0, r3
 800017a:	f003 f9c7 	bl	800350c <u8g2Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_chinese2);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	490a      	ldr	r1, [pc, #40]	; (80001ac <main+0x60>)
 8000182:	4618      	mov	r0, r3
 8000184:	f004 f816 	bl	80041b4 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	4618      	mov	r0, r3
 800018c:	f003 f9d6 	bl	800353c <u8g2_ClearBuffer>
	u8g2_DrawUTF8(&u8g2, 0, 16, "2022/01/22");
 8000190:	1d38      	adds	r0, r7, #4
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <main+0x64>)
 8000194:	2210      	movs	r2, #16
 8000196:	2100      	movs	r1, #0
 8000198:	f003 ff6e 	bl	8004078 <u8g2_DrawUTF8>
	u8g2_SendBuffer(&u8g2);
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4618      	mov	r0, r3
 80001a0:	f003 fa3f 	bl	8003622 <u8g2_SendBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_chinese2);
 80001a4:	e7eb      	b.n	800017e <main+0x32>
 80001a6:	bf00      	nop
 80001a8:	40011000 	.word	0x40011000
 80001ac:	08005158 	.word	0x08005158
 80001b0:	08005114 	.word	0x08005114

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	; 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f004 ff92 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001e4:	2309      	movs	r3, #9
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2302      	movs	r3, #2
 80001fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000204:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fa38 	bl	8001684 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800021a:	f000 f99d 	bl	8000558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fca2 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000246:	f000 f987 	bl	8000558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800024a:	2301      	movs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800024e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000252:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fe2e 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000262:	f000 f979 	bl	8000558 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3750      	adds	r7, #80	; 0x50
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <MX_I2C1_Init+0x54>)
 8000278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <MX_I2C1_Init+0x50>)
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <MX_I2C1_Init+0x58>)
 800027e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <MX_I2C1_Init+0x50>)
 800028e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <MX_I2C1_Init+0x50>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <MX_I2C1_Init+0x50>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MX_I2C1_Init+0x50>)
 80002ae:	f000 fd93 	bl	8000dd8 <HAL_I2C_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b8:	f000 f94e 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200004c4 	.word	0x200004c4
 80002c4:	40005400 	.word	0x40005400
 80002c8:	000186a0 	.word	0x000186a0

080002cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	460a      	mov	r2, r1
 80002d8:	801a      	strh	r2, [r3, #0]
 80002da:	460a      	mov	r2, r1
 80002dc:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002de:	2300      	movs	r3, #0
 80002e0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <MX_RTC_Init+0x8c>)
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <MX_RTC_Init+0x90>)
 80002e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_RTC_Init+0x8c>)
 80002ea:	f04f 32ff 	mov.w	r2, #4294967295
 80002ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002f0:	4b19      	ldr	r3, [pc, #100]	; (8000358 <MX_RTC_Init+0x8c>)
 80002f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002f6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002f8:	4817      	ldr	r0, [pc, #92]	; (8000358 <MX_RTC_Init+0x8c>)
 80002fa:	f001 ff57 	bl	80021ac <HAL_RTC_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000304:	f000 f928 	bl	8000558 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8000308:	2321      	movs	r3, #33	; 0x21
 800030a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 800030c:	2345      	movs	r3, #69	; 0x45
 800030e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000310:	2300      	movs	r3, #0
 8000312:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <MX_RTC_Init+0x8c>)
 800031c:	f001 ffdc 	bl	80022d8 <HAL_RTC_SetTime>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000326:	f000 f917 	bl	8000558 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800032a:	2300      	movs	r3, #0
 800032c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800032e:	2301      	movs	r3, #1
 8000330:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 8000332:	2316      	movs	r3, #22
 8000334:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 8000336:	2322      	movs	r3, #34	; 0x22
 8000338:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800033a:	463b      	mov	r3, r7
 800033c:	2201      	movs	r2, #1
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_RTC_Init+0x8c>)
 8000342:	f002 f861 	bl	8002408 <HAL_RTC_SetDate>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800034c:	f000 f904 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200004b0 	.word	0x200004b0
 800035c:	40002800 	.word	0x40002800

08000360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08e      	sub	sp, #56	; 0x38
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	f107 0320 	add.w	r3, r7, #32
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
 800038c:	615a      	str	r2, [r3, #20]
 800038e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000390:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_TIM2_Init+0xe8>)
 8000392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000398:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_TIM2_Init+0xe8>)
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003a4:	4b28      	ldr	r3, [pc, #160]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b8:	4823      	ldr	r0, [pc, #140]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003ba:	f002 fa85 	bl	80028c8 <HAL_TIM_Base_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003c4:	f000 f8c8 	bl	8000558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	4619      	mov	r1, r3
 80003d4:	481c      	ldr	r0, [pc, #112]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003d6:	f002 fbdd 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003e0:	f000 f8ba 	bl	8000558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e4:	4818      	ldr	r0, [pc, #96]	; (8000448 <MX_TIM2_Init+0xe8>)
 80003e6:	f002 fabe 	bl	8002966 <HAL_TIM_PWM_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003f0:	f000 f8b2 	bl	8000558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fc:	f107 0320 	add.w	r3, r7, #32
 8000400:	4619      	mov	r1, r3
 8000402:	4811      	ldr	r0, [pc, #68]	; (8000448 <MX_TIM2_Init+0xe8>)
 8000404:	f002 ff0a 	bl	800321c <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800040e:	f000 f8a3 	bl	8000558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000412:	2360      	movs	r3, #96	; 0x60
 8000414:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2204      	movs	r2, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4807      	ldr	r0, [pc, #28]	; (8000448 <MX_TIM2_Init+0xe8>)
 800042a:	f002 faf5 	bl	8002a18 <HAL_TIM_PWM_ConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000434:	f000 f890 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000438:	4803      	ldr	r0, [pc, #12]	; (8000448 <MX_TIM2_Init+0xe8>)
 800043a:	f000 f943 	bl	80006c4 <HAL_TIM_MspPostInit>

}
 800043e:	bf00      	nop
 8000440:	3738      	adds	r7, #56	; 0x38
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000518 	.word	0x20000518

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000460:	4b39      	ldr	r3, [pc, #228]	; (8000548 <MX_GPIO_Init+0xfc>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a38      	ldr	r2, [pc, #224]	; (8000548 <MX_GPIO_Init+0xfc>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b36      	ldr	r3, [pc, #216]	; (8000548 <MX_GPIO_Init+0xfc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0310 	and.w	r3, r3, #16
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000478:	4b33      	ldr	r3, [pc, #204]	; (8000548 <MX_GPIO_Init+0xfc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a32      	ldr	r2, [pc, #200]	; (8000548 <MX_GPIO_Init+0xfc>)
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b30      	ldr	r3, [pc, #192]	; (8000548 <MX_GPIO_Init+0xfc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0320 	and.w	r3, r3, #32
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_GPIO_Init+0xfc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a2c      	ldr	r2, [pc, #176]	; (8000548 <MX_GPIO_Init+0xfc>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_GPIO_Init+0xfc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MX_GPIO_Init+0xfc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a26      	ldr	r2, [pc, #152]	; (8000548 <MX_GPIO_Init+0xfc>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b24      	ldr	r3, [pc, #144]	; (8000548 <MX_GPIO_Init+0xfc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c6:	4821      	ldr	r0, [pc, #132]	; (800054c <MX_GPIO_Init+0x100>)
 80004c8:	f000 fc6e 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	481f      	ldr	r0, [pc, #124]	; (8000550 <MX_GPIO_Init+0x104>)
 80004d2:	f000 fc69 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4817      	ldr	r0, [pc, #92]	; (800054c <MX_GPIO_Init+0x100>)
 80004f0:	f000 fad6 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004f4:	2370      	movs	r3, #112	; 0x70
 80004f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0x104>)
 8000508:	f000 faca 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2302      	movs	r3, #2
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <MX_GPIO_Init+0x104>)
 8000524:	f000 fabc 	bl	8000aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <MX_GPIO_Init+0x108>)
 800053c:	f000 fab0 	bl	8000aa0 <HAL_GPIO_Init>

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	40011000 	.word	0x40011000
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a15      	ldr	r2, [pc, #84]	; (8000638 <HAL_I2C_MspInit+0x70>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d123      	bne.n	8000630 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_I2C_MspInit+0x74>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_I2C_MspInit+0x74>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_I2C_MspInit+0x74>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000600:	23c0      	movs	r3, #192	; 0xc0
 8000602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000604:	2312      	movs	r3, #18
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <HAL_I2C_MspInit+0x78>)
 8000614:	f000 fa44 	bl	8000aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_I2C_MspInit+0x74>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_I2C_MspInit+0x74>)
 800061e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000622:	61d3      	str	r3, [r2, #28]
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_I2C_MspInit+0x74>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40005400 	.word	0x40005400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010c00 	.word	0x40010c00

08000644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_RTC_MspInit+0x3c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d110      	bne.n	8000678 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000656:	f001 f809 	bl	800166c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_RTC_MspInit+0x40>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <HAL_RTC_MspInit+0x40>)
 8000660:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_RTC_MspInit+0x40>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_RTC_MspInit+0x44>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40002800 	.word	0x40002800
 8000684:	40021000 	.word	0x40021000
 8000688:	4242043c 	.word	0x4242043c

0800068c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800069c:	d10b      	bne.n	80006b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_TIM_Base_MspInit+0x34>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e2:	d117      	bne.n	8000714 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_TIM_MspPostInit+0x58>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <HAL_TIM_MspPostInit+0x58>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_TIM_MspPostInit+0x58>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <HAL_TIM_MspPostInit+0x5c>)
 8000710:	f000 f9c6 	bl	8000aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076a:	f000 f875 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}

08000772 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007a6:	f7ff ffe4 	bl	8000772 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007aa:	f004 fc7b 	bl	80050a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fccd 	bl	800014c <main>
  bx lr
 80007b2:	4770      	bx	lr
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007bc:	0800a0e0 	.word	0x0800a0e0
  ldr r2, =_sbss
 80007c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c4:	20000564 	.word	0x20000564

080007c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC1_2_IRQHandler>
	...

080007cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x28>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x28>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f92b 	bl	8000a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	200f      	movs	r0, #15
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff febc 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40022000 	.word	0x40022000

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f935 	bl	8000a86 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f90b 	bl	8000a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a03      	ldr	r2, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	20000008 	.word	0x20000008
 8000878:	20000560 	.word	0x20000560

0800087c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	20000560 	.word	0x20000560

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fff0 	bl	800087c <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffe0 	bl	800087c <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a04:	d301      	bcc.n	8000a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00f      	b.n	8000a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <SysTick_Config+0x40>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a12:	210f      	movs	r1, #15
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f7ff ff90 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SysTick_Config+0x40>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SysTick_Config+0x40>)
 8000a24:	2207      	movs	r2, #7
 8000a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	e000e010 	.word	0xe000e010

08000a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ff49 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a60:	f7ff ff5e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	6978      	ldr	r0, [r7, #20]
 8000a6c:	f7ff ff90 	bl	8000990 <NVIC_EncodePriority>
 8000a70:	4602      	mov	r2, r0
 8000a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff5f 	bl	800093c <__NVIC_SetPriority>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ffb0 	bl	80009f4 <SysTick_Config>
 8000a94:	4603      	mov	r3, r0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b08b      	sub	sp, #44	; 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e169      	b.n	8000d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f040 8158 	bne.w	8000d82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d05e      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000adc:	4a98      	ldr	r2, [pc, #608]	; (8000d40 <HAL_GPIO_Init+0x2a0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d875      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000ae2:	4a98      	ldr	r2, [pc, #608]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d058      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000ae8:	4a96      	ldr	r2, [pc, #600]	; (8000d44 <HAL_GPIO_Init+0x2a4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d86f      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000aee:	4a96      	ldr	r2, [pc, #600]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d052      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000af4:	4a94      	ldr	r2, [pc, #592]	; (8000d48 <HAL_GPIO_Init+0x2a8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d869      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000afa:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d04c      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <HAL_GPIO_Init+0x2ac>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d863      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b06:	4a92      	ldr	r2, [pc, #584]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d046      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
 8000b0c:	4a90      	ldr	r2, [pc, #576]	; (8000d50 <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d85d      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b12:	2b12      	cmp	r3, #18
 8000b14:	d82a      	bhi.n	8000b6c <HAL_GPIO_Init+0xcc>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d859      	bhi.n	8000bce <HAL_GPIO_Init+0x12e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <HAL_GPIO_Init+0x80>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b9b 	.word	0x08000b9b
 8000b24:	08000b75 	.word	0x08000b75
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000bc9 	.word	0x08000bc9
 8000b30:	08000bcf 	.word	0x08000bcf
 8000b34:	08000bcf 	.word	0x08000bcf
 8000b38:	08000bcf 	.word	0x08000bcf
 8000b3c:	08000bcf 	.word	0x08000bcf
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bcf 	.word	0x08000bcf
 8000b48:	08000bcf 	.word	0x08000bcf
 8000b4c:	08000bcf 	.word	0x08000bcf
 8000b50:	08000bcf 	.word	0x08000bcf
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000bcf 	.word	0x08000bcf
 8000b5c:	08000bcf 	.word	0x08000bcf
 8000b60:	08000bcf 	.word	0x08000bcf
 8000b64:	08000b7d 	.word	0x08000b7d
 8000b68:	08000b91 	.word	0x08000b91
 8000b6c:	4a79      	ldr	r2, [pc, #484]	; (8000d54 <HAL_GPIO_Init+0x2b4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d013      	beq.n	8000b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e02c      	b.n	8000bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e029      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	3304      	adds	r3, #4
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e024      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e01f      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	330c      	adds	r3, #12
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e01a      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e013      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d105      	bne.n	8000bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	611a      	str	r2, [r3, #16]
          break;
 8000bba:	e009      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	615a      	str	r2, [r3, #20]
          break;
 8000bc6:	e003      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e000      	b.n	8000bd0 <HAL_GPIO_Init+0x130>
          break;
 8000bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d801      	bhi.n	8000bda <HAL_GPIO_Init+0x13a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_Init+0x13e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d802      	bhi.n	8000bec <HAL_GPIO_Init+0x14c>
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x152>
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	3b08      	subs	r3, #8
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	6a39      	ldr	r1, [r7, #32]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 80b1 	beq.w	8000d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c38:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <HAL_GPIO_Init+0x2c0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d013      	beq.n	8000c8c <HAL_GPIO_Init+0x1ec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_GPIO_Init+0x2c4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1e8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3e      	ldr	r2, [pc, #248]	; (8000d68 <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1e4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1e0>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x1ee>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c9e:	492f      	ldr	r1, [pc, #188]	; (8000d5c <HAL_GPIO_Init+0x2bc>)
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	492c      	ldr	r1, [pc, #176]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4928      	ldr	r1, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce0:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4922      	ldr	r1, [pc, #136]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	491e      	ldr	r1, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	4918      	ldr	r1, [pc, #96]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4914      	ldr	r1, [pc, #80]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	490e      	ldr	r1, [pc, #56]	; (8000d70 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_Init+0x2e2>
 8000d3e:	bf00      	nop
 8000d40:	10320000 	.word	0x10320000
 8000d44:	10310000 	.word	0x10310000
 8000d48:	10220000 	.word	0x10220000
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10110000 	.word	0x10110000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40011400 	.word	0x40011400
 8000d70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x304>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f ae8e 	bne.w	8000ab4 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	372c      	adds	r7, #44	; 0x2c
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc4:	e003      	b.n	8000dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc6:	887b      	ldrh	r3, [r7, #2]
 8000dc8:	041a      	lsls	r2, r3, #16
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e12b      	b.n	8001042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d106      	bne.n	8000e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fbe2 	bl	80005c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2224      	movs	r2, #36	; 0x24
 8000e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0201 	bic.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e3c:	f000 fff6 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8000e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4a81      	ldr	r2, [pc, #516]	; (800104c <HAL_I2C_Init+0x274>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d807      	bhi.n	8000e5c <HAL_I2C_Init+0x84>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4a80      	ldr	r2, [pc, #512]	; (8001050 <HAL_I2C_Init+0x278>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	bf94      	ite	ls
 8000e54:	2301      	movls	r3, #1
 8000e56:	2300      	movhi	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	e006      	b.n	8000e6a <HAL_I2C_Init+0x92>
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4a7d      	ldr	r2, [pc, #500]	; (8001054 <HAL_I2C_Init+0x27c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	bf94      	ite	ls
 8000e64:	2301      	movls	r3, #1
 8000e66:	2300      	movhi	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0e7      	b.n	8001042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4a78      	ldr	r2, [pc, #480]	; (8001058 <HAL_I2C_Init+0x280>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a6a      	ldr	r2, [pc, #424]	; (800104c <HAL_I2C_Init+0x274>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d802      	bhi.n	8000eac <HAL_I2C_Init+0xd4>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	e009      	b.n	8000ec0 <HAL_I2C_Init+0xe8>
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	4a69      	ldr	r2, [pc, #420]	; (800105c <HAL_I2C_Init+0x284>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	099b      	lsrs	r3, r3, #6
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	495c      	ldr	r1, [pc, #368]	; (800104c <HAL_I2C_Init+0x274>)
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d819      	bhi.n	8000f14 <HAL_I2C_Init+0x13c>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1e59      	subs	r1, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00a      	beq.n	8000f10 <HAL_I2C_Init+0x138>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1e59      	subs	r1, r3, #1
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0e:	e051      	b.n	8000fb4 <HAL_I2C_Init+0x1dc>
 8000f10:	2304      	movs	r3, #4
 8000f12:	e04f      	b.n	8000fb4 <HAL_I2C_Init+0x1dc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d111      	bne.n	8000f40 <HAL_I2C_Init+0x168>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1e58      	subs	r0, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6859      	ldr	r1, [r3, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	440b      	add	r3, r1
 8000f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	e012      	b.n	8000f66 <HAL_I2C_Init+0x18e>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1e58      	subs	r0, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6859      	ldr	r1, [r3, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	0099      	lsls	r1, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_I2C_Init+0x196>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e022      	b.n	8000fb4 <HAL_I2C_Init+0x1dc>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10e      	bne.n	8000f94 <HAL_I2C_Init+0x1bc>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1e58      	subs	r0, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6859      	ldr	r1, [r3, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	440b      	add	r3, r1
 8000f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f92:	e00f      	b.n	8000fb4 <HAL_I2C_Init+0x1dc>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1e58      	subs	r0, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	0099      	lsls	r1, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	6809      	ldr	r1, [r1, #0]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6911      	ldr	r1, [r2, #16]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68d2      	ldr	r2, [r2, #12]
 8000fee:	4311      	orrs	r1, r2
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0201 	orr.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2220      	movs	r2, #32
 800102e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	000186a0 	.word	0x000186a0
 8001050:	001e847f 	.word	0x001e847f
 8001054:	003d08ff 	.word	0x003d08ff
 8001058:	431bde83 	.word	0x431bde83
 800105c:	10624dd3 	.word	0x10624dd3

08001060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	461a      	mov	r2, r3
 800106c:	460b      	mov	r3, r1
 800106e:	817b      	strh	r3, [r7, #10]
 8001070:	4613      	mov	r3, r2
 8001072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fc02 	bl	800087c <HAL_GetTick>
 8001078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b20      	cmp	r3, #32
 8001084:	f040 80e0 	bne.w	8001248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2319      	movs	r3, #25
 800108e:	2201      	movs	r2, #1
 8001090:	4970      	ldr	r1, [pc, #448]	; (8001254 <HAL_I2C_Master_Transmit+0x1f4>)
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f964 	bl	8001360 <I2C_WaitOnFlagUntilTimeout>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800109e:	2302      	movs	r3, #2
 80010a0:	e0d3      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_I2C_Master_Transmit+0x50>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e0cc      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d007      	beq.n	80010d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2221      	movs	r2, #33	; 0x21
 80010ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2210      	movs	r2, #16
 80010f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	893a      	ldrh	r2, [r7, #8]
 8001106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4a50      	ldr	r2, [pc, #320]	; (8001258 <HAL_I2C_Master_Transmit+0x1f8>)
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001118:	8979      	ldrh	r1, [r7, #10]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	6a3a      	ldr	r2, [r7, #32]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f89c 	bl	800125c <I2C_MasterRequestWrite>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e08d      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001144:	e066      	b.n	8001214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	6a39      	ldr	r1, [r7, #32]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f9de 	bl	800150c <I2C_WaitOnTXEFlagUntilTimeout>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00d      	beq.n	8001172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2b04      	cmp	r3, #4
 800115c:	d107      	bne.n	800116e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e06b      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119a:	3b01      	subs	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d11b      	bne.n	80011e8 <HAL_I2C_Master_Transmit+0x188>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d017      	beq.n	80011e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	6a39      	ldr	r1, [r7, #32]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f9ce 	bl	800158e <I2C_WaitOnBTFFlagUntilTimeout>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00d      	beq.n	8001214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d107      	bne.n	8001210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800120e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e01a      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	2b00      	cmp	r3, #0
 800121a:	d194      	bne.n	8001146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2220      	movs	r2, #32
 8001230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	e000      	b.n	800124a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001248:	2302      	movs	r3, #2
  }
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	00100002 	.word	0x00100002
 8001258:	ffff0000 	.word	0xffff0000

0800125c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	460b      	mov	r3, r1
 800126a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d006      	beq.n	8001286 <I2C_MasterRequestWrite+0x2a>
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d003      	beq.n	8001286 <I2C_MasterRequestWrite+0x2a>
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001284:	d108      	bne.n	8001298 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00b      	b.n	80012b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	2b12      	cmp	r3, #18
 800129e:	d107      	bne.n	80012b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f84f 	bl	8001360 <I2C_WaitOnFlagUntilTimeout>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00d      	beq.n	80012e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d6:	d103      	bne.n	80012e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e035      	b.n	8001350 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012ec:	d108      	bne.n	8001300 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012ee:	897b      	ldrh	r3, [r7, #10]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	e01b      	b.n	8001338 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001300:	897b      	ldrh	r3, [r7, #10]
 8001302:	11db      	asrs	r3, r3, #7
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0306 	and.w	r3, r3, #6
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f063 030f 	orn	r3, r3, #15
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <I2C_MasterRequestWrite+0xfc>)
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 f875 	bl	800140e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e010      	b.n	8001350 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <I2C_MasterRequestWrite+0x100>)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f865 	bl	800140e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	00010008 	.word	0x00010008
 800135c:	00010002 	.word	0x00010002

08001360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4613      	mov	r3, r2
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001370:	e025      	b.n	80013be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d021      	beq.n	80013be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137a:	f7ff fa7f 	bl	800087c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d302      	bcc.n	8001390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d116      	bne.n	80013be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2220      	movs	r2, #32
 800139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f043 0220 	orr.w	r2, r3, #32
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e023      	b.n	8001406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10d      	bne.n	80013e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4013      	ands	r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf0c      	ite	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	2300      	movne	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	e00c      	b.n	80013fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4013      	ands	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	429a      	cmp	r2, r3
 8001402:	d0b6      	beq.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800141c:	e051      	b.n	80014c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142c:	d123      	bne.n	8001476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800143c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f043 0204 	orr.w	r2, r3, #4
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e046      	b.n	8001504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d021      	beq.n	80014c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800147e:	f7ff f9fd 	bl	800087c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d302      	bcc.n	8001494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d116      	bne.n	80014c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2220      	movs	r2, #32
 800149e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e020      	b.n	8001504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10c      	bne.n	80014e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4013      	ands	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	e00b      	b.n	80014fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	43da      	mvns	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	4013      	ands	r3, r2
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d18d      	bne.n	800141e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001518:	e02d      	b.n	8001576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f878 	bl	8001610 <I2C_IsAcknowledgeFailed>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e02d      	b.n	8001586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d021      	beq.n	8001576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001532:	f7ff f9a3 	bl	800087c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	429a      	cmp	r2, r3
 8001540:	d302      	bcc.n	8001548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d116      	bne.n	8001576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f043 0220 	orr.w	r2, r3, #32
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e007      	b.n	8001586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001580:	2b80      	cmp	r3, #128	; 0x80
 8001582:	d1ca      	bne.n	800151a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800159a:	e02d      	b.n	80015f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f837 	bl	8001610 <I2C_IsAcknowledgeFailed>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e02d      	b.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b2:	d021      	beq.n	80015f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b4:	f7ff f962 	bl	800087c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d302      	bcc.n	80015ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f043 0220 	orr.w	r2, r3, #32
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e007      	b.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b04      	cmp	r3, #4
 8001604:	d1ca      	bne.n	800159c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001626:	d11b      	bne.n	8001660 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001630:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	420e0020 	.word	0x420e0020

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e26c      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e246      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f88c 	bl	800087c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f888 	bl	800087c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1fa      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff f878 	bl	800087c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff f874 	bl	800087c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f82d 	bl	800087c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff f829 	bl	800087c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e19b      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f80c 	bl	800087c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f808 	bl	800087c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7fe ffec 	bl	800087c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7fe ffe8 	bl	800087c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e15a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fad8 	bl	8001e7c <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7fe ffd2 	bl	800087c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7fe ffce 	bl	800087c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e140      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7fe ff8f 	bl	800087c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7fe ff8b 	bl	800087c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0fd      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff3f 	bl	800087c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7fe ff3b 	bl	800087c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0ab      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7fe ff29 	bl	800087c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe ff25 	bl	800087c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e095      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8081 	beq.w	8001b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe fef9 	bl	800087c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe fef5 	bl	800087c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e067      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fec9 	bl	800087c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fec5 	bl	800087c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e037      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e02f      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe feb2 	bl	800087c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7fe feae 	bl	800087c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e020      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7fe fe02 	bl	800087c <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7fe fdfe 	bl	800087c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fd60 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08005140 	.word	0x08005140
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b490      	push	{r4, r7}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	f240 2301 	movw	r3, #513	; 0x201
 8001d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x46>
 8001d96:	e02d      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001daa:	4413      	add	r3, r2
 8001dac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c5b      	lsrs	r3, r3, #17
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dca:	4413      	add	r3, r2
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	fb02 f203 	mul.w	r2, r2, r3
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	08005120 	.word	0x08005120
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08005150 	.word	0x08005150

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08005150 	.word	0x08005150

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d07d      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d118      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f18:	f7fe fcb0 	bl	800087c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	e008      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fcac 	bl	800087c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e06d      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d027      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f72:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d014      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fc7b 	bl	800087c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fc77 	bl	800087c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e036      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4917      	ldr	r1, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	490b      	ldr	r1, [pc, #44]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420440 	.word	0x42420440

08002024 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b08d      	sub	sp, #52	; 0x34
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800202e:	f107 040c 	add.w	r4, r7, #12
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002038:	f240 2301 	movw	r3, #513	; 0x201
 800203c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b10      	cmp	r3, #16
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b10      	cmp	r3, #16
 800205c:	f200 8091 	bhi.w	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d04c      	beq.n	8002100 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d07c      	beq.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800206c:	e089      	b.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800206e:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8082 	beq.w	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800208e:	4413      	add	r3, r2
 8002090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002094:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c5b      	lsrs	r3, r3, #17
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020c0:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	e004      	b.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d102      	bne.n	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020ee:	e04a      	b.n	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020fe:	e042      	b.n	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002110:	d108      	bne.n	8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800211c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	e01f      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d109      	bne.n	8002144 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800213c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	e00f      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800214e:	d11c      	bne.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800215c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002162:	e012      	b.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002164:	e011      	b.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002166:	f7ff fe75 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0b9b      	lsrs	r3, r3, #14
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002180:	e004      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800218a:	bf00      	nop
    }
  }
  return (frequency);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800218e:	4618      	mov	r0, r3
 8002190:	3734      	adds	r7, #52	; 0x34
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	bf00      	nop
 8002198:	08005130 	.word	0x08005130
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	003d0900 	.word	0x003d0900
 80021a8:	aaaaaaab 	.word	0xaaaaaaab

080021ac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e084      	b.n	80022cc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7c5b      	ldrb	r3, [r3, #17]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fa36 	bl	8000644 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f9c8 	bl	8002574 <HAL_RTC_WaitForSynchro>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2204      	movs	r2, #4
 80021ee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e06b      	b.n	80022cc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fa81 	bl	80026fc <RTC_EnterInitMode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e060      	b.n	80022cc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0207 	bic.w	r2, r2, #7
 8002218:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4926      	ldr	r1, [pc, #152]	; (80022d4 <HAL_RTC_Init+0x128>)
 800223c:	4313      	orrs	r3, r2
 800223e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d003      	beq.n	8002252 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00e      	b.n	8002270 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff fee6 	bl	8002024 <HAL_RCCEx_GetPeriphCLKFreq>
 8002258:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2204      	movs	r2, #4
 8002264:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e030      	b.n	80022cc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 010f 	bic.w	r1, r3, #15
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c1a      	lsrs	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b291      	uxth	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fa55 	bl	800274c <RTC_ExitInitMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00c      	b.n	80022cc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40006c00 	.word	0x40006c00

080022d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RTC_SetTime+0x20>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e080      	b.n	80023fe <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	7c1b      	ldrb	r3, [r3, #16]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RTC_SetTime+0x30>
 8002304:	2302      	movs	r3, #2
 8002306:	e07a      	b.n	80023fe <HAL_RTC_SetTime+0x126>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002324:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	4619      	mov	r1, r3
 800232e:	460b      	mov	r3, r1
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a5b      	subs	r3, r3, r1
 8002334:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002336:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800233c:	4413      	add	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e01e      	b.n	8002380 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fa28 	bl	800279c <RTC_Bcd2ToByte>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002354:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa1d 	bl	800279c <RTC_Bcd2ToByte>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800236e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fa11 	bl	800279c <RTC_Bcd2ToByte>
 800237a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800237c:	4423      	add	r3, r4
 800237e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f953 	bl	800262e <RTC_WriteTimeCounter>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2204      	movs	r2, #4
 8002392:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e02f      	b.n	80023fe <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0205 	bic.w	r2, r2, #5
 80023ac:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f964 	bl	800267c <RTC_ReadAlarmCounter>
 80023b4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d018      	beq.n	80023f0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d214      	bcs.n	80023f0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80023cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023d0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023d2:	6939      	ldr	r1, [r7, #16]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f96a 	bl	80026ae <RTC_WriteAlarmCounter>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2204      	movs	r2, #4
 80023e4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e006      	b.n	80023fe <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
	...

08002408 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_RTC_SetDate+0x24>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e097      	b.n	8002560 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	7c1b      	ldrb	r3, [r3, #16]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RTC_SetDate+0x34>
 8002438:	2302      	movs	r3, #2
 800243a:	e091      	b.n	8002560 <HAL_RTC_SetDate+0x158>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2202      	movs	r2, #2
 8002446:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	78da      	ldrb	r2, [r3, #3]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	785a      	ldrb	r2, [r3, #1]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	789a      	ldrb	r2, [r3, #2]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	739a      	strb	r2, [r3, #14]
 8002466:	e01a      	b.n	800249e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	78db      	ldrb	r3, [r3, #3]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f995 	bl	800279c <RTC_Bcd2ToByte>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f98c 	bl	800279c <RTC_Bcd2ToByte>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f983 	bl	800279c <RTC_Bcd2ToByte>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	7bdb      	ldrb	r3, [r3, #15]
 80024a2:	4618      	mov	r0, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	7b59      	ldrb	r1, [r3, #13]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	7b9b      	ldrb	r3, [r3, #14]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f000 f993 	bl	80027d8 <RTC_WeekDayNum>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	7b1a      	ldrb	r2, [r3, #12]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f883 	bl	80025ce <RTC_ReadTimeCounter>
 80024c8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_RTC_SetDate+0x160>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0adb      	lsrs	r3, r3, #11
 80024d4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b18      	cmp	r3, #24
 80024da:	d93a      	bls.n	8002552 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_RTC_SetDate+0x164>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_RTC_SetDate+0x168>)
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024f2:	69f9      	ldr	r1, [r7, #28]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f89a 	bl	800262e <RTC_WriteTimeCounter>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2204      	movs	r2, #4
 8002504:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e027      	b.n	8002560 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f8b3 	bl	800267c <RTC_ReadAlarmCounter>
 8002516:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d018      	beq.n	8002552 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d214      	bcs.n	8002552 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800252e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002532:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f8b9 	bl	80026ae <RTC_WriteAlarmCounter>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2204      	movs	r2, #4
 8002546:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e006      	b.n	8002560 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	91a2b3c5 	.word	0x91a2b3c5
 800256c:	aaaaaaab 	.word	0xaaaaaaab
 8002570:	00015180 	.word	0x00015180

08002574 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e01d      	b.n	80025c6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800259a:	f7fe f96f 	bl	800087c <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025a0:	e009      	b.n	80025b6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025a2:	f7fe f96b 	bl	800087c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b0:	d901      	bls.n	80025b6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e007      	b.n	80025c6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	827b      	strh	r3, [r7, #18]
 80025da:	2300      	movs	r3, #0
 80025dc:	823b      	strh	r3, [r7, #16]
 80025de:	2300      	movs	r3, #0
 80025e0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80025fe:	8a7a      	ldrh	r2, [r7, #18]
 8002600:	8a3b      	ldrh	r3, [r7, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d008      	beq.n	8002618 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002606:	8a3b      	ldrh	r3, [r7, #16]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e004      	b.n	8002622 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002618:	8a7b      	ldrh	r3, [r7, #18]
 800261a:	041a      	lsls	r2, r3, #16
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002622:	697b      	ldr	r3, [r7, #20]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f85d 	bl	80026fc <RTC_EnterInitMode>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e011      	b.n	8002672 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	0c12      	lsrs	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b292      	uxth	r2, r2
 8002660:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f872 	bl	800274c <RTC_ExitInitMode>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	81fb      	strh	r3, [r7, #14]
 8002688:	2300      	movs	r3, #0
 800268a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	041a      	lsls	r2, r3, #16
 80026a0:	89bb      	ldrh	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f81d 	bl	80026fc <RTC_EnterInitMode>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e011      	b.n	80026f2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	0c12      	lsrs	r2, r2, #16
 80026d6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	b292      	uxth	r2, r2
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f832 	bl	800274c <RTC_ExitInitMode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002708:	f7fe f8b8 	bl	800087c <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800270e:	e009      	b.n	8002724 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002710:	f7fe f8b4 	bl	800087c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800271e:	d901      	bls.n	8002724 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e00f      	b.n	8002744 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ee      	beq.n	8002710 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0210 	orr.w	r2, r2, #16
 8002740:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0210 	bic.w	r2, r2, #16
 8002766:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002768:	f7fe f888 	bl	800087c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800276e:	e009      	b.n	8002784 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002770:	f7fe f884 	bl	800087c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800277e:	d901      	bls.n	8002784 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e007      	b.n	8002794 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	b2db      	uxtb	r3, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
 80027e4:	4613      	mov	r3, r2
 80027e6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80027f6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d82d      	bhi.n	800285a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	4a2c      	ldr	r2, [pc, #176]	; (80028bc <RTC_WeekDayNum+0xe4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	085a      	lsrs	r2, r3, #1
 8002812:	78bb      	ldrb	r3, [r7, #2]
 8002814:	441a      	add	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	441a      	add	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	4926      	ldr	r1, [pc, #152]	; (80028c0 <RTC_WeekDayNum+0xe8>)
 8002828:	fba1 1303 	umull	r1, r3, r1, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3b01      	subs	r3, #1
 8002834:	4922      	ldr	r1, [pc, #136]	; (80028c0 <RTC_WeekDayNum+0xe8>)
 8002836:	fba1 1303 	umull	r1, r3, r1, r3
 800283a:	09db      	lsrs	r3, r3, #7
 800283c:	4413      	add	r3, r2
 800283e:	1d1a      	adds	r2, r3, #4
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <RTC_WeekDayNum+0xec>)
 8002842:	fba3 1302 	umull	r1, r3, r3, r2
 8002846:	1ad1      	subs	r1, r2, r3
 8002848:	0849      	lsrs	r1, r1, #1
 800284a:	440b      	add	r3, r1
 800284c:	0899      	lsrs	r1, r3, #2
 800284e:	460b      	mov	r3, r1
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a5b      	subs	r3, r3, r1
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e029      	b.n	80028ae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <RTC_WeekDayNum+0xe4>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	085a      	lsrs	r2, r3, #1
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	441a      	add	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	441a      	add	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4910      	ldr	r1, [pc, #64]	; (80028c0 <RTC_WeekDayNum+0xe8>)
 8002880:	fba1 1303 	umull	r1, r3, r1, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	1ad2      	subs	r2, r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	490d      	ldr	r1, [pc, #52]	; (80028c0 <RTC_WeekDayNum+0xe8>)
 800288c:	fba1 1303 	umull	r1, r3, r1, r3
 8002890:	09db      	lsrs	r3, r3, #7
 8002892:	4413      	add	r3, r2
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <RTC_WeekDayNum+0xec>)
 8002898:	fba3 1302 	umull	r1, r3, r3, r2
 800289c:	1ad1      	subs	r1, r2, r3
 800289e:	0849      	lsrs	r1, r1, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	0899      	lsrs	r1, r3, #2
 80028a4:	460b      	mov	r3, r1
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a5b      	subs	r3, r3, r1
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	b2db      	uxtb	r3, r3
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	38e38e39 	.word	0x38e38e39
 80028c0:	51eb851f 	.word	0x51eb851f
 80028c4:	24924925 	.word	0x24924925

080028c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e041      	b.n	800295e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd fecc 	bl	800068c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fa08 	bl	8002d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e041      	b.n	80029fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f839 	bl	8002a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3304      	adds	r3, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 f9b9 	bl	8002d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0ac      	b.n	8002b8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	f200 809f 	bhi.w	8002b80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002b81 	.word	0x08002b81
 8002a50:	08002b81 	.word	0x08002b81
 8002a54:	08002b81 	.word	0x08002b81
 8002a58:	08002abd 	.word	0x08002abd
 8002a5c:	08002b81 	.word	0x08002b81
 8002a60:	08002b81 	.word	0x08002b81
 8002a64:	08002b81 	.word	0x08002b81
 8002a68:	08002aff 	.word	0x08002aff
 8002a6c:	08002b81 	.word	0x08002b81
 8002a70:	08002b81 	.word	0x08002b81
 8002a74:	08002b81 	.word	0x08002b81
 8002a78:	08002b3f 	.word	0x08002b3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f9ac 	bl	8002de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0208 	orr.w	r2, r2, #8
 8002a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6999      	ldr	r1, [r3, #24]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	619a      	str	r2, [r3, #24]
      break;
 8002aba:	e062      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f9f2 	bl	8002eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6999      	ldr	r1, [r3, #24]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	021a      	lsls	r2, r3, #8
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]
      break;
 8002afc:	e041      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fa3b 	bl	8002f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0208 	orr.w	r2, r2, #8
 8002b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0204 	bic.w	r2, r2, #4
 8002b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
      break;
 8002b3c:	e021      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fa85 	bl	8003054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	61da      	str	r2, [r3, #28]
      break;
 8002b7e:	e000      	b.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_ConfigClockSource+0x18>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e0b3      	b.n	8002d14 <HAL_TIM_ConfigClockSource+0x180>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be4:	d03e      	beq.n	8002c64 <HAL_TIM_ConfigClockSource+0xd0>
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	f200 8087 	bhi.w	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf2:	f000 8085 	beq.w	8002d00 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	d87f      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d01a      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xa2>
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d87b      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	d050      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x116>
 8002c08:	2b60      	cmp	r3, #96	; 0x60
 8002c0a:	d877      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	d03c      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0xf6>
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d873      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d058      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x136>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d86f      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d064      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x156>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	d86b      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d060      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x156>
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d867      	bhi.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05c      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x156>
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d05a      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c34:	e062      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6899      	ldr	r1, [r3, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f000 faca 	bl	80031de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	609a      	str	r2, [r3, #8]
      break;
 8002c62:	e04e      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f000 fab3 	bl	80031de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c86:	609a      	str	r2, [r3, #8]
      break;
 8002c88:	e03b      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 fa2a 	bl	80030f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2150      	movs	r1, #80	; 0x50
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa81 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e02b      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f000 fa48 	bl	800314c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2160      	movs	r1, #96	; 0x60
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa71 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e01b      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 fa0a 	bl	80030f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fa61 	bl	80031aa <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f000 fa58 	bl	80031aa <TIM_ITRx_SetConfig>
        break;
 8002cfa:	e002      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <TIM_Base_SetConfig+0xb8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <TIM_Base_SetConfig+0x30>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d007      	beq.n	8002d4c <TIM_Base_SetConfig+0x30>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <TIM_Base_SetConfig+0xbc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0x30>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_Base_SetConfig+0xc0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <TIM_Base_SetConfig+0xb8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <TIM_Base_SetConfig+0x62>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <TIM_Base_SetConfig+0xbc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0x62>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <TIM_Base_SetConfig+0xc0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <TIM_Base_SetConfig+0xb8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800

08002de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 0302 	bic.w	r3, r3, #2
 8002e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <TIM_OC1_SetConfig+0xc8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10c      	bne.n	8002e56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f023 0308 	bic.w	r3, r3, #8
 8002e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <TIM_OC1_SetConfig+0xc8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40012c00 	.word	0x40012c00

08002eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0210 	bic.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f023 0320 	bic.w	r3, r3, #32
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <TIM_OC2_SetConfig+0xd0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10d      	bne.n	8002f28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <TIM_OC2_SetConfig+0xd0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d113      	bne.n	8002f58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40012c00 	.word	0x40012c00

08002f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <TIM_OC3_SetConfig+0xd0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10d      	bne.n	8002ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <TIM_OC3_SetConfig+0xd0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d113      	bne.n	800302a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40012c00 	.word	0x40012c00

08003054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800309e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	031b      	lsls	r3, r3, #12
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a0f      	ldr	r2, [pc, #60]	; (80030ec <TIM_OC4_SetConfig+0x98>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d109      	bne.n	80030c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	019b      	lsls	r3, r3, #6
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f023 0201 	bic.w	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 030a 	bic.w	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0210 	bic.w	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003176:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	031b      	lsls	r3, r3, #12
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003188:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f043 0307 	orr.w	r3, r3, #7
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031de:	b480      	push	{r7}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	021a      	lsls	r2, r3, #8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	431a      	orrs	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003230:	2302      	movs	r3, #2
 8003232:	e046      	b.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a16      	ldr	r2, [pc, #88]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d009      	beq.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10c      	bne.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800329c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800

080032d8 <u8x8_byte_stm32f1xx_hw_i2c>:
 */

#include "oled.h"

uint8_t u8x8_byte_stm32f1xx_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	72fb      	strb	r3, [r7, #11]
 80032e6:	4613      	mov	r3, r2
 80032e8:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[128];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	3b14      	subs	r3, #20
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d848      	bhi.n	8003384 <u8x8_byte_stm32f1xx_hw_i2c+0xac>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <u8x8_byte_stm32f1xx_hw_i2c+0x20>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003389 	.word	0x08003389
 80032fc:	08003385 	.word	0x08003385
 8003300:	08003385 	.word	0x08003385
 8003304:	08003335 	.word	0x08003335
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003365 	.word	0x08003365
 8003310:	08003385 	.word	0x08003385
 8003314:	08003385 	.word	0x08003385
 8003318:	08003385 	.word	0x08003385
 800331c:	08003385 	.word	0x08003385
 8003320:	08003385 	.word	0x08003385
 8003324:	08003385 	.word	0x08003385
 8003328:	08003389 	.word	0x08003389
    }
    break;

    case U8X8_MSG_BYTE_START_TRANSFER:
    {
        buf_idx = 0;
 800332c:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
    }
    break;
 8003332:	e02c      	b.n	800338e <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	617b      	str	r3, [r7, #20]

        while (arg_int > 0)
 8003338:	e010      	b.n	800335c <u8x8_byte_stm32f1xx_hw_i2c+0x84>
        {
            buffer[buf_idx++] = *data;
 800333a:	4b17      	ldr	r3, [pc, #92]	; (8003398 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	b2d1      	uxtb	r1, r2
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003344:	7011      	strb	r1, [r2, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	7819      	ldrb	r1, [r3, #0]
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 800334e:	5499      	strb	r1, [r3, r2]
            data++;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3301      	adds	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
            arg_int--;
 8003356:	7abb      	ldrb	r3, [r7, #10]
 8003358:	3b01      	subs	r3, #1
 800335a:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 800335c:	7abb      	ldrb	r3, [r7, #10]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1eb      	bne.n	800333a <u8x8_byte_stm32f1xx_hw_i2c+0x62>
        }
    }
    break;
 8003362:	e014      	b.n	800338e <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_END_TRANSFER:
    {
        if (HAL_I2C_Master_Transmit(&hi2c1, (OLED_ADDRESS), buffer, buf_idx, 1000) != HAL_OK)
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800336e:	9200      	str	r2, [sp, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 8003372:	2178      	movs	r1, #120	; 0x78
 8003374:	480a      	ldr	r0, [pc, #40]	; (80033a0 <u8x8_byte_stm32f1xx_hw_i2c+0xc8>)
 8003376:	f7fd fe73 	bl	8001060 <HAL_I2C_Master_Transmit>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <u8x8_byte_stm32f1xx_hw_i2c+0xb4>
            return 0;
 8003380:	2300      	movs	r3, #0
 8003382:	e005      	b.n	8003390 <u8x8_byte_stm32f1xx_hw_i2c+0xb8>

    case U8X8_MSG_BYTE_SET_DC:
        break;

    default:
        return 0;
 8003384:	2300      	movs	r3, #0
 8003386:	e003      	b.n	8003390 <u8x8_byte_stm32f1xx_hw_i2c+0xb8>
    	break;
 8003388:	bf00      	nop
 800338a:	e000      	b.n	800338e <u8x8_byte_stm32f1xx_hw_i2c+0xb6>
    break;
 800338c:	bf00      	nop
    }

    return 1;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000028 	.word	0x20000028
 800339c:	2000002c 	.word	0x2000002c
 80033a0:	200004c4 	.word	0x200004c4

080033a4 <delay_us>:


void delay_us(uint32_t time)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    uint32_t i = 72 * time;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	60fb      	str	r3, [r7, #12]
    //           ^
    // The 72 here should be the same as the clock speed (in MHz).
    while (i--)
 80033b8:	bf00      	nop
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1fa      	bne.n	80033ba <delay_us+0x16>
        ;
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <u8x8_gpio_and_delay>:
 * This is the u8g2 GPIO and delay configuration function.
 *
 */

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	72fb      	strb	r3, [r7, #11]
 80033de:	4613      	mov	r3, r2
 80033e0:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 80033e2:	7afb      	ldrb	r3, [r7, #11]
 80033e4:	3b29      	subs	r3, #41	; 0x29
 80033e6:	2b2a      	cmp	r3, #42	; 0x2a
 80033e8:	f200 8084 	bhi.w	80034f4 <u8x8_gpio_and_delay+0x124>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <u8x8_gpio_and_delay+0x24>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	080034bd 	.word	0x080034bd
 80033f8:	080034a5 	.word	0x080034a5
 80033fc:	080034a1 	.word	0x080034a1
 8003400:	080034f5 	.word	0x080034f5
 8003404:	080034c5 	.word	0x080034c5
 8003408:	080034f5 	.word	0x080034f5
 800340c:	080034f5 	.word	0x080034f5
 8003410:	080034f5 	.word	0x080034f5
 8003414:	080034f5 	.word	0x080034f5
 8003418:	080034f5 	.word	0x080034f5
 800341c:	080034f5 	.word	0x080034f5
 8003420:	080034f5 	.word	0x080034f5
 8003424:	080034f5 	.word	0x080034f5
 8003428:	080034f5 	.word	0x080034f5
 800342c:	080034f5 	.word	0x080034f5
 8003430:	080034f5 	.word	0x080034f5
 8003434:	080034f5 	.word	0x080034f5
 8003438:	080034f5 	.word	0x080034f5
 800343c:	080034f5 	.word	0x080034f5
 8003440:	080034f5 	.word	0x080034f5
 8003444:	080034f5 	.word	0x080034f5
 8003448:	080034f5 	.word	0x080034f5
 800344c:	080034f5 	.word	0x080034f5
 8003450:	080034f5 	.word	0x080034f5
 8003454:	080034f5 	.word	0x080034f5
 8003458:	080034f5 	.word	0x080034f5
 800345c:	080034f5 	.word	0x080034f5
 8003460:	080034f5 	.word	0x080034f5
 8003464:	080034f5 	.word	0x080034f5
 8003468:	080034f5 	.word	0x080034f5
 800346c:	080034f5 	.word	0x080034f5
 8003470:	080034f5 	.word	0x080034f5
 8003474:	080034f5 	.word	0x080034f5
 8003478:	080034f5 	.word	0x080034f5
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034ff 	.word	0x080034ff
 8003484:	080034ff 	.word	0x080034ff
 8003488:	080034f5 	.word	0x080034f5
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034cd 	.word	0x080034cd
 8003494:	080034d7 	.word	0x080034d7
 8003498:	080034e1 	.word	0x080034e1
 800349c:	080034eb 	.word	0x080034eb
    {
    case U8X8_MSG_DELAY_100NANO: // delay arg_int * 100 nano seconds
        __NOP();
 80034a0:	bf00      	nop
        break;
 80034a2:	e02d      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
        for (uint16_t n = 0; n < 320; n++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	82fb      	strh	r3, [r7, #22]
 80034a8:	e003      	b.n	80034b2 <u8x8_gpio_and_delay+0xe2>
        {
            __NOP();
 80034aa:	bf00      	nop
        for (uint16_t n = 0; n < 320; n++)
 80034ac:	8afb      	ldrh	r3, [r7, #22]
 80034ae:	3301      	adds	r3, #1
 80034b0:	82fb      	strh	r3, [r7, #22]
 80034b2:	8afb      	ldrh	r3, [r7, #22]
 80034b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034b8:	d3f7      	bcc.n	80034aa <u8x8_gpio_and_delay+0xda>
        }
        break;
 80034ba:	e021      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_MILLI: // delay arg_int * 1 milli second
        HAL_Delay(1);
 80034bc:	2001      	movs	r0, #1
 80034be:	f7fd f9e7 	bl	8000890 <HAL_Delay>
        break;
 80034c2:	e01d      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_I2C: // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        delay_us(5);
 80034c4:	2005      	movs	r0, #5
 80034c6:	f7ff ff6d 	bl	80033a4 <delay_us>
        break;                    // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80034ca:	e019      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_I2C_CLOCK: // arg_int=0: Output low at I2C clock pin
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:  // arg_int=0: Output low at I2C data pin
        break;                    // arg_int=1: Input dir with pullup high for I2C data pin
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80034d4:	e014      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80034de:	e00f      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80034e8:	e00a      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80034f2:	e005      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80034fc:	e000      	b.n	8003500 <u8x8_gpio_and_delay+0x130>
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
 80034fe:	bf00      	nop
    }
    return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <u8g2Init>:

void u8g2Init(u8g2_t *u8g2)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_stm32f1xx_hw_i2c, u8x8_gpio_and_delay); // 初始化 u8g2 结构体
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <u8g2Init+0x24>)
 8003516:	4a07      	ldr	r2, [pc, #28]	; (8003534 <u8g2Init+0x28>)
 8003518:	4907      	ldr	r1, [pc, #28]	; (8003538 <u8g2Init+0x2c>)
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8a0 	bl	8003660 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8g2_InitDisplay(u8g2);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f001 fd32 	bl	8004f8a <u8x8_InitDisplay>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	080033d1 	.word	0x080033d1
 8003534:	080032d9 	.word	0x080032d9
 8003538:	0800a05c 	.word	0x0800a05c

0800353c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	7c1b      	ldrb	r3, [r3, #16]
 800354a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fdbe 	bl	80050ec <memset>
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
 8003584:	4613      	mov	r3, r2
 8003586:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	7c1b      	ldrb	r3, [r3, #16]
 800358e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	b29b      	uxth	r3, r3
 800359e:	89ba      	ldrh	r2, [r7, #12]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80035a6:	89bb      	ldrh	r3, [r7, #12]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80035ac:	89bb      	ldrh	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80035b4:	7bf9      	ldrb	r1, [r7, #15]
 80035b6:	78ba      	ldrb	r2, [r7, #2]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	2100      	movs	r1, #0
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f001 fcb1 	bl	8004f28 <u8x8_DrawTile>
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	7c5b      	ldrb	r3, [r3, #17]
 80035f0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80035f2:	7bba      	ldrb	r2, [r7, #14]
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ffbd 	bl	8003578 <u8g2_send_tile_row>
    src_row++;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3301      	adds	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	3301      	adds	r3, #1
 8003608:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800360a:	7bfa      	ldrb	r2, [r7, #15]
 800360c:	7b7b      	ldrb	r3, [r7, #13]
 800360e:	429a      	cmp	r2, r3
 8003610:	d203      	bcs.n	800361a <u8g2_send_buffer+0x4c>
 8003612:	7bba      	ldrb	r2, [r7, #14]
 8003614:	7b3b      	ldrb	r3, [r7, #12]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3eb      	bcc.n	80035f2 <u8g2_send_buffer+0x24>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffcf 	bl	80035ce <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f001 fcb9 	bl	8004fa8 <u8x8_RefreshDisplay>
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2208      	movs	r2, #8
 800364c:	701a      	strb	r2, [r3, #0]
  return buf;
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	200000ac 	.word	0x200000ac

08003660 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8003676:	490c      	ldr	r1, [pc, #48]	; (80036a8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f001 fcf5 	bl	8005068 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800367e:	f107 0313 	add.w	r3, r7, #19
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ffdc 	bl	8003640 <u8g2_m_16_8_f>
 8003688:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800368a:	7cfa      	ldrb	r2, [r7, #19]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8003692:	6979      	ldr	r1, [r7, #20]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 ffbc 	bl	8004612 <u8g2_SetupBuffer>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08004bc9 	.word	0x08004bc9
 80036a8:	08004e25 	.word	0x08004e25
 80036ac:	08004497 	.word	0x08004497

080036b0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	781b      	ldrb	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	81fb      	strh	r3, [r7, #14]
    font++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3301      	adds	r3, #1
 80036f0:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	89fb      	ldrh	r3, [r7, #14]
 8003700:	4413      	add	r3, r2
 8003702:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003704:	89fb      	ldrh	r3, [r7, #14]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800371a:	2100      	movs	r1, #0
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	f7ff ffc7 	bl	80036b0 <u8g2_font_get_byte>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800372a:	2101      	movs	r1, #1
 800372c:	6838      	ldr	r0, [r7, #0]
 800372e:	f7ff ffbf 	bl	80036b0 <u8g2_font_get_byte>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800373a:	2102      	movs	r1, #2
 800373c:	6838      	ldr	r0, [r7, #0]
 800373e:	f7ff ffb7 	bl	80036b0 <u8g2_font_get_byte>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800374a:	2103      	movs	r1, #3
 800374c:	6838      	ldr	r0, [r7, #0]
 800374e:	f7ff ffaf 	bl	80036b0 <u8g2_font_get_byte>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800375a:	2104      	movs	r1, #4
 800375c:	6838      	ldr	r0, [r7, #0]
 800375e:	f7ff ffa7 	bl	80036b0 <u8g2_font_get_byte>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800376a:	2105      	movs	r1, #5
 800376c:	6838      	ldr	r0, [r7, #0]
 800376e:	f7ff ff9f 	bl	80036b0 <u8g2_font_get_byte>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800377a:	2106      	movs	r1, #6
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f7ff ff97 	bl	80036b0 <u8g2_font_get_byte>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800378a:	2107      	movs	r1, #7
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f7ff ff8f 	bl	80036b0 <u8g2_font_get_byte>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800379a:	2108      	movs	r1, #8
 800379c:	6838      	ldr	r0, [r7, #0]
 800379e:	f7ff ff87 	bl	80036b0 <u8g2_font_get_byte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80037aa:	2109      	movs	r1, #9
 80037ac:	6838      	ldr	r0, [r7, #0]
 80037ae:	f7ff ff7f 	bl	80036b0 <u8g2_font_get_byte>
 80037b2:	4603      	mov	r3, r0
 80037b4:	b25a      	sxtb	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80037ba:	210a      	movs	r1, #10
 80037bc:	6838      	ldr	r0, [r7, #0]
 80037be:	f7ff ff77 	bl	80036b0 <u8g2_font_get_byte>
 80037c2:	4603      	mov	r3, r0
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80037ca:	210b      	movs	r1, #11
 80037cc:	6838      	ldr	r0, [r7, #0]
 80037ce:	f7ff ff6f 	bl	80036b0 <u8g2_font_get_byte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b25a      	sxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80037da:	210c      	movs	r1, #12
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f7ff ff67 	bl	80036b0 <u8g2_font_get_byte>
 80037e2:	4603      	mov	r3, r0
 80037e4:	b25a      	sxtb	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80037ea:	210d      	movs	r1, #13
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	f7ff ff5f 	bl	80036b0 <u8g2_font_get_byte>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80037fa:	210e      	movs	r1, #14
 80037fc:	6838      	ldr	r0, [r7, #0]
 80037fe:	f7ff ff57 	bl	80036b0 <u8g2_font_get_byte>
 8003802:	4603      	mov	r3, r0
 8003804:	b25a      	sxtb	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800380a:	210f      	movs	r1, #15
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	f7ff ff4f 	bl	80036b0 <u8g2_font_get_byte>
 8003812:	4603      	mov	r3, r0
 8003814:	b25a      	sxtb	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800381a:	2110      	movs	r1, #16
 800381c:	6838      	ldr	r0, [r7, #0]
 800381e:	f7ff ff47 	bl	80036b0 <u8g2_font_get_byte>
 8003822:	4603      	mov	r3, r0
 8003824:	b25a      	sxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800382a:	2111      	movs	r1, #17
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f7ff ff50 	bl	80036d2 <u8g2_font_get_word>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800383a:	2113      	movs	r1, #19
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f7ff ff48 	bl	80036d2 <u8g2_font_get_word>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800384a:	2115      	movs	r1, #21
 800384c:	6838      	ldr	r0, [r7, #0]
 800384e:	f7ff ff40 	bl	80036d2 <u8g2_font_get_word>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	82da      	strh	r2, [r3, #22]
#endif
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7b1b      	ldrb	r3, [r3, #12]
 8003872:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	7b7b      	ldrb	r3, [r7, #13]
 8003880:	fa42 f303 	asr.w	r3, r2, r3
 8003884:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003886:	7b7b      	ldrb	r3, [r7, #13]
 8003888:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800388a:	7bba      	ldrb	r2, [r7, #14]
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	4413      	add	r3, r2
 8003890:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003892:	7bbb      	ldrb	r3, [r7, #14]
 8003894:	2b07      	cmp	r3, #7
 8003896:	d91a      	bls.n	80038ce <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003898:	2308      	movs	r3, #8
 800389a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800389c:	7b3a      	ldrb	r2, [r7, #12]
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	7b3b      	ldrb	r3, [r7, #12]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	b25a      	sxtb	r2, r3
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	3b08      	subs	r3, #8
 80038cc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	4013      	ands	r3, r2
 80038e2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7bba      	ldrb	r2, [r7, #14]
 80038e8:	731a      	strb	r2, [r3, #12]
  return val;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffab 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	3b01      	subs	r3, #1
 8003918:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800391a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	73fb      	strb	r3, [r7, #15]
  return v;
 8003930:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800393c:	b490      	push	{r4, r7}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4604      	mov	r4, r0
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4623      	mov	r3, r4
 800394c:	80fb      	strh	r3, [r7, #6]
 800394e:	4603      	mov	r3, r0
 8003950:	717b      	strb	r3, [r7, #5]
 8003952:	460b      	mov	r3, r1
 8003954:	713b      	strb	r3, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d014      	beq.n	800398a <u8g2_add_vector_y+0x4e>
 8003960:	2b02      	cmp	r3, #2
 8003962:	dc19      	bgt.n	8003998 <u8g2_add_vector_y+0x5c>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <u8g2_add_vector_y+0x32>
 8003968:	2b01      	cmp	r3, #1
 800396a:	d007      	beq.n	800397c <u8g2_add_vector_y+0x40>
 800396c:	e014      	b.n	8003998 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800396e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003972:	b29a      	uxth	r2, r3
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4413      	add	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
      break;
 800397a:	e014      	b.n	80039a6 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800397c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003980:	b29a      	uxth	r2, r3
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	4413      	add	r3, r2
 8003986:	80fb      	strh	r3, [r7, #6]
      break;
 8003988:	e00d      	b.n	80039a6 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800398a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800398e:	b29b      	uxth	r3, r3
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	80fb      	strh	r3, [r7, #6]
      break;
 8003996:	e006      	b.n	80039a6 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8003998:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800399c:	b29b      	uxth	r3, r3
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	80fb      	strh	r3, [r7, #6]
      break;      
 80039a4:	bf00      	nop
  }
  return dy;
 80039a6:	88fb      	ldrh	r3, [r7, #6]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc90      	pop	{r4, r7}
 80039b0:	4770      	bx	lr

080039b2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80039b2:	b490      	push	{r4, r7}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4604      	mov	r4, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	80fb      	strh	r3, [r7, #6]
 80039c4:	4603      	mov	r3, r0
 80039c6:	717b      	strb	r3, [r7, #5]
 80039c8:	460b      	mov	r3, r1
 80039ca:	713b      	strb	r3, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d014      	beq.n	8003a00 <u8g2_add_vector_x+0x4e>
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	dc19      	bgt.n	8003a0e <u8g2_add_vector_x+0x5c>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <u8g2_add_vector_x+0x32>
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d007      	beq.n	80039f2 <u8g2_add_vector_x+0x40>
 80039e2:	e014      	b.n	8003a0e <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80039e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	4413      	add	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
      break;
 80039f0:	e014      	b.n	8003a1c <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80039f2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	88fa      	ldrh	r2, [r7, #6]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	80fb      	strh	r3, [r7, #6]
      break;
 80039fe:	e00d      	b.n	8003a1c <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8003a00:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	88fa      	ldrh	r2, [r7, #6]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	80fb      	strh	r3, [r7, #6]
      break;
 8003a0c:	e006      	b.n	8003a1c <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8003a0e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	4413      	add	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
      break;      
 8003a1a:	bf00      	nop
  }
  return dx;
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc90      	pop	{r4, r7}
 8003a26:	4770      	bx	lr

08003a28 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3360      	adds	r3, #96	; 0x60
 8003a3c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003a48:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003a50:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003a58:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003a5a:	7bfa      	ldrb	r2, [r7, #15]
 8003a5c:	7d7b      	ldrb	r3, [r7, #21]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003a66:	7dfa      	ldrb	r2, [r7, #23]
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d201      	bcs.n	8003a72 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	889b      	ldrh	r3, [r3, #4]
 8003a76:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	88db      	ldrh	r3, [r3, #6]
 8003a7c:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003a7e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003a82:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	7c1b      	ldrb	r3, [r3, #16]
 8003a8a:	89b8      	ldrh	r0, [r7, #12]
 8003a8c:	f7ff ff91 	bl	80039b2 <u8g2_add_vector_x>
 8003a90:	4603      	mov	r3, r0
 8003a92:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003a94:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003a98:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	7c1b      	ldrb	r3, [r3, #16]
 8003aa0:	8978      	ldrh	r0, [r7, #10]
 8003aa2:	f7ff ff4b 	bl	800393c <u8g2_add_vector_y>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003aaa:	78bb      	ldrb	r3, [r7, #2]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d010      	beq.n	8003ad2 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	7b9a      	ldrb	r2, [r3, #14]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003aba:	7dbb      	ldrb	r3, [r7, #22]
 8003abc:	b298      	uxth	r0, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	7c1b      	ldrb	r3, [r3, #16]
 8003ac2:	897a      	ldrh	r2, [r7, #10]
 8003ac4:	89b9      	ldrh	r1, [r7, #12]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4603      	mov	r3, r0
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fbfa 	bl	80042c4 <u8g2_DrawHVLine>
 8003ad0:	e013      	b.n	8003afa <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	7b5b      	ldrb	r3, [r3, #13]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10f      	bne.n	8003afa <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	7bda      	ldrb	r2, [r3, #15]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003ae4:	7dbb      	ldrb	r3, [r7, #22]
 8003ae6:	b298      	uxth	r0, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	7c1b      	ldrb	r3, [r3, #16]
 8003aec:	897a      	ldrh	r2, [r7, #10]
 8003aee:	89b9      	ldrh	r1, [r7, #12]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	4603      	mov	r3, r0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fbe5 	bl	80042c4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003afa:	7dfa      	ldrb	r2, [r7, #23]
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d309      	bcc.n	8003b16 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8003b02:	7dfa      	ldrb	r2, [r7, #23]
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	757b      	strb	r3, [r7, #21]
    ly++;
 8003b0e:	7d3b      	ldrb	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003b14:	e79d      	b.n	8003a52 <u8g2_font_decode_len+0x2a>
      break;
 8003b16:	bf00      	nop
  }
  lx += cnt;
 8003b18:	7d7a      	ldrb	r2, [r7, #21]
 8003b1a:	7dfb      	ldrb	r3, [r7, #23]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003b20:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003b28:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	725a      	strb	r2, [r3, #9]
  
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff fe80 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003b62:	4603      	mov	r3, r0
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003b70:	4619      	mov	r1, r3
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f7ff fe75 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	b25a      	sxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	7b9b      	ldrb	r3, [r3, #14]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	73da      	strb	r2, [r3, #15]
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffbc 	bl	8003b38 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003bc6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6978      	ldr	r0, [r7, #20]
 8003bd2:	f7ff fe90 	bl	80038f6 <u8g2_font_decode_get_signed_bits>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003be0:	4619      	mov	r1, r3
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff fe87 	bl	80038f6 <u8g2_font_decode_get_signed_bits>
 8003be8:	4603      	mov	r3, r0
 8003bea:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f7ff fe7e 	bl	80038f6 <u8g2_font_decode_get_signed_bits>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f340 80d7 	ble.w	8003db8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	8898      	ldrh	r0, [r3, #4]
 8003c0e:	7cfa      	ldrb	r2, [r7, #19]
 8003c10:	7c7b      	ldrb	r3, [r7, #17]
 8003c12:	4413      	add	r3, r2
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	425b      	negs	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	b25a      	sxtb	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	7c1b      	ldrb	r3, [r3, #16]
 8003c20:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003c24:	f7ff fec5 	bl	80039b2 <u8g2_add_vector_x>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	88d8      	ldrh	r0, [r3, #6]
 8003c34:	7cfa      	ldrb	r2, [r7, #19]
 8003c36:	7c7b      	ldrb	r3, [r7, #17]
 8003c38:	4413      	add	r3, r2
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	425b      	negs	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	b25a      	sxtb	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	7c1b      	ldrb	r3, [r3, #16]
 8003c46:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003c4a:	f7ff fe77 	bl	800393c <u8g2_add_vector_y>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	889b      	ldrh	r3, [r3, #4]
 8003c5a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	88db      	ldrh	r3, [r3, #6]
 8003c60:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8003c62:	8bfb      	ldrh	r3, [r7, #30]
 8003c64:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8003c66:	8b7b      	ldrh	r3, [r7, #26]
 8003c68:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	7c1b      	ldrb	r3, [r3, #16]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d85a      	bhi.n	8003d28 <u8g2_font_decode_glyph+0x180>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <u8g2_font_decode_glyph+0xd0>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003ccd 	.word	0x08003ccd
 8003c84:	08003d01 	.word	0x08003d01
      {
	case 0:
	    x1 += decode->glyph_width;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	8bbb      	ldrh	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8003c96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	8b3b      	ldrh	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	833b      	strh	r3, [r7, #24]
	    break;
 8003ca2:	e041      	b.n	8003d28 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8003ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8bfa      	ldrh	r2, [r7, #30]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003cb0:	8bfb      	ldrh	r3, [r7, #30]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003cb6:	8bbb      	ldrh	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	8b3b      	ldrh	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	833b      	strh	r3, [r7, #24]
	    break;
 8003cca:	e02d      	b.n	8003d28 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8bfa      	ldrh	r2, [r7, #30]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003cda:	8bfb      	ldrh	r3, [r7, #30]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8003ce0:	8bbb      	ldrh	r3, [r7, #28]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8003ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8b7a      	ldrh	r2, [r7, #26]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003cf2:	8b7b      	ldrh	r3, [r7, #26]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003cf8:	8b3b      	ldrh	r3, [r7, #24]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003cfe:	e013      	b.n	8003d28 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8003d00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	8bbb      	ldrh	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8b7a      	ldrh	r2, [r7, #26]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003d1a:	8b7b      	ldrh	r3, [r7, #26]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8003d20:	8b3b      	ldrh	r3, [r7, #24]
 8003d22:	3301      	adds	r3, #1
 8003d24:	833b      	strh	r3, [r7, #24]
	    break;	  
 8003d26:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003d28:	8bb8      	ldrh	r0, [r7, #28]
 8003d2a:	8b7a      	ldrh	r2, [r7, #26]
 8003d2c:	8bf9      	ldrh	r1, [r7, #30]
 8003d2e:	8b3b      	ldrh	r3, [r7, #24]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	4603      	mov	r3, r0
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb83 	bl	8004440 <u8g2_IsIntersection>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <u8g2_font_decode_glyph+0x19e>
	return d;
 8003d40:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003d44:	e03a      	b.n	8003dbc <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6978      	ldr	r0, [r7, #20]
 8003d5c:	f7ff fd81 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d60:	4603      	mov	r3, r0
 8003d62:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7ff fd78 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fe53 	bl	8003a28 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fe4d 	bl	8003a28 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003d8e:	2101      	movs	r1, #1
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f7ff fd66 	bl	8003862 <u8g2_font_decode_get_unsigned_bits>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ec      	bne.n	8003d76 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003da2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dd00      	ble.n	8003dac <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003daa:	e7d2      	b.n	8003d52 <u8g2_font_decode_glyph+0x1aa>
	break;
 8003dac:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	7b9a      	ldrb	r2, [r3, #14]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8003db8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3317      	adds	r3, #23
 8003dda:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	2bff      	cmp	r3, #255	; 0xff
 8003de0:	d82a      	bhi.n	8003e38 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d907      	bls.n	8003df8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003dee:	461a      	mov	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e009      	b.n	8003e0c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d906      	bls.n	8003e0c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003e04:	461a      	mov	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4413      	add	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d04e      	beq.n	8003eb4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	887a      	ldrh	r2, [r7, #2]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d102      	bne.n	8003e28 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3302      	adds	r3, #2
 8003e26:	e049      	b.n	8003ebc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	4413      	add	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003e36:	e7e9      	b.n	8003e0c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003e3e:	461a      	mov	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6938      	ldr	r0, [r7, #16]
 8003e4e:	f7ff fc40 	bl	80036d2 <u8g2_font_get_word>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	6938      	ldr	r0, [r7, #16]
 8003e60:	f7ff fc37 	bl	80036d2 <u8g2_font_get_word>
 8003e64:	4603      	mov	r3, r0
 8003e66:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003e6e:	89fa      	ldrh	r2, [r7, #14]
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3e9      	bcc.n	8003e4a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003e90:	89fb      	ldrh	r3, [r7, #14]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003e96:	89fa      	ldrh	r2, [r7, #14]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d102      	bne.n	8003ea4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	e00b      	b.n	8003ebc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4413      	add	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003eb2:	e7e0      	b.n	8003e76 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <u8g2_font_get_glyph_data+0xf6>
	break;
 8003eb8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	817b      	strh	r3, [r7, #10]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	813b      	strh	r3, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	897a      	ldrh	r2, [r7, #10]
 8003ee6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	893a      	ldrh	r2, [r7, #8]
 8003eee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff64 	bl	8003dc4 <u8g2_font_get_glyph_data>
 8003efc:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff fe4e 	bl	8003ba8 <u8g2_font_decode_glyph>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003f10:	8afb      	ldrh	r3, [r7, #22]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d833      	bhi.n	8003fa8 <u8g2_DrawGlyph+0x8c>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <u8g2_DrawGlyph+0x2c>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f95 	.word	0x08003f95
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	4413      	add	r3, r2
 8003f68:	813b      	strh	r3, [r7, #8]
      break;
 8003f6a:	e01d      	b.n	8003fa8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	4798      	blx	r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	897b      	ldrh	r3, [r7, #10]
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	817b      	strh	r3, [r7, #10]
      break;
 8003f7e:	e013      	b.n	8003fa8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	4798      	blx	r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	893b      	ldrh	r3, [r7, #8]
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	813b      	strh	r3, [r7, #8]
      break;
 8003f92:	e009      	b.n	8003fa8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	4798      	blx	r3
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	817b      	strh	r3, [r7, #10]
      break;
 8003fa6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	893a      	ldrh	r2, [r7, #8]
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7ff ff88 	bl	8003ec4 <u8g2_font_draw_glyph>
 8003fb4:	4603      	mov	r3, r0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop

08003fc0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fc5f 	bl	8004896 <u8x8_utf8_init>
  sum = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	4798      	blx	r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003fee:	8abb      	ldrh	r3, [r7, #20]
 8003ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d038      	beq.n	800406a <u8g2_draw_string+0xaa>
      break;
    str++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003ffe:	8abb      	ldrh	r3, [r7, #20]
 8004000:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004004:	4293      	cmp	r3, r2
 8004006:	d0e9      	beq.n	8003fdc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004008:	8abb      	ldrh	r3, [r7, #20]
 800400a:	893a      	ldrh	r2, [r7, #8]
 800400c:	8979      	ldrh	r1, [r7, #10]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff84 	bl	8003f1c <u8g2_DrawGlyph>
 8004014:	4603      	mov	r3, r0
 8004016:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800401e:	2b03      	cmp	r3, #3
 8004020:	d81e      	bhi.n	8004060 <u8g2_draw_string+0xa0>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <u8g2_draw_string+0x68>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	08004039 	.word	0x08004039
 800402c:	08004043 	.word	0x08004043
 8004030:	0800404d 	.word	0x0800404d
 8004034:	08004057 	.word	0x08004057
      {
	case 0:
	  x += delta;
 8004038:	897a      	ldrh	r2, [r7, #10]
 800403a:	8a7b      	ldrh	r3, [r7, #18]
 800403c:	4413      	add	r3, r2
 800403e:	817b      	strh	r3, [r7, #10]
	  break;
 8004040:	e00e      	b.n	8004060 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004042:	893a      	ldrh	r2, [r7, #8]
 8004044:	8a7b      	ldrh	r3, [r7, #18]
 8004046:	4413      	add	r3, r2
 8004048:	813b      	strh	r3, [r7, #8]
	  break;
 800404a:	e009      	b.n	8004060 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800404c:	897a      	ldrh	r2, [r7, #10]
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	817b      	strh	r3, [r7, #10]
	  break;
 8004054:	e004      	b.n	8004060 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004056:	893a      	ldrh	r2, [r7, #8]
 8004058:	8a7b      	ldrh	r3, [r7, #18]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	813b      	strh	r3, [r7, #8]
	  break;
 800405e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004060:	8afa      	ldrh	r2, [r7, #22]
 8004062:	8a7b      	ldrh	r3, [r7, #18]
 8004064:	4413      	add	r3, r2
 8004066:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004068:	e7b8      	b.n	8003fdc <u8g2_draw_string+0x1c>
      break;
 800406a:	bf00      	nop
    }
  }
  return sum;
 800406c:	8afb      	ldrh	r3, [r7, #22]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop

08004078 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	817b      	strh	r3, [r7, #10]
 8004086:	4613      	mov	r3, r2
 8004088:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <u8g2_DrawUTF8+0x30>)
 800408e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004090:	893a      	ldrh	r2, [r7, #8]
 8004092:	8979      	ldrh	r1, [r7, #10]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff ff92 	bl	8003fc0 <u8g2_draw_string>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	080048b1 	.word	0x080048b1

080040ac <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05d      	beq.n	8004178 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04d      	beq.n	800417a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11c      	bne.n	8004122 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80040f4:	429a      	cmp	r2, r3
 80040f6:	da05      	bge.n	8004104 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004110:	429a      	cmp	r2, r3
 8004112:	dd32      	ble.n	800417a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004120:	e02b      	b.n	800417a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004130:	4619      	mov	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004138:	440b      	add	r3, r1
 800413a:	429a      	cmp	r2, r3
 800413c:	da0d      	bge.n	800415a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800414c:	b2db      	uxtb	r3, r3
 800414e:	4413      	add	r3, r2
 8004150:	b2db      	uxtb	r3, r3
 8004152:	b25a      	sxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004166:	429a      	cmp	r2, r3
 8004168:	dd07      	ble.n	800417a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004176:	e000      	b.n	800417a <u8g2_UpdateRefHeight+0xce>
    return;
 8004178:	bf00      	nop
  }  
}
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  return 0;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
	...

08004198 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a03      	ldr	r2, [pc, #12]	; (80041b0 <u8g2_SetFontPosBaseline+0x18>)
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	08004183 	.word	0x08004183

080041b4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d00b      	beq.n	80041e0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3374      	adds	r3, #116	; 0x74
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fa9b 	bl	8003710 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff66 	bl	80040ac <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	460b      	mov	r3, r1
 80041f8:	80fb      	strh	r3, [r7, #6]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004204:	8afb      	ldrh	r3, [r7, #22]
 8004206:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	8abb      	ldrh	r3, [r7, #20]
 800420e:	4413      	add	r3, r2
 8004210:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004212:	8afa      	ldrh	r2, [r7, #22]
 8004214:	8abb      	ldrh	r3, [r7, #20]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90b      	bls.n	8004232 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800421a:	8afa      	ldrh	r2, [r7, #22]
 800421c:	88bb      	ldrh	r3, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d205      	bcs.n	800422e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004222:	88bb      	ldrh	r3, [r7, #4]
 8004224:	82bb      	strh	r3, [r7, #20]
      b--;
 8004226:	8abb      	ldrh	r3, [r7, #20]
 8004228:	3b01      	subs	r3, #1
 800422a:	82bb      	strh	r3, [r7, #20]
 800422c:	e001      	b.n	8004232 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004232:	8afa      	ldrh	r2, [r7, #22]
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d301      	bcc.n	800423e <u8g2_clip_intersection2+0x56>
    return 0;
 800423a:	2300      	movs	r3, #0
 800423c:	e01c      	b.n	8004278 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800423e:	8aba      	ldrh	r2, [r7, #20]
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	429a      	cmp	r2, r3
 8004244:	d801      	bhi.n	800424a <u8g2_clip_intersection2+0x62>
    return 0;
 8004246:	2300      	movs	r3, #0
 8004248:	e016      	b.n	8004278 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800424a:	8afa      	ldrh	r2, [r7, #22]
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	429a      	cmp	r2, r3
 8004250:	d201      	bcs.n	8004256 <u8g2_clip_intersection2+0x6e>
    a = c;
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004256:	8aba      	ldrh	r2, [r7, #20]
 8004258:	88bb      	ldrh	r3, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d901      	bls.n	8004262 <u8g2_clip_intersection2+0x7a>
    b = d;
 800425e:	88bb      	ldrh	r3, [r7, #4]
 8004260:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8afa      	ldrh	r2, [r7, #22]
 8004266:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004268:	8aba      	ldrh	r2, [r7, #20]
 800426a:	8afb      	ldrh	r3, [r7, #22]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	8aba      	ldrh	r2, [r7, #20]
 8004274:	801a      	strh	r2, [r3, #0]
  return 1;
 8004276:	2301      	movs	r3, #1
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004282:	b590      	push	{r4, r7, lr}
 8004284:	b087      	sub	sp, #28
 8004286:	af02      	add	r7, sp, #8
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	4608      	mov	r0, r1
 800428c:	4611      	mov	r1, r2
 800428e:	461a      	mov	r2, r3
 8004290:	4603      	mov	r3, r0
 8004292:	817b      	strh	r3, [r7, #10]
 8004294:	460b      	mov	r3, r1
 8004296:	813b      	strh	r3, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a0:	893a      	ldrh	r2, [r7, #8]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80042aa:	88f8      	ldrh	r0, [r7, #6]
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	8979      	ldrh	r1, [r7, #10]
 80042b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4603      	mov	r3, r0
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	47a0      	blx	r4
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	460b      	mov	r3, r1
 80042d8:	813b      	strh	r3, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d075      	beq.n	80043d4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d072      	beq.n	80043d4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d91a      	bls.n	800432a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80042f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d109      	bne.n	8004310 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80042fc:	897a      	ldrh	r2, [r7, #10]
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	b29b      	uxth	r3, r3
 8004304:	817b      	strh	r3, [r7, #10]
	  x++;
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	e00c      	b.n	800432a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004314:	2b03      	cmp	r3, #3
 8004316:	d108      	bne.n	800432a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	b29b      	uxth	r3, r3
 8004320:	813b      	strh	r3, [r7, #8]
	  y++;
 8004322:	893b      	ldrh	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	b29b      	uxth	r3, r3
 8004328:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800432a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11a      	bne.n	8004374 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d83b      	bhi.n	80043c2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	d937      	bls.n	80043c6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004362:	1db9      	adds	r1, r7, #6
 8004364:	f107 000a 	add.w	r0, r7, #10
 8004368:	f7ff ff3e 	bl	80041e8 <u8g2_clip_intersection2>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11a      	bne.n	80043a8 <u8g2_DrawHVLine+0xe4>
	  return;
 8004372:	e02f      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	429a      	cmp	r2, r3
 800437e:	d824      	bhi.n	80043ca <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	429a      	cmp	r2, r3
 800438a:	d920      	bls.n	80043ce <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004398:	1db9      	adds	r1, r7, #6
 800439a:	f107 0008 	add.w	r0, r7, #8
 800439e:	f7ff ff23 	bl	80041e8 <u8g2_clip_intersection2>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d014      	beq.n	80043d2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	689c      	ldr	r4, [r3, #8]
 80043ae:	8979      	ldrh	r1, [r7, #10]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	88f8      	ldrh	r0, [r7, #6]
 80043b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	4603      	mov	r3, r0
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	47a0      	blx	r4
 80043c0:	e008      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
	  return;
 80043c2:	bf00      	nop
 80043c4:	e006      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
	  return;
 80043c6:	bf00      	nop
 80043c8:	e004      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
	  return;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
	  return;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <u8g2_DrawHVLine+0x110>
	  return;
 80043d2:	bf00      	nop
    }
}
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd90      	pop	{r4, r7, pc}

080043da <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80043da:	b490      	push	{r4, r7}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4604      	mov	r4, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	80fb      	strh	r3, [r7, #6]
 80043ec:	4603      	mov	r3, r0
 80043ee:	80bb      	strh	r3, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
 80043f4:	4613      	mov	r3, r2
 80043f6:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80043f8:	887a      	ldrh	r2, [r7, #2]
 80043fa:	88bb      	ldrh	r3, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d20d      	bcs.n	800441c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004400:	883a      	ldrh	r2, [r7, #0]
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	429a      	cmp	r2, r3
 8004406:	d901      	bls.n	800440c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800440c:	887a      	ldrh	r2, [r7, #2]
 800440e:	883b      	ldrh	r3, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d901      	bls.n	8004418 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004414:	2301      	movs	r3, #1
 8004416:	e00e      	b.n	8004436 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004418:	2300      	movs	r3, #0
 800441a:	e00c      	b.n	8004436 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800441c:	883a      	ldrh	r2, [r7, #0]
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	429a      	cmp	r2, r3
 8004422:	d907      	bls.n	8004434 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004424:	887a      	ldrh	r2, [r7, #2]
 8004426:	883b      	ldrh	r3, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d901      	bls.n	8004430 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800442c:	2301      	movs	r3, #1
 800442e:	e002      	b.n	8004436 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004434:	2300      	movs	r3, #0
    }
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bc90      	pop	{r4, r7}
 800443e:	4770      	bx	lr

08004440 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004466:	8b3b      	ldrh	r3, [r7, #24]
 8004468:	893a      	ldrh	r2, [r7, #8]
 800446a:	f7ff ffb6 	bl	80043da <u8g2_is_intersection_decision_tree>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <u8g2_IsIntersection+0x38>
    return 0; 
 8004474:	2300      	movs	r3, #0
 8004476:	e00a      	b.n	800448e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	897a      	ldrh	r2, [r7, #10]
 8004488:	f7ff ffa7 	bl	80043da <u8g2_is_intersection_decision_tree>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004496:	b480      	push	{r7}
 8004498:	b089      	sub	sp, #36	; 0x24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	4608      	mov	r0, r1
 80044a0:	4611      	mov	r1, r2
 80044a2:	461a      	mov	r2, r3
 80044a4:	4603      	mov	r3, r0
 80044a6:	817b      	strh	r3, [r7, #10]
 80044a8:	460b      	mov	r3, r1
 80044aa:	813b      	strh	r3, [r7, #8]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80044b4:	7efb      	ldrb	r3, [r7, #27]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80044c0:	7e3a      	ldrb	r2, [r7, #24]
 80044c2:	7efb      	ldrb	r3, [r7, #27]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d801      	bhi.n	80044e0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80044dc:	7e3b      	ldrb	r3, [r7, #24]
 80044de:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80044ea:	7e3b      	ldrb	r3, [r7, #24]
 80044ec:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80044ee:	893b      	ldrh	r3, [r7, #8]
 80044f0:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	f023 0307 	bic.w	r3, r3, #7
 80044f8:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	7c1b      	ldrb	r3, [r3, #16]
 8004500:	b29b      	uxth	r3, r3
 8004502:	8afa      	ldrh	r2, [r7, #22]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004510:	8afb      	ldrh	r3, [r7, #22]
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004520:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d117      	bne.n	8004558 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	781a      	ldrb	r2, [r3, #0]
 800452c:	7ebb      	ldrb	r3, [r7, #26]
 800452e:	4313      	orrs	r3, r2
 8004530:	b2da      	uxtb	r2, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	7e7b      	ldrb	r3, [r7, #25]
 800453c:	4053      	eors	r3, r2
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
	len--;
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	3b01      	subs	r3, #1
 800454e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e8      	bne.n	8004528 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004556:	e038      	b.n	80045ca <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	7ebb      	ldrb	r3, [r7, #26]
 800455e:	4313      	orrs	r3, r2
 8004560:	b2da      	uxtb	r2, r3
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	7e7b      	ldrb	r3, [r7, #25]
 800456c:	4053      	eors	r3, r2
 800456e:	b2da      	uxtb	r2, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004574:	7efb      	ldrb	r3, [r7, #27]
 8004576:	3301      	adds	r3, #1
 8004578:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800457a:	7efb      	ldrb	r3, [r7, #27]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	76fb      	strb	r3, [r7, #27]
      len--;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	3b01      	subs	r3, #1
 8004586:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004588:	7efb      	ldrb	r3, [r7, #27]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d114      	bne.n	80045b8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004592:	461a      	mov	r2, r3
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d801      	bhi.n	80045a8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80045a4:	2301      	movs	r3, #1
 80045a6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d008      	beq.n	80045c4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	767b      	strb	r3, [r7, #25]
 80045b6:	e005      	b.n	80045c4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80045b8:	7ebb      	ldrb	r3, [r7, #26]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80045be:	7e7b      	ldrb	r3, [r7, #25]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1c6      	bne.n	8004558 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80045ca:	bf00      	nop
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	79fa      	ldrb	r2, [r7, #7]
 8004638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ffad 	bl	80045d4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fd8c 	bl	8004198 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	89fa      	ldrh	r2, [r7, #14]
 80046b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	7c1b      	ldrb	r3, [r3, #16]
 80046b6:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80046b8:	89fb      	ldrh	r3, [r7, #14]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	89fa      	ldrh	r2, [r7, #14]
 80046c2:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ca:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	89fa      	ldrh	r2, [r7, #14]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046de:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80046e0:	89fb      	ldrh	r3, [r7, #14]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80046e8:	4413      	add	r3, r2
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	7c52      	ldrb	r2, [r2, #17]
 80046ee:	4293      	cmp	r3, r2
 80046f0:	dd08      	ble.n	8004704 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	7c5b      	ldrb	r3, [r3, #17]
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046fe:	b29b      	uxth	r3, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004704:	89fb      	ldrh	r3, [r7, #14]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	4413      	add	r3, r2
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	8a9a      	ldrh	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	8ada      	ldrh	r2, [r3, #22]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4603      	mov	r3, r0
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fe63 	bl	8004440 <u8g2_IsIntersection>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004788:	e03b      	b.n	8004802 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	429a      	cmp	r2, r3
 80047a0:	d205      	bcs.n	80047ae <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d905      	bls.n	80047ca <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d205      	bcs.n	80047e6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d905      	bls.n	8004802 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ff3c 	bl	8004690 <u8g2_update_dimension_common>
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff7b 	bl	8004750 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af02      	add	r7, sp, #8
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	4608      	mov	r0, r1
 800486c:	4611      	mov	r1, r2
 800486e:	461a      	mov	r2, r3
 8004870:	4603      	mov	r3, r0
 8004872:	817b      	strh	r3, [r7, #10]
 8004874:	460b      	mov	r3, r1
 8004876:	813b      	strh	r3, [r7, #8]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800487c:	88f8      	ldrh	r0, [r7, #6]
 800487e:	893a      	ldrh	r2, [r7, #8]
 8004880:	8979      	ldrh	r1, [r7, #10]
 8004882:	7e3b      	ldrb	r3, [r7, #24]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4603      	mov	r3, r0
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff fcfa 	bl	8004282 <u8g2_draw_hv_line_2dir>
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <u8x8_utf8_next+0x18>
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	2b0a      	cmp	r3, #10
 80048c6:	d102      	bne.n	80048ce <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80048c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048cc:	e06e      	b.n	80049ac <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d145      	bne.n	8004964 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	2bfb      	cmp	r3, #251	; 0xfb
 80048dc:	d908      	bls.n	80048f0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2205      	movs	r2, #5
 80048e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	70fb      	strb	r3, [r7, #3]
 80048ee:	e032      	b.n	8004956 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	2bf7      	cmp	r3, #247	; 0xf7
 80048f4:	d908      	bls.n	8004908 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2204      	movs	r2, #4
 80048fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	70fb      	strb	r3, [r7, #3]
 8004906:	e026      	b.n	8004956 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	2bef      	cmp	r3, #239	; 0xef
 800490c:	d908      	bls.n	8004920 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	70fb      	strb	r3, [r7, #3]
 800491e:	e01a      	b.n	8004956 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	2bdf      	cmp	r3, #223	; 0xdf
 8004924:	d908      	bls.n	8004938 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	70fb      	strb	r3, [r7, #3]
 8004936:	e00e      	b.n	8004956 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2bbf      	cmp	r3, #191	; 0xbf
 800493c:	d908      	bls.n	8004950 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	70fb      	strb	r3, [r7, #3]
 800494e:	e002      	b.n	8004956 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b29b      	uxth	r3, r3
 8004954:	e02a      	b.n	80049ac <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 800495e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004962:	e023      	b.n	80049ac <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800496a:	3b01      	subs	r3, #1
 800496c:	b2da      	uxtb	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8c1b      	ldrh	r3, [r3, #32]
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004986:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8c1a      	ldrh	r2, [r3, #32]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b29a      	uxth	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80049a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80049a6:	e001      	b.n	80049ac <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8c1b      	ldrh	r3, [r3, #32]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80049b6:	b590      	push	{r4, r7, lr}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	460b      	mov	r3, r1
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691c      	ldr	r4, [r3, #16]
 80049c8:	7afa      	ldrb	r2, [r7, #11]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2117      	movs	r1, #23
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	47a0      	blx	r4
 80049d2:	4603      	mov	r3, r0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd90      	pop	{r4, r7, pc}

080049dc <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80049e8:	1cfb      	adds	r3, r7, #3
 80049ea:	461a      	mov	r2, r3
 80049ec:	2101      	movs	r1, #1
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ffe1 	bl	80049b6 <u8x8_byte_SendBytes>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691c      	ldr	r4, [r3, #16]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2118      	movs	r1, #24
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	47a0      	blx	r4
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}

08004a1e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004a1e:	b590      	push	{r4, r7, lr}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691c      	ldr	r4, [r3, #16]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2119      	movs	r1, #25
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	47a0      	blx	r4
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd90      	pop	{r4, r7, pc}

08004a3e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004a3e:	b590      	push	{r4, r7, lr}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68dc      	ldr	r4, [r3, #12]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	2300      	movs	r3, #0
 8004a52:	2115      	movs	r1, #21
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	47a0      	blx	r4
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd90      	pop	{r4, r7, pc}

08004a62 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004a62:	b590      	push	{r4, r7, lr}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68dc      	ldr	r4, [r3, #12]
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	2300      	movs	r3, #0
 8004a76:	2116      	movs	r1, #22
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	47a0      	blx	r4
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68dc      	ldr	r4, [r3, #12]
 8004a98:	7afa      	ldrb	r2, [r7, #11]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2117      	movs	r1, #23
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	47a0      	blx	r4
 8004aa2:	4603      	mov	r3, r0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}

08004aac <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68dc      	ldr	r4, [r3, #12]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2200      	movs	r2, #0
 8004abc:	2118      	movs	r1, #24
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	47a0      	blx	r4
 8004ac2:	4603      	mov	r3, r0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}

08004acc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68dc      	ldr	r4, [r3, #12]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2200      	movs	r2, #0
 8004adc:	2119      	movs	r1, #25
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	47a0      	blx	r4
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}

08004aec <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	73fb      	strb	r3, [r7, #15]
    data++;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2bfe      	cmp	r3, #254	; 0xfe
 8004b06:	d031      	beq.n	8004b6c <u8x8_cad_SendSequence+0x80>
 8004b08:	2bfe      	cmp	r3, #254	; 0xfe
 8004b0a:	dc3d      	bgt.n	8004b88 <u8x8_cad_SendSequence+0x9c>
 8004b0c:	2b19      	cmp	r3, #25
 8004b0e:	dc3b      	bgt.n	8004b88 <u8x8_cad_SendSequence+0x9c>
 8004b10:	2b18      	cmp	r3, #24
 8004b12:	da23      	bge.n	8004b5c <u8x8_cad_SendSequence+0x70>
 8004b14:	2b16      	cmp	r3, #22
 8004b16:	dc02      	bgt.n	8004b1e <u8x8_cad_SendSequence+0x32>
 8004b18:	2b15      	cmp	r3, #21
 8004b1a:	da03      	bge.n	8004b24 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004b1c:	e034      	b.n	8004b88 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004b1e:	2b17      	cmp	r3, #23
 8004b20:	d00e      	beq.n	8004b40 <u8x8_cad_SendSequence+0x54>
	return;
 8004b22:	e031      	b.n	8004b88 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68dc      	ldr	r4, [r3, #12]
 8004b2e:	7bba      	ldrb	r2, [r7, #14]
 8004b30:	7bf9      	ldrb	r1, [r7, #15]
 8004b32:	2300      	movs	r3, #0
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	47a0      	blx	r4
	  data++;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	603b      	str	r3, [r7, #0]
	  break;
 8004b3e:	e022      	b.n	8004b86 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004b46:	f107 030e 	add.w	r3, r7, #14
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ff99 	bl	8004a86 <u8x8_cad_SendData>
	  data++;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	603b      	str	r3, [r7, #0]
	  break;
 8004b5a:	e014      	b.n	8004b86 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68dc      	ldr	r4, [r3, #12]
 8004b60:	7bf9      	ldrb	r1, [r7, #15]
 8004b62:	2300      	movs	r3, #0
 8004b64:	2200      	movs	r2, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	47a0      	blx	r4
	  break;
 8004b6a:	e00c      	b.n	8004b86 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004b72:	7bbb      	ldrb	r3, [r7, #14]
 8004b74:	461a      	mov	r2, r3
 8004b76:	2129      	movs	r1, #41	; 0x29
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fa24 	bl	8004fc6 <u8x8_gpio_call>
	  data++;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	603b      	str	r3, [r7, #0]
	  break;
 8004b84:	bf00      	nop
    cmd = *data;
 8004b86:	e7b6      	b.n	8004af6 <u8x8_cad_SendSequence+0xa>
	return;
 8004b88:	bf00      	nop
    }
  }
}
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}

08004b90 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff ff2d 	bl	80049fe <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff ff18 	bl	80049dc <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691c      	ldr	r4, [r3, #16]
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2117      	movs	r1, #23
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff ff2f 	bl	8004a1e <u8x8_byte_EndTransfer>
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}

08004bc8 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	72fb      	strb	r3, [r7, #11]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	3b14      	subs	r3, #20
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d86e      	bhi.n	8004cc0 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c7f 	.word	0x08004c7f
 8004bec:	08004c01 	.word	0x08004c01
 8004bf0:	08004c2f 	.word	0x08004c2f
 8004bf4:	08004c3b 	.word	0x08004c3b
 8004bf8:	08004ca3 	.word	0x08004ca3
 8004bfc:	08004cab 	.word	0x08004cab
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004c00:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff ff08 	bl	8004a1e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fef5 	bl	80049fe <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004c14:	2100      	movs	r1, #0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fee0 	bl	80049dc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004c1c:	7abb      	ldrb	r3, [r7, #10]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fedb 	bl	80049dc <u8x8_byte_SendByte>
      in_transfer = 1;
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8004c2c:	e04a      	b.n	8004cc4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8004c2e:	7abb      	ldrb	r3, [r7, #10]
 8004c30:	4619      	mov	r1, r3
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff fed2 	bl	80049dc <u8x8_byte_SendByte>
      break;      
 8004c38:	e044      	b.n	8004cc4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8004c3a:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff feeb 	bl	8004a1e <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004c4c:	e00a      	b.n	8004c64 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	2118      	movs	r1, #24
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff9c 	bl	8004b90 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8004c58:	7abb      	ldrb	r3, [r7, #10]
 8004c5a:	3b18      	subs	r3, #24
 8004c5c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3318      	adds	r3, #24
 8004c62:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004c64:	7abb      	ldrb	r3, [r7, #10]
 8004c66:	2b18      	cmp	r3, #24
 8004c68:	d8f1      	bhi.n	8004c4e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8004c6a:	7abb      	ldrb	r3, [r7, #10]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7ff ff8d 	bl	8004b90 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
      break;
 8004c7c:	e022      	b.n	8004cc4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c84:	2bff      	cmp	r3, #255	; 0xff
 8004c86:	d103      	bne.n	8004c90 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2278      	movs	r2, #120	; 0x78
 8004c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691c      	ldr	r4, [r3, #16]
 8004c94:	7aba      	ldrb	r2, [r7, #10]
 8004c96:	7af9      	ldrb	r1, [r7, #11]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	47a0      	blx	r4
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	e011      	b.n	8004cc6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8004ca2:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
      break;
 8004ca8:	e00c      	b.n	8004cc4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff feb3 	bl	8004a1e <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
      break;
 8004cbe:	e001      	b.n	8004cc4 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8004cc4:	2301      	movs	r3, #1
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd90      	pop	{r4, r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	200004ac 	.word	0x200004ac

08004cd4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	72fb      	strb	r3, [r7, #11]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	3b0b      	subs	r3, #11
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	f200 808a 	bhi.w	8004e04 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d0d 	.word	0x08004d0d
 8004cfc:	08004e05 	.word	0x08004e05
 8004d00:	08004d27 	.word	0x08004d27
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004d79 	.word	0x08004d79
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004d0c:	7abb      	ldrb	r3, [r7, #10]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004d12:	4940      	ldr	r1, [pc, #256]	; (8004e14 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fee9 	bl	8004aec <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004d1a:	e075      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004d1c:	493e      	ldr	r1, [pc, #248]	; (8004e18 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fee4 	bl	8004aec <u8x8_cad_SendSequence>
      break;
 8004d24:	e070      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004d26:	7abb      	ldrb	r3, [r7, #10]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004d2c:	493b      	ldr	r1, [pc, #236]	; (8004e1c <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7ff fedc 	bl	8004aec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	7c9a      	ldrb	r2, [r3, #18]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004d40:	e062      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004d42:	4937      	ldr	r1, [pc, #220]	; (8004e20 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fed1 	bl	8004aec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	7cda      	ldrb	r2, [r3, #19]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004d56:	e057      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff fea7 	bl	8004aac <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004d5e:	2181      	movs	r1, #129	; 0x81
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fe6c 	bl	8004a3e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004d66:	7abb      	ldrb	r3, [r7, #10]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fe79 	bl	8004a62 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff feab 	bl	8004acc <u8x8_cad_EndTransfer>
      break;
 8004d76:	e047      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fe97 	bl	8004aac <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	795b      	ldrb	r3, [r3, #5]
 8004d82:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	4413      	add	r3, r2
 8004d94:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fe50 	bl	8004a3e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0310 	orr.w	r3, r3, #16
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fe46 	bl	8004a3e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fe50 	bl	8004a62 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	799b      	ldrb	r3, [r3, #6]
 8004dc6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fe47 	bl	8004a62 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	791b      	ldrb	r3, [r3, #4]
 8004dd8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004de0:	7dbb      	ldrb	r3, [r7, #22]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4619      	mov	r1, r3
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff fe4b 	bl	8004a86 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004df0:	7abb      	ldrb	r3, [r7, #10]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004df6:	7abb      	ldrb	r3, [r7, #10]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1eb      	bne.n	8004dd4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fe65 	bl	8004acc <u8x8_cad_EndTransfer>
      break;
 8004e02:	e001      	b.n	8004e08 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004e08:	2301      	movs	r3, #1
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	0800a0a0 	.word	0x0800a0a0
 8004e18:	0800a0a8 	.word	0x0800a0a8
 8004e1c:	0800a0b0 	.word	0x0800a0b0
 8004e20:	0800a0b8 	.word	0x0800a0b8

08004e24 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
 8004e32:	4613      	mov	r3, r2
 8004e34:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004e36:	7aba      	ldrb	r2, [r7, #10]
 8004e38:	7af9      	ldrb	r1, [r7, #11]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff ff49 	bl	8004cd4 <u8x8_d_ssd1306_sh1106_generic>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e014      	b.n	8004e76 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	d009      	beq.n	8004e66 <u8x8_d_ssd1306_128x64_noname+0x42>
 8004e52:	2b0a      	cmp	r3, #10
 8004e54:	d10c      	bne.n	8004e70 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f829 	bl	8004eae <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004e5c:	4908      	ldr	r1, [pc, #32]	; (8004e80 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff fe44 	bl	8004aec <u8x8_cad_SendSequence>
      break;
 8004e64:	e006      	b.n	8004e74 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004e66:	4907      	ldr	r1, [pc, #28]	; (8004e84 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f80d 	bl	8004e88 <u8x8_d_helper_display_setup_memory>
      break;
 8004e6e:	e001      	b.n	8004e74 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004e74:	2301      	movs	r3, #1
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	0800a068 	.word	0x0800a068
 8004e84:	0800a0c0 	.word	0x0800a0c0

08004e88 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	7c9a      	ldrb	r2, [r3, #18]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004eae:	b590      	push	{r4, r7, lr}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695c      	ldr	r4, [r3, #20]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2128      	movs	r1, #40	; 0x28
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68dc      	ldr	r4, [r3, #12]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2114      	movs	r1, #20
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	214b      	movs	r1, #75	; 0x4b
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f875 	bl	8004fc6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	791b      	ldrb	r3, [r3, #4]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2129      	movs	r1, #41	; 0x29
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f86d 	bl	8004fc6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004eec:	2200      	movs	r2, #0
 8004eee:	214b      	movs	r1, #75	; 0x4b
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f868 	bl	8004fc6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	461a      	mov	r2, r3
 8004efe:	2129      	movs	r1, #41	; 0x29
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f860 	bl	8004fc6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004f06:	2201      	movs	r2, #1
 8004f08:	214b      	movs	r1, #75	; 0x4b
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f85b 	bl	8004fc6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	795b      	ldrb	r3, [r3, #5]
 8004f16:	461a      	mov	r2, r3
 8004f18:	2129      	movs	r1, #41	; 0x29
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f853 	bl	8004fc6 <u8x8_gpio_call>
}    
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd90      	pop	{r4, r7, pc}

08004f28 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	70fb      	strb	r3, [r7, #3]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70bb      	strb	r3, [r7, #2]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004f46:	78bb      	ldrb	r3, [r7, #2]
 8004f48:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004f4a:	787b      	ldrb	r3, [r7, #1]
 8004f4c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689c      	ldr	r4, [r3, #8]
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	210f      	movs	r1, #15
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	47a0      	blx	r4
 8004f62:	4603      	mov	r3, r0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd90      	pop	{r4, r7, pc}

08004f6c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689c      	ldr	r4, [r3, #8]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2109      	movs	r1, #9
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	47a0      	blx	r4
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd90      	pop	{r4, r7, pc}

08004f8a <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004f8a:	b590      	push	{r4, r7, lr}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689c      	ldr	r4, [r3, #8]
 8004f96:	2300      	movs	r3, #0
 8004f98:	2200      	movs	r2, #0
 8004f9a:	210a      	movs	r1, #10
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	47a0      	blx	r4
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689c      	ldr	r4, [r3, #8]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2110      	movs	r1, #16
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	47a0      	blx	r4
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}

08004fc6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695c      	ldr	r4, [r3, #20]
 8004fda:	78ba      	ldrb	r2, [r7, #2]
 8004fdc:	78f9      	ldrb	r1, [r7, #3]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	47a0      	blx	r4
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}

08004fec <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	72fb      	strb	r3, [r7, #11]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
	...

0800500c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a11      	ldr	r2, [pc, #68]	; (8005064 <u8x8_SetupDefaults+0x58>)
 800501e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a10      	ldr	r2, [pc, #64]	; (8005064 <u8x8_SetupDefaults+0x58>)
 8005024:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <u8x8_SetupDefaults+0x58>)
 800502a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <u8x8_SetupDefaults+0x58>)
 8005030:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	22ff      	movs	r2, #255	; 0xff
 800504c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	22ff      	movs	r2, #255	; 0xff
 8005054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	08004fed 	.word	0x08004fed

08005068 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff ffc8 	bl	800500c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff ff69 	bl	8004f6c <u8x8_SetupMemory>
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <__libc_init_array>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	2600      	movs	r6, #0
 80050a8:	4d0c      	ldr	r5, [pc, #48]	; (80050dc <__libc_init_array+0x38>)
 80050aa:	4c0d      	ldr	r4, [pc, #52]	; (80050e0 <__libc_init_array+0x3c>)
 80050ac:	1b64      	subs	r4, r4, r5
 80050ae:	10a4      	asrs	r4, r4, #2
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	d109      	bne.n	80050c8 <__libc_init_array+0x24>
 80050b4:	f000 f822 	bl	80050fc <_init>
 80050b8:	2600      	movs	r6, #0
 80050ba:	4d0a      	ldr	r5, [pc, #40]	; (80050e4 <__libc_init_array+0x40>)
 80050bc:	4c0a      	ldr	r4, [pc, #40]	; (80050e8 <__libc_init_array+0x44>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	42a6      	cmp	r6, r4
 80050c4:	d105      	bne.n	80050d2 <__libc_init_array+0x2e>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050cc:	4798      	blx	r3
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7ee      	b.n	80050b0 <__libc_init_array+0xc>
 80050d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d6:	4798      	blx	r3
 80050d8:	3601      	adds	r6, #1
 80050da:	e7f2      	b.n	80050c2 <__libc_init_array+0x1e>
 80050dc:	0800a0d8 	.word	0x0800a0d8
 80050e0:	0800a0d8 	.word	0x0800a0d8
 80050e4:	0800a0d8 	.word	0x0800a0d8
 80050e8:	0800a0dc 	.word	0x0800a0dc

080050ec <memset>:
 80050ec:	4603      	mov	r3, r0
 80050ee:	4402      	add	r2, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <_init>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr

08005108 <_fini>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr
