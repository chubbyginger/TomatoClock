
TomatoClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071bc  080071bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080071bc  080071bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071bc  080071bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080071c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000070  08007234  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08007234  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00083487  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043cd  00000000  00000000  000a3520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003388  00000000  00000000  000a78f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c8  00000000  00000000  000aac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af68  00000000  00000000  000ade40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026643  00000000  00000000  000c8da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a54e0  00000000  00000000  000ef3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001948cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e554  00000000  00000000  00194920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080061dc 	.word	0x080061dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080061dc 	.word	0x080061dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc01 	bl	8000958 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Had better delay for some time here.
  HAL_Delay(100);
 8000156:	2064      	movs	r0, #100	; 0x64
 8000158:	f000 fc60 	bl	8000a1c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f844 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f9b8 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000164:	f000 f89e 	bl	80002a4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000168:	f000 f8ca 	bl	8000300 <MX_RTC_Init>
  MX_TIM2_Init();
 800016c:	f000 f912 	bl	8000394 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f986 	bl	8000480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Show the running status.
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017a:	4816      	ldr	r0, [pc, #88]	; (80001d4 <main+0x88>)
 800017c:	f000 feda 	bl	8000f34 <HAL_GPIO_WritePin>

  // Initialize u8g2
  u8g2_t u8g2;
  u8g2Init(&u8g2);
 8000180:	463b      	mov	r3, r7
 8000182:	4618      	mov	r0, r3
 8000184:	f003 fe10 	bl	8003da8 <u8g2Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_latin);
 8000188:	463b      	mov	r3, r7
 800018a:	4913      	ldr	r1, [pc, #76]	; (80001d8 <main+0x8c>)
 800018c:	4618      	mov	r0, r3
 800018e:	f004 fc89 	bl	8004aa4 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 8000192:	463b      	mov	r3, r7
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fe49 	bl	8003e2c <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 11, 44, getTime(&hrtc));
 800019a:	4810      	ldr	r0, [pc, #64]	; (80001dc <main+0x90>)
 800019c:	f003 fe22 	bl	8003de4 <getTime>
 80001a0:	4603      	mov	r3, r0
 80001a2:	4638      	mov	r0, r7
 80001a4:	222c      	movs	r2, #44	; 0x2c
 80001a6:	210b      	movs	r1, #11
 80001a8:	f004 fbde 	bl	8004968 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 80001ac:	463b      	mov	r3, r7
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 feaf 	bl	8003f12 <u8g2_SendBuffer>
	uint8_t buf = "hello world!";
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <main+0x94>)
 80001b6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	HAL_UART_Transmit(&huart1, buf, sizeof(buf), 100);
 80001ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80001be:	4619      	mov	r1, r3
 80001c0:	2364      	movs	r3, #100	; 0x64
 80001c2:	2201      	movs	r2, #1
 80001c4:	4807      	ldr	r0, [pc, #28]	; (80001e4 <main+0x98>)
 80001c6:	f003 fb6a 	bl	800389e <HAL_UART_Transmit>
	HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ce:	f000 fc25 	bl	8000a1c <HAL_Delay>
  {
 80001d2:	e7d9      	b.n	8000188 <main+0x3c>
 80001d4:	40011000 	.word	0x40011000
 80001d8:	08006248 	.word	0x08006248
 80001dc:	20000520 	.word	0x20000520
 80001e0:	080061f4 	.word	0x080061f4
 80001e4:	20000588 	.word	0x20000588

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	; 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f2:	2228      	movs	r2, #40	; 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f005 fb9a 	bl	8005930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000218:	2309      	movs	r3, #9
 800021a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fae4 	bl	8001810 <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800024e:	f000 f9c7 	bl	80005e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd4e 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800027a:	f000 f9b1 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800027e:	2301      	movs	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000286:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 feda 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000296:	f000 f9a3 	bl	80005e0 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	; 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <MX_I2C1_Init+0x54>)
 80002ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b0:	4a12      	ldr	r2, [pc, #72]	; (80002fc <MX_I2C1_Init+0x58>)
 80002b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <MX_I2C1_Init+0x50>)
 80002e2:	f000 fe3f 	bl	8000f64 <HAL_I2C_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002ec:	f000 f978 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000534 	.word	0x20000534
 80002f8:	40005400 	.word	0x40005400
 80002fc:	000186a0 	.word	0x000186a0

08000300 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	460a      	mov	r2, r1
 800030c:	801a      	strh	r2, [r3, #0]
 800030e:	460a      	mov	r2, r1
 8000310:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000312:	2300      	movs	r3, #0
 8000314:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000316:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MX_RTC_Init+0x8c>)
 8000318:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <MX_RTC_Init+0x90>)
 800031a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <MX_RTC_Init+0x8c>)
 800031e:	f04f 32ff 	mov.w	r2, #4294967295
 8000322:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <MX_RTC_Init+0x8c>)
 8000326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800032c:	4817      	ldr	r0, [pc, #92]	; (800038c <MX_RTC_Init+0x8c>)
 800032e:	f002 f803 	bl	8002338 <HAL_RTC_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000338:	f000 f952 	bl	80005e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 800033c:	2321      	movs	r3, #33	; 0x21
 800033e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 8000340:	2345      	movs	r3, #69	; 0x45
 8000342:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000344:	2300      	movs	r3, #0
 8000346:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <MX_RTC_Init+0x8c>)
 8000350:	f002 f888 	bl	8002464 <HAL_RTC_SetTime>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800035a:	f000 f941 	bl	80005e0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800035e:	2300      	movs	r3, #0
 8000360:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000362:	2301      	movs	r3, #1
 8000364:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 8000366:	2316      	movs	r3, #22
 8000368:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 800036a:	2322      	movs	r3, #34	; 0x22
 800036c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800036e:	463b      	mov	r3, r7
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_RTC_Init+0x8c>)
 8000376:	f002 f9e5 	bl	8002744 <HAL_RTC_SetDate>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000380:	f000 f92e 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000520 	.word	0x20000520
 8000390:	40002800 	.word	0x40002800

08000394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08e      	sub	sp, #56	; 0x38
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	f107 0320 	add.w	r3, r7, #32
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <MX_TIM2_Init+0xe8>)
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <MX_TIM2_Init+0xe8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <MX_TIM2_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <MX_TIM2_Init+0xe8>)
 80003da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b26      	ldr	r3, [pc, #152]	; (800047c <MX_TIM2_Init+0xe8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e6:	4b25      	ldr	r3, [pc, #148]	; (800047c <MX_TIM2_Init+0xe8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ec:	4823      	ldr	r0, [pc, #140]	; (800047c <MX_TIM2_Init+0xe8>)
 80003ee:	f002 fd01 	bl	8002df4 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003f8:	f000 f8f2 	bl	80005e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000400:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000406:	4619      	mov	r1, r3
 8000408:	481c      	ldr	r0, [pc, #112]	; (800047c <MX_TIM2_Init+0xe8>)
 800040a:	f002 fe59 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000414:	f000 f8e4 	bl	80005e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <MX_TIM2_Init+0xe8>)
 800041a:	f002 fd3a 	bl	8002e92 <HAL_TIM_PWM_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000424:	f000 f8dc 	bl	80005e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000430:	f107 0320 	add.w	r3, r7, #32
 8000434:	4619      	mov	r1, r3
 8000436:	4811      	ldr	r0, [pc, #68]	; (800047c <MX_TIM2_Init+0xe8>)
 8000438:	f003 f986 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000442:	f000 f8cd 	bl	80005e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000446:	2360      	movs	r3, #96	; 0x60
 8000448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2204      	movs	r2, #4
 800045a:	4619      	mov	r1, r3
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <MX_TIM2_Init+0xe8>)
 800045e:	f002 fd71 	bl	8002f44 <HAL_TIM_PWM_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000468:	f000 f8ba 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <MX_TIM2_Init+0xe8>)
 800046e:	f000 f96d 	bl	800074c <HAL_TIM_MspPostInit>

}
 8000472:	bf00      	nop
 8000474:	3738      	adds	r7, #56	; 0x38
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200005cc 	.word	0x200005cc

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f003 f9a4 	bl	8003804 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f88d 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000588 	.word	0x20000588
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <MX_GPIO_Init+0xfc>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a38      	ldr	r2, [pc, #224]	; (80005d0 <MX_GPIO_Init+0xfc>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_GPIO_Init+0xfc>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_GPIO_Init+0xfc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a32      	ldr	r2, [pc, #200]	; (80005d0 <MX_GPIO_Init+0xfc>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <MX_GPIO_Init+0xfc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_GPIO_Init+0xfc>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <MX_GPIO_Init+0xfc>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_GPIO_Init+0xfc>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_GPIO_Init+0xfc>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <MX_GPIO_Init+0xfc>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_GPIO_Init+0xfc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	4821      	ldr	r0, [pc, #132]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000550:	f000 fcf0 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	481f      	ldr	r0, [pc, #124]	; (80005d8 <MX_GPIO_Init+0x104>)
 800055a:	f000 fceb 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2302      	movs	r3, #2
 800056e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	4817      	ldr	r0, [pc, #92]	; (80005d4 <MX_GPIO_Init+0x100>)
 8000578:	f000 fb58 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800057c:	2370      	movs	r3, #112	; 0x70
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4812      	ldr	r0, [pc, #72]	; (80005d8 <MX_GPIO_Init+0x104>)
 8000590:	f000 fb4c 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_GPIO_Init+0x104>)
 80005ac:	f000 fb3e 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_GPIO_Init+0x108>)
 80005c4:	f000 fb32 	bl	8000c2c <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40010800 	.word	0x40010800
 80005dc:	40010c00 	.word	0x40010c00

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x60>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_MspInit+0x60>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <HAL_I2C_MspInit+0x70>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d123      	bne.n	80006b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000688:	23c0      	movs	r3, #192	; 0xc0
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068c:	2312      	movs	r3, #18
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_I2C_MspInit+0x78>)
 800069c:	f000 fac6 	bl	8000c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 80006a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006aa:	61d3      	str	r3, [r2, #28]
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_I2C_MspInit+0x74>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40005400 	.word	0x40005400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010c00 	.word	0x40010c00

080006cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_RTC_MspInit+0x3c>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d110      	bne.n	8000700 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006de:	f001 f88b 	bl	80017f8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_RTC_MspInit+0x40>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <HAL_RTC_MspInit+0x40>)
 80006e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_RTC_MspInit+0x40>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_RTC_MspInit+0x44>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40002800 	.word	0x40002800
 800070c:	40021000 	.word	0x40021000
 8000710:	4242043c 	.word	0x4242043c

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000724:	d10b      	bne.n	800073e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_TIM_Base_MspInit+0x34>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800076a:	d117      	bne.n	800079c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_TIM_MspPostInit+0x58>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <HAL_TIM_MspPostInit+0x5c>)
 8000798:	f000 fa48 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <HAL_UART_MspInit+0x8c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d131      	bne.n	8000830 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_UART_MspInit+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	; (800083c <HAL_UART_MspInit+0x90>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_UART_MspInit+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <HAL_UART_MspInit+0x90>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_UART_MspInit+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <HAL_UART_MspInit+0x94>)
 8000812:	f000 fa0b 	bl	8000c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_UART_MspInit+0x94>)
 800082c:	f000 f9fe 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40013800 	.word	0x40013800
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f8ab 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f005 f80a 	bl	80058dc <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20005000 	.word	0x20005000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20000628 	.word	0x20000628

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000932:	f7ff ffe5 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f004 ffd7 	bl	80058e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fc07 	bl	800014c <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000948:	080071c4 	.word	0x080071c4
  ldr r2, =_sbss
 800094c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000950:	20000628 	.word	0x20000628

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f92b 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fe3a 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f935 	bl	8000c12 <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 f90b 	bl	8000bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <HAL_IncTick+0x20>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000614 	.word	0x20000614

08000a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000614 	.word	0x20000614

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff90 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff49 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb0 	bl	8000b80 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b08b      	sub	sp, #44	; 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e169      	b.n	8000f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c40:	2201      	movs	r2, #1
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	f040 8158 	bne.w	8000f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a9a      	ldr	r2, [pc, #616]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d05e      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c68:	4a98      	ldr	r2, [pc, #608]	; (8000ecc <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d875      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c6e:	4a98      	ldr	r2, [pc, #608]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d058      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c74:	4a96      	ldr	r2, [pc, #600]	; (8000ed0 <HAL_GPIO_Init+0x2a4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d86f      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c7a:	4a96      	ldr	r2, [pc, #600]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d052      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c80:	4a94      	ldr	r2, [pc, #592]	; (8000ed4 <HAL_GPIO_Init+0x2a8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d869      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c86:	4a94      	ldr	r2, [pc, #592]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d04c      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c8c:	4a92      	ldr	r2, [pc, #584]	; (8000ed8 <HAL_GPIO_Init+0x2ac>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d863      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c92:	4a92      	ldr	r2, [pc, #584]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d046      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
 8000c98:	4a90      	ldr	r2, [pc, #576]	; (8000edc <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d85d      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000c9e:	2b12      	cmp	r3, #18
 8000ca0:	d82a      	bhi.n	8000cf8 <HAL_GPIO_Init+0xcc>
 8000ca2:	2b12      	cmp	r3, #18
 8000ca4:	d859      	bhi.n	8000d5a <HAL_GPIO_Init+0x12e>
 8000ca6:	a201      	add	r2, pc, #4	; (adr r2, 8000cac <HAL_GPIO_Init+0x80>)
 8000ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000d01 	.word	0x08000d01
 8000cb4:	08000d13 	.word	0x08000d13
 8000cb8:	08000d55 	.word	0x08000d55
 8000cbc:	08000d5b 	.word	0x08000d5b
 8000cc0:	08000d5b 	.word	0x08000d5b
 8000cc4:	08000d5b 	.word	0x08000d5b
 8000cc8:	08000d5b 	.word	0x08000d5b
 8000ccc:	08000d5b 	.word	0x08000d5b
 8000cd0:	08000d5b 	.word	0x08000d5b
 8000cd4:	08000d5b 	.word	0x08000d5b
 8000cd8:	08000d5b 	.word	0x08000d5b
 8000cdc:	08000d5b 	.word	0x08000d5b
 8000ce0:	08000d5b 	.word	0x08000d5b
 8000ce4:	08000d5b 	.word	0x08000d5b
 8000ce8:	08000d5b 	.word	0x08000d5b
 8000cec:	08000d5b 	.word	0x08000d5b
 8000cf0:	08000d09 	.word	0x08000d09
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	4a79      	ldr	r2, [pc, #484]	; (8000ee0 <HAL_GPIO_Init+0x2b4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cfe:	e02c      	b.n	8000d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e029      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e024      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	3308      	adds	r3, #8
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e01f      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	330c      	adds	r3, #12
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e01a      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e013      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d105      	bne.n	8000d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	611a      	str	r2, [r3, #16]
          break;
 8000d46:	e009      	b.n	8000d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	615a      	str	r2, [r3, #20]
          break;
 8000d52:	e003      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x130>
          break;
 8000d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d801      	bhi.n	8000d66 <HAL_GPIO_Init+0x13a>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	e001      	b.n	8000d6a <HAL_GPIO_Init+0x13e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d802      	bhi.n	8000d78 <HAL_GPIO_Init+0x14c>
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x152>
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	3b08      	subs	r3, #8
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	210f      	movs	r1, #15
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	6a39      	ldr	r1, [r7, #32]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a4c      	ldr	r2, [pc, #304]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <HAL_GPIO_Init+0x2b8>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <HAL_GPIO_Init+0x2c0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_GPIO_Init+0x2c4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e8>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3e      	ldr	r2, [pc, #248]	; (8000ef4 <HAL_GPIO_Init+0x2c8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3d      	ldr	r2, [pc, #244]	; (8000ef8 <HAL_GPIO_Init+0x2cc>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1e0>
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e2a:	492f      	ldr	r1, [pc, #188]	; (8000ee8 <HAL_GPIO_Init+0x2bc>)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	492c      	ldr	r1, [pc, #176]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4928      	ldr	r1, [pc, #160]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4922      	ldr	r1, [pc, #136]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	491e      	ldr	r1, [pc, #120]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	4918      	ldr	r1, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4914      	ldr	r1, [pc, #80]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d021      	beq.n	8000f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	490e      	ldr	r1, [pc, #56]	; (8000efc <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60cb      	str	r3, [r1, #12]
 8000ec8:	e021      	b.n	8000f0e <HAL_GPIO_Init+0x2e2>
 8000eca:	bf00      	nop
 8000ecc:	10320000 	.word	0x10320000
 8000ed0:	10310000 	.word	0x10310000
 8000ed4:	10220000 	.word	0x10220000
 8000ed8:	10210000 	.word	0x10210000
 8000edc:	10120000 	.word	0x10120000
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40010c00 	.word	0x40010c00
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40011400 	.word	0x40011400
 8000efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4909      	ldr	r1, [pc, #36]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f ae8e 	bne.w	8000c40 <HAL_GPIO_Init+0x14>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	372c      	adds	r7, #44	; 0x2c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e12b      	b.n	80011ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d106      	bne.n	8000f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fb60 	bl	8000650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2224      	movs	r2, #36	; 0x24
 8000f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fc8:	f000 fff6 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a81      	ldr	r2, [pc, #516]	; (80011d8 <HAL_I2C_Init+0x274>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d807      	bhi.n	8000fe8 <HAL_I2C_Init+0x84>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4a80      	ldr	r2, [pc, #512]	; (80011dc <HAL_I2C_Init+0x278>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	bf94      	ite	ls
 8000fe0:	2301      	movls	r3, #1
 8000fe2:	2300      	movhi	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	e006      	b.n	8000ff6 <HAL_I2C_Init+0x92>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <HAL_I2C_Init+0x27c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	bf94      	ite	ls
 8000ff0:	2301      	movls	r3, #1
 8000ff2:	2300      	movhi	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0e7      	b.n	80011ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4a78      	ldr	r2, [pc, #480]	; (80011e4 <HAL_I2C_Init+0x280>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	0c9b      	lsrs	r3, r3, #18
 8001008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a6a      	ldr	r2, [pc, #424]	; (80011d8 <HAL_I2C_Init+0x274>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d802      	bhi.n	8001038 <HAL_I2C_Init+0xd4>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	e009      	b.n	800104c <HAL_I2C_Init+0xe8>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <HAL_I2C_Init+0x284>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	099b      	lsrs	r3, r3, #6
 800104a:	3301      	adds	r3, #1
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	430b      	orrs	r3, r1
 8001052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800105e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	495c      	ldr	r1, [pc, #368]	; (80011d8 <HAL_I2C_Init+0x274>)
 8001068:	428b      	cmp	r3, r1
 800106a:	d819      	bhi.n	80010a0 <HAL_I2C_Init+0x13c>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e59      	subs	r1, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fbb1 f3f3 	udiv	r3, r1, r3
 800107a:	1c59      	adds	r1, r3, #1
 800107c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001080:	400b      	ands	r3, r1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00a      	beq.n	800109c <HAL_I2C_Init+0x138>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1e59      	subs	r1, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fbb1 f3f3 	udiv	r3, r1, r3
 8001094:	3301      	adds	r3, #1
 8001096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109a:	e051      	b.n	8001140 <HAL_I2C_Init+0x1dc>
 800109c:	2304      	movs	r3, #4
 800109e:	e04f      	b.n	8001140 <HAL_I2C_Init+0x1dc>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d111      	bne.n	80010cc <HAL_I2C_Init+0x168>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1e58      	subs	r0, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	440b      	add	r3, r1
 80010b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	e012      	b.n	80010f2 <HAL_I2C_Init+0x18e>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1e58      	subs	r0, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	0099      	lsls	r1, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf0c      	ite	eq
 80010ec:	2301      	moveq	r3, #1
 80010ee:	2300      	movne	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_Init+0x196>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e022      	b.n	8001140 <HAL_I2C_Init+0x1dc>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10e      	bne.n	8001120 <HAL_I2C_Init+0x1bc>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1e58      	subs	r0, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6859      	ldr	r1, [r3, #4]
 800110a:	460b      	mov	r3, r1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	440b      	add	r3, r1
 8001110:	fbb0 f3f3 	udiv	r3, r0, r3
 8001114:	3301      	adds	r3, #1
 8001116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800111e:	e00f      	b.n	8001140 <HAL_I2C_Init+0x1dc>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1e58      	subs	r0, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	0099      	lsls	r1, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	fbb0 f3f3 	udiv	r3, r0, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	6809      	ldr	r1, [r1, #0]
 8001144:	4313      	orrs	r3, r2
 8001146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800116e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6911      	ldr	r1, [r2, #16]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68d2      	ldr	r2, [r2, #12]
 800117a:	4311      	orrs	r1, r2
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	430b      	orrs	r3, r1
 8001182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	000186a0 	.word	0x000186a0
 80011dc:	001e847f 	.word	0x001e847f
 80011e0:	003d08ff 	.word	0x003d08ff
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	10624dd3 	.word	0x10624dd3

080011ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	817b      	strh	r3, [r7, #10]
 80011fc:	4613      	mov	r3, r2
 80011fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff fc02 	bl	8000a08 <HAL_GetTick>
 8001204:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b20      	cmp	r3, #32
 8001210:	f040 80e0 	bne.w	80013d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2319      	movs	r3, #25
 800121a:	2201      	movs	r2, #1
 800121c:	4970      	ldr	r1, [pc, #448]	; (80013e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 f964 	bl	80014ec <I2C_WaitOnFlagUntilTimeout>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800122a:	2302      	movs	r3, #2
 800122c:	e0d3      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_I2C_Master_Transmit+0x50>
 8001238:	2302      	movs	r3, #2
 800123a:	e0cc      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d007      	beq.n	8001262 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0201 	orr.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001270:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2221      	movs	r2, #33	; 0x21
 8001276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2210      	movs	r2, #16
 800127e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	893a      	ldrh	r2, [r7, #8]
 8001292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012a4:	8979      	ldrh	r1, [r7, #10]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	6a3a      	ldr	r2, [r7, #32]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f000 f89c 	bl	80013e8 <I2C_MasterRequestWrite>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e08d      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012d0:	e066      	b.n	80013a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f9de 	bl	8001698 <I2C_WaitOnTXEFlagUntilTimeout>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00d      	beq.n	80012fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d107      	bne.n	80012fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06b      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001326:	3b01      	subs	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b04      	cmp	r3, #4
 800133a:	d11b      	bne.n	8001374 <HAL_I2C_Master_Transmit+0x188>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001340:	2b00      	cmp	r3, #0
 8001342:	d017      	beq.n	8001374 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	6a39      	ldr	r1, [r7, #32]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f9ce 	bl	800171a <I2C_WaitOnBTFFlagUntilTimeout>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00d      	beq.n	80013a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	2b04      	cmp	r3, #4
 800138a:	d107      	bne.n	800139c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800139a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e01a      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d194      	bne.n	80012d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e000      	b.n	80013d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013d4:	2302      	movs	r3, #2
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	00100002 	.word	0x00100002
 80013e4:	ffff0000 	.word	0xffff0000

080013e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b08      	cmp	r3, #8
 8001402:	d006      	beq.n	8001412 <I2C_MasterRequestWrite+0x2a>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <I2C_MasterRequestWrite+0x2a>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00b      	b.n	800143c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	2b12      	cmp	r3, #18
 800142a:	d107      	bne.n	800143c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800143a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f84f 	bl	80014ec <I2C_WaitOnFlagUntilTimeout>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00d      	beq.n	8001470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001462:	d103      	bne.n	800146c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e035      	b.n	80014dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001478:	d108      	bne.n	800148c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800147a:	897b      	ldrh	r3, [r7, #10]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	e01b      	b.n	80014c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	11db      	asrs	r3, r3, #7
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0306 	and.w	r3, r3, #6
 8001496:	b2db      	uxtb	r3, r3
 8001498:	f063 030f 	orn	r3, r3, #15
 800149c:	b2da      	uxtb	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <I2C_MasterRequestWrite+0xfc>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f875 	bl	800159a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e010      	b.n	80014dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ba:	897b      	ldrh	r3, [r7, #10]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <I2C_MasterRequestWrite+0x100>)
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f865 	bl	800159a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	00010008 	.word	0x00010008
 80014e8:	00010002 	.word	0x00010002

080014ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014fc:	e025      	b.n	800154a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d021      	beq.n	800154a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001506:	f7ff fa7f 	bl	8000a08 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d302      	bcc.n	800151c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d116      	bne.n	800154a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2220      	movs	r2, #32
 8001526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e023      	b.n	8001592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10d      	bne.n	8001570 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4013      	ands	r3, r2
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	e00c      	b.n	800158a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4013      	ands	r3, r2
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf0c      	ite	eq
 8001582:	2301      	moveq	r3, #1
 8001584:	2300      	movne	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	429a      	cmp	r2, r3
 800158e:	d0b6      	beq.n	80014fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015a8:	e051      	b.n	800164e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b8:	d123      	bne.n	8001602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0204 	orr.w	r2, r3, #4
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e046      	b.n	8001690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d021      	beq.n	800164e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160a:	f7ff f9fd 	bl	8000a08 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	d302      	bcc.n	8001620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d116      	bne.n	800164e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f043 0220 	orr.w	r2, r3, #32
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e020      	b.n	8001690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10c      	bne.n	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4013      	ands	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	e00b      	b.n	800168a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	43da      	mvns	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4013      	ands	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d18d      	bne.n	80015aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016a4:	e02d      	b.n	8001702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f878 	bl	800179c <I2C_IsAcknowledgeFailed>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e02d      	b.n	8001712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d021      	beq.n	8001702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016be:	f7ff f9a3 	bl	8000a08 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d302      	bcc.n	80016d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d116      	bne.n	8001702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f043 0220 	orr.w	r2, r3, #32
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e007      	b.n	8001712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170c:	2b80      	cmp	r3, #128	; 0x80
 800170e:	d1ca      	bne.n	80016a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001726:	e02d      	b.n	8001784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f837 	bl	800179c <I2C_IsAcknowledgeFailed>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e02d      	b.n	8001794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173e:	d021      	beq.n	8001784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001740:	f7ff f962 	bl	8000a08 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d302      	bcc.n	8001756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f043 0220 	orr.w	r2, r3, #32
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e007      	b.n	8001794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b04      	cmp	r3, #4
 8001790:	d1ca      	bne.n	8001728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b2:	d11b      	bne.n	80017ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f043 0204 	orr.w	r2, r3, #4
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_PWR_EnableBkUpAccess+0x14>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	420e0020 	.word	0x420e0020

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e26c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8087 	beq.w	800193e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001830:	4b92      	ldr	r3, [pc, #584]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00c      	beq.n	8001856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183c:	4b8f      	ldr	r3, [pc, #572]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d112      	bne.n	800186e <HAL_RCC_OscConfig+0x5e>
 8001848:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d10b      	bne.n	800186e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001856:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d06c      	beq.n	800193c <HAL_RCC_OscConfig+0x12c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d168      	bne.n	800193c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e246      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x76>
 8001878:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a7f      	ldr	r2, [pc, #508]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e02e      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b78      	ldr	r3, [pc, #480]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a77      	ldr	r2, [pc, #476]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0xbc>
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a71      	ldr	r2, [pc, #452]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xd4>
 80018cc:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a67      	ldr	r2, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f88c 	bl	8000a08 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f888 	bl	8000a08 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1fa      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe4>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff f878 	bl	8000a08 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f874 	bl	8000a08 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1e6      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x10c>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x18c>
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1ba      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4939      	ldr	r1, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff f82d 	bl	8000a08 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f829 	bl	8000a08 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e19b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <HAL_RCC_OscConfig+0x270>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f80c 	bl	8000a08 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f808 	bl	8000a08 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e17a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d03a      	beq.n	8001a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d019      	beq.n	8001a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7fe ffec 	bl	8000a08 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7fe ffe8 	bl	8000a08 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e15a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 fad8 	bl	8002008 <RCC_Delay>
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7fe ffd2 	bl	8000a08 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a66:	e00f      	b.n	8001a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7fe ffce 	bl	8000a08 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d908      	bls.n	8001a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e140      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	42420000 	.word	0x42420000
 8001a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e9      	bne.n	8001a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a6 	beq.w	8001bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b97      	ldr	r3, [pc, #604]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10d      	bne.n	8001ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b91      	ldr	r3, [pc, #580]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b8e      	ldr	r3, [pc, #568]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a8a      	ldr	r2, [pc, #552]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7fe ff8f 	bl	8000a08 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7fe ff8b 	bl	8000a08 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0fd      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x312>
 8001b14:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e02d      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x334>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	e01c      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10c      	bne.n	8001b66 <HAL_RCC_OscConfig+0x356>
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a6c      	ldr	r2, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a69      	ldr	r2, [pc, #420]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	e00b      	b.n	8001b7e <HAL_RCC_OscConfig+0x36e>
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a66      	ldr	r2, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d015      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7fe ff3f 	bl	8000a08 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7fe ff3b 	bl	8000a08 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0ab      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ee      	beq.n	8001b8e <HAL_RCC_OscConfig+0x37e>
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ff29 	bl	8000a08 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ff25 	bl	8000a08 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e095      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1ee      	bne.n	8001bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8081 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d061      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d146      	bne.n	8001c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fef9 	bl	8000a08 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe fef5 	bl	8000a08 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e067      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d108      	bne.n	8001c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	492d      	ldr	r1, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a19      	ldr	r1, [r3, #32]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	430b      	orrs	r3, r1
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe fec9 	bl	8000a08 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fec5 	bl	8000a08 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e037      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x46a>
 8001c98:	e02f      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_RCC_OscConfig+0x4fc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe feb2 	bl	8000a08 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe feae 	bl	8000a08 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e020      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x498>
 8001cc6:	e018      	b.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e013      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	42420060 	.word	0x42420060

08001d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0d0      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4965      	ldr	r1, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e073      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e06b      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4936      	ldr	r1, [pc, #216]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e00:	f7fe fe02 	bl	8000a08 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fdfe 	bl	8000a08 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e053      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d210      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f821 	bl	8001ee4 <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1cc>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fd60 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08006230 	.word	0x08006230
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee4:	b490      	push	{r4, r7}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eec:	1d3c      	adds	r4, r7, #4
 8001eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ef4:	f240 2301 	movw	r3, #513	; 0x201
 8001ef8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x40>
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x46>
 8001f22:	e02d      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f26:	623b      	str	r3, [r7, #32]
      break;
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	0c9b      	lsrs	r3, r3, #18
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f36:	4413      	add	r3, r2
 8001f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c5b      	lsrs	r3, r3, #17
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f56:	4413      	add	r3, r2
 8001f58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f62:	fb02 f203 	mul.w	r2, r2, r3
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e004      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	623b      	str	r3, [r7, #32]
      break;
 8001f7e:	e002      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f82:	623b      	str	r3, [r7, #32]
      break;
 8001f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc90      	pop	{r4, r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	08006204 	.word	0x08006204
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	003d0900 	.word	0x003d0900

08001fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff2 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08006240 	.word	0x08006240

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffde 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	08006240 	.word	0x08006240

08002008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <RCC_Delay+0x34>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <RCC_Delay+0x38>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0a5b      	lsrs	r3, r3, #9
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002024:	bf00      	nop
  }
  while (Delay --);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e5a      	subs	r2, r3, #1
 800202a:	60fa      	str	r2, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f9      	bne.n	8002024 <RCC_Delay+0x1c>
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000000 	.word	0x20000000
 8002040:	10624dd3 	.word	0x10624dd3

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d07d      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10d      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	61d3      	str	r3, [r2, #28]
 800207c:	4b49      	ldr	r3, [pc, #292]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d118      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a4:	f7fe fcb0 	bl	8000a08 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fcac 	bl	8000a08 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06d      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d027      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020fe:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d014      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fc7b 	bl	8000a08 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fc77 	bl	8000a08 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e036      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	4313      	orrs	r3, r2
 8002148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	490b      	ldr	r1, [pc, #44]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420440 	.word	0x42420440

080021b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08d      	sub	sp, #52	; 0x34
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021b8:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80021ba:	f107 040c 	add.w	r4, r7, #12
 80021be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c4:	f240 2301 	movw	r3, #513	; 0x201
 80021c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	2300      	movs	r3, #0
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	f200 8091 	bhi.w	800230e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d04c      	beq.n	800228c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d07c      	beq.n	80022f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021f8:	e089      	b.n	800230e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80021fa:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002200:	4b49      	ldr	r3, [pc, #292]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8082 	beq.w	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800221a:	4413      	add	r3, r2
 800221c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002220:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d018      	beq.n	800225e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c5b      	lsrs	r3, r3, #17
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800223a:	4413      	add	r3, r2
 800223c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800224c:	4a37      	ldr	r2, [pc, #220]	; (800232c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fbb2 f2f3 	udiv	r2, r2, r3
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225c:	e004      	b.n	8002268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002274:	d102      	bne.n	800227c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800227a:	e04a      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4a2c      	ldr	r2, [pc, #176]	; (8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800228a:	e042      	b.n	8002312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d108      	bne.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80022a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ae:	e01f      	b.n	80022f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ba:	d109      	bne.n	80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80022c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ce:	e00f      	b.n	80022f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022da:	d11c      	bne.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d016      	beq.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80022e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022ee:	e012      	b.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80022f0:	e011      	b.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022f2:	f7ff fe75 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0b9b      	lsrs	r3, r3, #14
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800230c:	e004      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800230e:	bf00      	nop
 8002310:	e002      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002312:	bf00      	nop
 8002314:	e000      	b.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002316:	bf00      	nop
    }
  }
  return (frequency);
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800231a:	4618      	mov	r0, r3
 800231c:	3734      	adds	r7, #52	; 0x34
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	08006214 	.word	0x08006214
 8002328:	40021000 	.word	0x40021000
 800232c:	007a1200 	.word	0x007a1200
 8002330:	003d0900 	.word	0x003d0900
 8002334:	aaaaaaab 	.word	0xaaaaaaab

08002338 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e084      	b.n	8002458 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7c5b      	ldrb	r3, [r3, #17]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d105      	bne.n	8002364 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe f9b4 	bl	80006cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 faa0 	bl	80028b0 <HAL_RTC_WaitForSynchro>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2204      	movs	r2, #4
 800237a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e06b      	b.n	8002458 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fb59 	bl	8002a38 <RTC_EnterInitMode>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e060      	b.n	8002458 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0207 	bic.w	r2, r2, #7
 80023a4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_RTC_Init+0x128>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <HAL_RTC_Init+0x128>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023ba:	4b29      	ldr	r3, [pc, #164]	; (8002460 <HAL_RTC_Init+0x128>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4926      	ldr	r1, [pc, #152]	; (8002460 <HAL_RTC_Init+0x128>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d003      	beq.n	80023de <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00e      	b.n	80023fc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fee6 	bl	80021b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80023e4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d104      	bne.n	80023f6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e030      	b.n	8002458 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 010f 	bic.w	r1, r3, #15
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	0c1a      	lsrs	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	b291      	uxth	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb2d 	bl	8002a88 <RTC_ExitInitMode>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e00c      	b.n	8002458 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40006c00 	.word	0x40006c00

08002464 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_RTC_SetTime+0x20>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e080      	b.n	800258a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	7c1b      	ldrb	r3, [r3, #16]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_RTC_SetTime+0x30>
 8002490:	2302      	movs	r3, #2
 8002492:	e07a      	b.n	800258a <HAL_RTC_SetTime+0x126>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2202      	movs	r2, #2
 800249e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024b0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	4619      	mov	r1, r3
 80024ba:	460b      	mov	r3, r1
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a5b      	subs	r3, r3, r1
 80024c0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024c2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e01e      	b.n	800250c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fb1d 	bl	8002b12 <RTC_Bcd2ToByte>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024e0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	785b      	ldrb	r3, [r3, #1]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fb12 	bl	8002b12 <RTC_Bcd2ToByte>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024fa:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	789b      	ldrb	r3, [r3, #2]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fb06 	bl	8002b12 <RTC_Bcd2ToByte>
 8002506:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002508:	4423      	add	r3, r4
 800250a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800250c:	6979      	ldr	r1, [r7, #20]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fa2b 	bl	800296a <RTC_WriteTimeCounter>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2204      	movs	r2, #4
 800251e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e02f      	b.n	800258a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0205 	bic.w	r2, r2, #5
 8002538:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa3c 	bl	80029b8 <RTC_ReadAlarmCounter>
 8002540:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d018      	beq.n	800257c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	429a      	cmp	r2, r3
 8002550:	d214      	bcs.n	800257c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002558:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800255c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800255e:	6939      	ldr	r1, [r7, #16]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa42 	bl	80029ea <RTC_WriteAlarmCounter>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2204      	movs	r2, #4
 8002570:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e006      	b.n	800258a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
	...

08002594 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_RTC_GetTime+0x28>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b5      	b.n	800272c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0ac      	b.n	800272c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f999 	bl	800290a <RTC_ReadTimeCounter>
 80025d8:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4a55      	ldr	r2, [pc, #340]	; (8002734 <HAL_RTC_GetTime+0x1a0>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0adb      	lsrs	r3, r3, #11
 80025e4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RTC_GetTime+0x1a0>)
 80025ea:	fba3 1302 	umull	r1, r3, r3, r2
 80025ee:	0adb      	lsrs	r3, r3, #11
 80025f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	4a4f      	ldr	r2, [pc, #316]	; (8002738 <HAL_RTC_GetTime+0x1a4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_RTC_GetTime+0x1a0>)
 800260c:	fba2 1203 	umull	r1, r2, r2, r3
 8002610:	0ad2      	lsrs	r2, r2, #11
 8002612:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002616:	fb01 f202 	mul.w	r2, r1, r2
 800261a:	1a9a      	subs	r2, r3, r2
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RTC_GetTime+0x1a4>)
 800261e:	fba3 1302 	umull	r1, r3, r3, r2
 8002622:	0959      	lsrs	r1, r3, #5
 8002624:	460b      	mov	r3, r1
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a5b      	subs	r3, r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	1ad1      	subs	r1, r2, r3
 800262e:	b2ca      	uxtb	r2, r1
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b17      	cmp	r3, #23
 8002638:	d955      	bls.n	80026e6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_RTC_GetTime+0x1a8>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002646:	6939      	ldr	r1, [r7, #16]
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RTC_GetTime+0x1a8>)
 800264a:	fba3 2301 	umull	r2, r3, r3, r1
 800264e:	091a      	lsrs	r2, r3, #4
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	1aca      	subs	r2, r1, r3
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f9a9 	bl	80029b8 <RTC_ReadAlarmCounter>
 8002666:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d008      	beq.n	8002682 <HAL_RTC_GetTime+0xee>
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	429a      	cmp	r2, r3
 8002676:	d904      	bls.n	8002682 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e002      	b.n	8002688 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_RTC_GetTime+0x1ac>)
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f966 	bl	800296a <RTC_WriteTimeCounter>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e041      	b.n	800272c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ae:	d00c      	beq.n	80026ca <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026b8:	69f9      	ldr	r1, [r7, #28]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f995 	bl	80029ea <RTC_WriteAlarmCounter>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e030      	b.n	800272c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026ca:	69f9      	ldr	r1, [r7, #28]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f98c 	bl	80029ea <RTC_WriteAlarmCounter>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e027      	b.n	800272c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fa34 	bl	8002b4c <RTC_DateUpdate>
 80026e4:	e003      	b.n	80026ee <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01a      	beq.n	800272a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f9ed 	bl	8002ad8 <RTC_ByteToBcd2>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f9e4 	bl	8002ad8 <RTC_ByteToBcd2>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f9db 	bl	8002ad8 <RTC_ByteToBcd2>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	91a2b3c5 	.word	0x91a2b3c5
 8002738:	88888889 	.word	0x88888889
 800273c:	aaaaaaab 	.word	0xaaaaaaab
 8002740:	00015180 	.word	0x00015180

08002744 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_RTC_SetDate+0x24>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e097      	b.n	800289c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	7c1b      	ldrb	r3, [r3, #16]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_RTC_SetDate+0x34>
 8002774:	2302      	movs	r3, #2
 8002776:	e091      	b.n	800289c <HAL_RTC_SetDate+0x158>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	78da      	ldrb	r2, [r3, #3]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785a      	ldrb	r2, [r3, #1]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	789a      	ldrb	r2, [r3, #2]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	739a      	strb	r2, [r3, #14]
 80027a2:	e01a      	b.n	80027da <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f9b2 	bl	8002b12 <RTC_Bcd2ToByte>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9a9 	bl	8002b12 <RTC_Bcd2ToByte>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	789b      	ldrb	r3, [r3, #2]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f9a0 	bl	8002b12 <RTC_Bcd2ToByte>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	7bdb      	ldrb	r3, [r3, #15]
 80027de:	4618      	mov	r0, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	7b59      	ldrb	r1, [r3, #13]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	7b9b      	ldrb	r3, [r3, #14]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f000 fa8b 	bl	8002d04 <RTC_WeekDayNum>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	7b1a      	ldrb	r2, [r3, #12]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f883 	bl	800290a <RTC_ReadTimeCounter>
 8002804:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4a26      	ldr	r2, [pc, #152]	; (80028a4 <HAL_RTC_SetDate+0x160>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0adb      	lsrs	r3, r3, #11
 8002810:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b18      	cmp	r3, #24
 8002816:	d93a      	bls.n	800288e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_RTC_SetDate+0x164>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_RTC_SetDate+0x168>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800282e:	69f9      	ldr	r1, [r7, #28]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f89a 	bl	800296a <RTC_WriteTimeCounter>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2204      	movs	r2, #4
 8002840:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e027      	b.n	800289c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f8b3 	bl	80029b8 <RTC_ReadAlarmCounter>
 8002852:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d018      	beq.n	800288e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	d214      	bcs.n	800288e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800286a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800286e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002870:	69b9      	ldr	r1, [r7, #24]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f8b9 	bl	80029ea <RTC_WriteAlarmCounter>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2204      	movs	r2, #4
 8002882:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e006      	b.n	800289c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	91a2b3c5 	.word	0x91a2b3c5
 80028a8:	aaaaaaab 	.word	0xaaaaaaab
 80028ac:	00015180 	.word	0x00015180

080028b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01d      	b.n	8002902 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80028d6:	f7fe f897 	bl	8000a08 <HAL_GetTick>
 80028da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80028dc:	e009      	b.n	80028f2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028de:	f7fe f893 	bl	8000a08 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ec:	d901      	bls.n	80028f2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e007      	b.n	8002902 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ee      	beq.n	80028de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	827b      	strh	r3, [r7, #18]
 8002916:	2300      	movs	r3, #0
 8002918:	823b      	strh	r3, [r7, #16]
 800291a:	2300      	movs	r3, #0
 800291c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800293a:	8a7a      	ldrh	r2, [r7, #18]
 800293c:	8a3b      	ldrh	r3, [r7, #16]
 800293e:	429a      	cmp	r2, r3
 8002940:	d008      	beq.n	8002954 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002942:	8a3b      	ldrh	r3, [r7, #16]
 8002944:	041a      	lsls	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e004      	b.n	800295e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002954:	8a7b      	ldrh	r3, [r7, #18]
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f85d 	bl	8002a38 <RTC_EnterInitMode>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e011      	b.n	80029ae <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	0c12      	lsrs	r2, r2, #16
 8002992:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b292      	uxth	r2, r2
 800299c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f872 	bl	8002a88 <RTC_ExitInitMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	81fb      	strh	r3, [r7, #14]
 80029c4:	2300      	movs	r3, #0
 80029c6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f81d 	bl	8002a38 <RTC_EnterInitMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	e011      	b.n	8002a2e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	0c12      	lsrs	r2, r2, #16
 8002a12:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f832 	bl	8002a88 <RTC_ExitInitMode>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002a44:	f7fd ffe0 	bl	8000a08 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a4a:	e009      	b.n	8002a60 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a4c:	f7fd ffdc 	bl	8000a08 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5a:	d901      	bls.n	8002a60 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e00f      	b.n	8002a80 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0210 	orr.w	r2, r2, #16
 8002a7c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0210 	bic.w	r2, r2, #16
 8002aa2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002aa4:	f7fd ffb0 	bl	8000a08 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002aaa:	e009      	b.n	8002ac0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002aac:	f7fd ffac 	bl	8000a08 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aba:	d901      	bls.n	8002ac0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e007      	b.n	8002ad0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0ee      	beq.n	8002aac <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002ae6:	e005      	b.n	8002af4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	3b0a      	subs	r3, #10
 8002af2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d8f6      	bhi.n	8002ae8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b2db      	uxtb	r3, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	b2db      	uxtb	r3, r3
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7bdb      	ldrb	r3, [r3, #15]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7b5b      	ldrb	r3, [r3, #13]
 8002b70:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7b9b      	ldrb	r3, [r3, #14]
 8002b76:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	e06f      	b.n	8002c5e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d011      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d00e      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d00b      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d008      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d005      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d002      	beq.n	8002ba8 <RTC_DateUpdate+0x5c>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d117      	bne.n	8002bd8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b1e      	cmp	r3, #30
 8002bac:	d803      	bhi.n	8002bb6 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002bb4:	e050      	b.n	8002c58 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d005      	beq.n	8002bc8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002bc6:	e047      	b.n	8002c58 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
          year++;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002bd6:	e03f      	b.n	8002c58 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d008      	beq.n	8002bf0 <RTC_DateUpdate+0xa4>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d005      	beq.n	8002bf0 <RTC_DateUpdate+0xa4>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	d002      	beq.n	8002bf0 <RTC_DateUpdate+0xa4>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	2b0b      	cmp	r3, #11
 8002bee:	d10c      	bne.n	8002c0a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b1d      	cmp	r3, #29
 8002bf4:	d803      	bhi.n	8002bfe <RTC_DateUpdate+0xb2>
      {
        day++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002bfc:	e02c      	b.n	8002c58 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	3301      	adds	r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002c04:	2301      	movs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002c08:	e026      	b.n	8002c58 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b1b      	cmp	r3, #27
 8002c14:	d803      	bhi.n	8002c1e <RTC_DateUpdate+0xd2>
      {
        day++;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e01c      	b.n	8002c58 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b1c      	cmp	r3, #28
 8002c22:	d111      	bne.n	8002c48 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f839 	bl	8002ca0 <RTC_IsLeapYear>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <RTC_DateUpdate+0xf0>
        {
          day++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3301      	adds	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e00d      	b.n	8002c58 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c42:	2301      	movs	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e007      	b.n	8002c58 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b1d      	cmp	r3, #29
 8002c4c:	d104      	bne.n	8002c58 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3301      	adds	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002c54:	2301      	movs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d38b      	bcc.n	8002b7e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f000 f83b 	bl	8002d04 <RTC_WeekDayNum>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	731a      	strb	r2, [r3, #12]
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e01d      	b.n	8002cf6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <RTC_IsLeapYear+0x60>)
 8002cbe:	fba2 1203 	umull	r1, r2, r2, r3
 8002cc2:	0952      	lsrs	r2, r2, #5
 8002cc4:	2164      	movs	r1, #100	; 0x64
 8002cc6:	fb01 f202 	mul.w	r2, r1, r2
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <RTC_IsLeapYear+0x60>)
 8002cda:	fba2 1203 	umull	r1, r2, r2, r3
 8002cde:	09d2      	lsrs	r2, r2, #7
 8002ce0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002ce4:	fb01 f202 	mul.w	r2, r1, r2
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002cf4:	2300      	movs	r3, #0
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
 8002d10:	4613      	mov	r3, r2
 8002d12:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002d22:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d82d      	bhi.n	8002d86 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <RTC_WeekDayNum+0xe4>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	085a      	lsrs	r2, r3, #1
 8002d3e:	78bb      	ldrb	r3, [r7, #2]
 8002d40:	441a      	add	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	441a      	add	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	4926      	ldr	r1, [pc, #152]	; (8002dec <RTC_WeekDayNum+0xe8>)
 8002d54:	fba1 1303 	umull	r1, r3, r1, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	1ad2      	subs	r2, r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	4922      	ldr	r1, [pc, #136]	; (8002dec <RTC_WeekDayNum+0xe8>)
 8002d62:	fba1 1303 	umull	r1, r3, r1, r3
 8002d66:	09db      	lsrs	r3, r3, #7
 8002d68:	4413      	add	r3, r2
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <RTC_WeekDayNum+0xec>)
 8002d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d72:	1ad1      	subs	r1, r2, r3
 8002d74:	0849      	lsrs	r1, r1, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	0899      	lsrs	r1, r3, #2
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e029      	b.n	8002dda <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <RTC_WeekDayNum+0xe4>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	085a      	lsrs	r2, r3, #1
 8002d9a:	78bb      	ldrb	r3, [r7, #2]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	441a      	add	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	441a      	add	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4910      	ldr	r1, [pc, #64]	; (8002dec <RTC_WeekDayNum+0xe8>)
 8002dac:	fba1 1303 	umull	r1, r3, r1, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <RTC_WeekDayNum+0xe8>)
 8002db8:	fba1 1303 	umull	r1, r3, r1, r3
 8002dbc:	09db      	lsrs	r3, r3, #7
 8002dbe:	4413      	add	r3, r2
 8002dc0:	1c9a      	adds	r2, r3, #2
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <RTC_WeekDayNum+0xec>)
 8002dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc8:	1ad1      	subs	r1, r2, r3
 8002dca:	0849      	lsrs	r1, r1, #1
 8002dcc:	440b      	add	r3, r1
 8002dce:	0899      	lsrs	r1, r3, #2
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a5b      	subs	r3, r3, r1
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	b2db      	uxtb	r3, r3
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	38e38e39 	.word	0x38e38e39
 8002dec:	51eb851f 	.word	0x51eb851f
 8002df0:	24924925 	.word	0x24924925

08002df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fc7a 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f000 fa08 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e041      	b.n	8002f28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f839 	bl	8002f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f000 f9b9 	bl	8003248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0ac      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	f200 809f 	bhi.w	80030ac <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	080030ad 	.word	0x080030ad
 8002f7c:	080030ad 	.word	0x080030ad
 8002f80:	080030ad 	.word	0x080030ad
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	080030ad 	.word	0x080030ad
 8002f8c:	080030ad 	.word	0x080030ad
 8002f90:	080030ad 	.word	0x080030ad
 8002f94:	0800302b 	.word	0x0800302b
 8002f98:	080030ad 	.word	0x080030ad
 8002f9c:	080030ad 	.word	0x080030ad
 8002fa0:	080030ad 	.word	0x080030ad
 8002fa4:	0800306b 	.word	0x0800306b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9ac 	bl	800330c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
      break;
 8002fe6:	e062      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f9f2 	bl	80033d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
      break;
 8003028:	e041      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fa3b 	bl	80034ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0208 	orr.w	r2, r2, #8
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e021      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fa85 	bl	8003580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	61da      	str	r2, [r3, #28]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_ConfigClockSource+0x18>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0b3      	b.n	8003240 <HAL_TIM_ConfigClockSource+0x180>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003110:	d03e      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0xd0>
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	f200 8087 	bhi.w	8003228 <HAL_TIM_ConfigClockSource+0x168>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	f000 8085 	beq.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003126:	d87f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d01a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0xa2>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d87b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003130:	2b60      	cmp	r3, #96	; 0x60
 8003132:	d050      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x116>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d877      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003138:	2b50      	cmp	r3, #80	; 0x50
 800313a:	d03c      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xf6>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d873      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d058      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x136>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d86f      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d064      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d86b      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d060      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d867      	bhi.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
 800315c:	2b10      	cmp	r3, #16
 800315e:	d05a      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003160:	e062      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f000 faca 	bl	800370a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003184:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
      break;
 800318e:	e04e      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f000 fab3 	bl	800370a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b2:	609a      	str	r2, [r3, #8]
      break;
 80031b4:	e03b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa2a 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2150      	movs	r1, #80	; 0x50
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa81 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80031d4:	e02b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fa48 	bl	8003678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2160      	movs	r1, #96	; 0x60
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fa71 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e01b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fa0a 	bl	800361c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa61 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003214:	e00b      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f000 fa58 	bl	80036d6 <TIM_ITRx_SetConfig>
        break;
 8003226:	e002      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003228:	bf00      	nop
 800322a:	e000      	b.n	800322e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800322c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <TIM_Base_SetConfig+0xb8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a26      	ldr	r2, [pc, #152]	; (8003304 <TIM_Base_SetConfig+0xbc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a25      	ldr	r2, [pc, #148]	; (8003308 <TIM_Base_SetConfig+0xc0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <TIM_Base_SetConfig+0xb8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <TIM_Base_SetConfig+0xbc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <TIM_Base_SetConfig+0xc0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <TIM_Base_SetConfig+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	615a      	str	r2, [r3, #20]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800

0800330c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10c      	bne.n	8003382 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0308 	bic.w	r3, r3, #8
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00

080033d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	f023 0210 	bic.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <TIM_OC2_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10d      	bne.n	8003454 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <TIM_OC2_SetConfig+0xd0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d113      	bne.n	8003484 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00

080034ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <TIM_OC3_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <TIM_OC3_SetConfig+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d113      	bne.n	8003556 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800353c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	621a      	str	r2, [r3, #32]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00

08003580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	031b      	lsls	r3, r3, #12
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <TIM_OC4_SetConfig+0x98>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d109      	bne.n	80035f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	019b      	lsls	r3, r3, #6
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	40012c00 	.word	0x40012c00

0800361c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 030a 	bic.w	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f023 0210 	bic.w	r2, r3, #16
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e046      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e03f      	b.n	8003896 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fc ffbe 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003846:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f905 	bl	8003a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800385c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800386c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800387c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	; 0x28
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d17c      	bne.n	80039b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_UART_Transmit+0x2c>
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e075      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Transmit+0x3e>
 80038d8:	2302      	movs	r3, #2
 80038da:	e06e      	b.n	80039ba <HAL_UART_Transmit+0x11c>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2221      	movs	r2, #33	; 0x21
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f2:	f7fd f889 	bl	8000a08 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d108      	bne.n	8003920 <HAL_UART_Transmit+0x82>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	e003      	b.n	8003928 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003930:	e02a      	b.n	8003988 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f840 	bl	80039c2 <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e036      	b.n	80039ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003960:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3302      	adds	r3, #2
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	e007      	b.n	800397a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3301      	adds	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1cf      	bne.n	8003932 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f810 	bl	80039c2 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d2:	e02c      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d028      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80039e2:	f7fd f811 	bl	8000a08 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d21d      	bcs.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d0c3      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a92:	f023 030c 	bic.w	r3, r3, #12
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <UART_SetConfig+0x114>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f7fe fa8e 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	e002      	b.n	8003ace <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe fa76 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003acc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <UART_SetConfig+0x118>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	0119      	lsls	r1, r3, #4
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <UART_SetConfig+0x118>)
 8003b06:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	4419      	add	r1, r3
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <UART_SetConfig+0x118>)
 8003b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2064      	movs	r0, #100	; 0x64
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <UART_SetConfig+0x118>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	440a      	add	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	51eb851f 	.word	0x51eb851f

08003b74 <u8x8_byte_stm32f1xx_hw_i2c>:
 */

#include "oled.h"

uint8_t u8x8_byte_stm32f1xx_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	72fb      	strb	r3, [r7, #11]
 8003b82:	4613      	mov	r3, r2
 8003b84:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[128];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	3b14      	subs	r3, #20
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d848      	bhi.n	8003c20 <u8x8_byte_stm32f1xx_hw_i2c+0xac>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <u8x8_byte_stm32f1xx_hw_i2c+0x20>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003c25 	.word	0x08003c25
 8003b98:	08003c21 	.word	0x08003c21
 8003b9c:	08003c21 	.word	0x08003c21
 8003ba0:	08003bd1 	.word	0x08003bd1
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003c01 	.word	0x08003c01
 8003bac:	08003c21 	.word	0x08003c21
 8003bb0:	08003c21 	.word	0x08003c21
 8003bb4:	08003c21 	.word	0x08003c21
 8003bb8:	08003c21 	.word	0x08003c21
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003c21 	.word	0x08003c21
 8003bc4:	08003c25 	.word	0x08003c25
    }
    break;

    case U8X8_MSG_BYTE_START_TRANSFER:
    {
        buf_idx = 0;
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
    }
    break;
 8003bce:	e02c      	b.n	8003c2a <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	617b      	str	r3, [r7, #20]

        while (arg_int > 0)
 8003bd4:	e010      	b.n	8003bf8 <u8x8_byte_stm32f1xx_hw_i2c+0x84>
        {
            buffer[buf_idx++] = *data;
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	b2d1      	uxtb	r1, r2
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003be0:	7011      	strb	r1, [r2, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	7819      	ldrb	r1, [r3, #0]
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 8003bea:	5499      	strb	r1, [r3, r2]
            data++;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
            arg_int--;
 8003bf2:	7abb      	ldrb	r3, [r7, #10]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 8003bf8:	7abb      	ldrb	r3, [r7, #10]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1eb      	bne.n	8003bd6 <u8x8_byte_stm32f1xx_hw_i2c+0x62>
        }
    }
    break;
 8003bfe:	e014      	b.n	8003c2a <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_END_TRANSFER:
    {
        if (HAL_I2C_Master_Transmit(&hi2c1, (OLED_ADDRESS), buffer, buf_idx, 1000) != HAL_OK)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0a:	9200      	str	r2, [sp, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 8003c0e:	2178      	movs	r1, #120	; 0x78
 8003c10:	480a      	ldr	r0, [pc, #40]	; (8003c3c <u8x8_byte_stm32f1xx_hw_i2c+0xc8>)
 8003c12:	f7fd faeb 	bl	80011ec <HAL_I2C_Master_Transmit>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <u8x8_byte_stm32f1xx_hw_i2c+0xb4>
            return 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e005      	b.n	8003c2c <u8x8_byte_stm32f1xx_hw_i2c+0xb8>

    case U8X8_MSG_BYTE_SET_DC:
        break;

    default:
        return 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e003      	b.n	8003c2c <u8x8_byte_stm32f1xx_hw_i2c+0xb8>
    	break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <u8x8_byte_stm32f1xx_hw_i2c+0xb6>
    break;
 8003c28:	bf00      	nop
    }

    return 1;
 8003c2a:	2301      	movs	r3, #1
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000090 	.word	0x20000090
 8003c38:	20000094 	.word	0x20000094
 8003c3c:	20000534 	.word	0x20000534

08003c40 <delay_us>:


void delay_us(uint32_t time)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    uint32_t i = 72 * time;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
    //           ^
    // The 72 here should be the same as the clock speed (in MHz).
    while (i--)
 8003c54:	bf00      	nop
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	60fa      	str	r2, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1fa      	bne.n	8003c56 <delay_us+0x16>
        ;
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <u8x8_gpio_and_delay>:
 * This is the u8g2 GPIO and delay configuration function.
 *
 */

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	72fb      	strb	r3, [r7, #11]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	3b29      	subs	r3, #41	; 0x29
 8003c82:	2b2a      	cmp	r3, #42	; 0x2a
 8003c84:	f200 8084 	bhi.w	8003d90 <u8x8_gpio_and_delay+0x124>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <u8x8_gpio_and_delay+0x24>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003d59 	.word	0x08003d59
 8003c94:	08003d41 	.word	0x08003d41
 8003c98:	08003d3d 	.word	0x08003d3d
 8003c9c:	08003d91 	.word	0x08003d91
 8003ca0:	08003d61 	.word	0x08003d61
 8003ca4:	08003d91 	.word	0x08003d91
 8003ca8:	08003d91 	.word	0x08003d91
 8003cac:	08003d91 	.word	0x08003d91
 8003cb0:	08003d91 	.word	0x08003d91
 8003cb4:	08003d91 	.word	0x08003d91
 8003cb8:	08003d91 	.word	0x08003d91
 8003cbc:	08003d91 	.word	0x08003d91
 8003cc0:	08003d91 	.word	0x08003d91
 8003cc4:	08003d91 	.word	0x08003d91
 8003cc8:	08003d91 	.word	0x08003d91
 8003ccc:	08003d91 	.word	0x08003d91
 8003cd0:	08003d91 	.word	0x08003d91
 8003cd4:	08003d91 	.word	0x08003d91
 8003cd8:	08003d91 	.word	0x08003d91
 8003cdc:	08003d91 	.word	0x08003d91
 8003ce0:	08003d91 	.word	0x08003d91
 8003ce4:	08003d91 	.word	0x08003d91
 8003ce8:	08003d91 	.word	0x08003d91
 8003cec:	08003d91 	.word	0x08003d91
 8003cf0:	08003d91 	.word	0x08003d91
 8003cf4:	08003d91 	.word	0x08003d91
 8003cf8:	08003d91 	.word	0x08003d91
 8003cfc:	08003d91 	.word	0x08003d91
 8003d00:	08003d91 	.word	0x08003d91
 8003d04:	08003d91 	.word	0x08003d91
 8003d08:	08003d91 	.word	0x08003d91
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003d91 	.word	0x08003d91
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d9b 	.word	0x08003d9b
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d69 	.word	0x08003d69
 8003d30:	08003d73 	.word	0x08003d73
 8003d34:	08003d7d 	.word	0x08003d7d
 8003d38:	08003d87 	.word	0x08003d87
    {
    case U8X8_MSG_DELAY_100NANO: // delay arg_int * 100 nano seconds
        __NOP();
 8003d3c:	bf00      	nop
        break;
 8003d3e:	e02d      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
        for (uint16_t n = 0; n < 320; n++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	82fb      	strh	r3, [r7, #22]
 8003d44:	e003      	b.n	8003d4e <u8x8_gpio_and_delay+0xe2>
        {
            __NOP();
 8003d46:	bf00      	nop
        for (uint16_t n = 0; n < 320; n++)
 8003d48:	8afb      	ldrh	r3, [r7, #22]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	82fb      	strh	r3, [r7, #22]
 8003d4e:	8afb      	ldrh	r3, [r7, #22]
 8003d50:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d54:	d3f7      	bcc.n	8003d46 <u8x8_gpio_and_delay+0xda>
        }
        break;
 8003d56:	e021      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_MILLI: // delay arg_int * 1 milli second
        HAL_Delay(1);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fc fe5f 	bl	8000a1c <HAL_Delay>
        break;
 8003d5e:	e01d      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_I2C: // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        delay_us(5);
 8003d60:	2005      	movs	r0, #5
 8003d62:	f7ff ff6d 	bl	8003c40 <delay_us>
        break;                    // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 8003d66:	e019      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_I2C_CLOCK: // arg_int=0: Output low at I2C clock pin
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:  // arg_int=0: Output low at I2C data pin
        break;                    // arg_int=1: Input dir with pullup high for I2C data pin
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003d70:	e014      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003d7a:	e00f      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003d84:	e00a      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003d8e:	e005      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003d98:	e000      	b.n	8003d9c <u8x8_gpio_and_delay+0x130>
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
 8003d9a:	bf00      	nop
    }
    return 1;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop

08003da8 <u8g2Init>:

void u8g2Init(u8g2_t *u8g2)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_stm32f1xx_hw_i2c, u8x8_gpio_and_delay);
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <u8g2Init+0x30>)
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <u8g2Init+0x34>)
 8003db4:	490a      	ldr	r1, [pc, #40]	; (8003de0 <u8g2Init+0x38>)
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8ca 	bl	8003f50 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8g2_InitDisplay(u8g2);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 fcf0 	bl	80057a2 <u8x8_InitDisplay>
    u8g2_SetPowerSave(u8g2, 0);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 fcfb 	bl	80057c0 <u8x8_SetPowerSave>
    u8g2_ClearBuffer(u8g2);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f82e 	bl	8003e2c <u8g2_ClearBuffer>
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	08003c6d 	.word	0x08003c6d
 8003ddc:	08003b75 	.word	0x08003b75
 8003de0:	0800710c 	.word	0x0800710c

08003de4 <getTime>:
#include "rtc.h"

char* getTime(RTC_HandleTypeDef rtc)
{
 8003de4:	b084      	sub	sp, #16
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	f107 0c18 	add.w	ip, r7, #24
 8003df0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&rtc, &time, RTC_FORMAT_BIN);
 8003df4:	f107 030c 	add.w	r3, r7, #12
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f107 0018 	add.w	r0, r7, #24
 8003e00:	f7fe fbc8 	bl	8002594 <HAL_RTC_GetTime>
	char timestr[6];
	snprintf(timestr, sizeof(timestr), "%02u:%02u", time.Hours, time.Minutes);
 8003e04:	7b3b      	ldrb	r3, [r7, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	7b7b      	ldrb	r3, [r7, #13]
 8003e0a:	1d38      	adds	r0, r7, #4
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <getTime+0x44>)
 8003e12:	2106      	movs	r1, #6
 8003e14:	f001 fd94 	bl	8005940 <sniprintf>
	return timestr;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e24:	b004      	add	sp, #16
 8003e26:	4770      	bx	lr
 8003e28:	08006224 	.word	0x08006224

08003e2c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	7c1b      	ldrb	r3, [r3, #16]
 8003e3a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 fd68 	bl	8005930 <memset>
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	7c1b      	ldrb	r3, [r3, #16]
 8003e7e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	89ba      	ldrh	r2, [r7, #12]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003e96:	89bb      	ldrh	r3, [r7, #12]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003e9c:	89bb      	ldrh	r3, [r7, #12]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003ea4:	7bf9      	ldrb	r1, [r7, #15]
 8003ea6:	78ba      	ldrb	r2, [r7, #2]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fc45 	bl	8005740 <u8x8_DrawTile>
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ed0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	7c5b      	ldrb	r3, [r3, #17]
 8003ee0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003ee2:	7bba      	ldrb	r2, [r7, #14]
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ffbd 	bl	8003e68 <u8g2_send_tile_row>
    src_row++;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	7b7b      	ldrb	r3, [r7, #13]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d203      	bcs.n	8003f0a <u8g2_send_buffer+0x4c>
 8003f02:	7bba      	ldrb	r2, [r7, #14]
 8003f04:	7b3b      	ldrb	r3, [r7, #12]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3eb      	bcc.n	8003ee2 <u8g2_send_buffer+0x24>
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffcf 	bl	8003ebe <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 fc5e 	bl	80057e2 <u8x8_RefreshDisplay>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	701a      	strb	r2, [r3, #0]
  return buf;
 8003f3e:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000114 	.word	0x20000114

08003f50 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8003f66:	490c      	ldr	r1, [pc, #48]	; (8003f98 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f001 fc99 	bl	80058a0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003f6e:	f107 0313 	add.w	r3, r7, #19
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffdc 	bl	8003f30 <u8g2_m_16_8_f>
 8003f78:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003f7a:	7cfa      	ldrb	r2, [r7, #19]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 ffbc 	bl	8004f02 <u8g2_SetupBuffer>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	080053e1 	.word	0x080053e1
 8003f98:	0800563d 	.word	0x0800563d
 8003f9c:	08004d87 	.word	0x08004d87

08003fa0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	81fb      	strh	r3, [r7, #14]
    font++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800400a:	2100      	movs	r1, #0
 800400c:	6838      	ldr	r0, [r7, #0]
 800400e:	f7ff ffc7 	bl	8003fa0 <u8g2_font_get_byte>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800401a:	2101      	movs	r1, #1
 800401c:	6838      	ldr	r0, [r7, #0]
 800401e:	f7ff ffbf 	bl	8003fa0 <u8g2_font_get_byte>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800402a:	2102      	movs	r1, #2
 800402c:	6838      	ldr	r0, [r7, #0]
 800402e:	f7ff ffb7 	bl	8003fa0 <u8g2_font_get_byte>
 8004032:	4603      	mov	r3, r0
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800403a:	2103      	movs	r1, #3
 800403c:	6838      	ldr	r0, [r7, #0]
 800403e:	f7ff ffaf 	bl	8003fa0 <u8g2_font_get_byte>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800404a:	2104      	movs	r1, #4
 800404c:	6838      	ldr	r0, [r7, #0]
 800404e:	f7ff ffa7 	bl	8003fa0 <u8g2_font_get_byte>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800405a:	2105      	movs	r1, #5
 800405c:	6838      	ldr	r0, [r7, #0]
 800405e:	f7ff ff9f 	bl	8003fa0 <u8g2_font_get_byte>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800406a:	2106      	movs	r1, #6
 800406c:	6838      	ldr	r0, [r7, #0]
 800406e:	f7ff ff97 	bl	8003fa0 <u8g2_font_get_byte>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800407a:	2107      	movs	r1, #7
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f7ff ff8f 	bl	8003fa0 <u8g2_font_get_byte>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800408a:	2108      	movs	r1, #8
 800408c:	6838      	ldr	r0, [r7, #0]
 800408e:	f7ff ff87 	bl	8003fa0 <u8g2_font_get_byte>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800409a:	2109      	movs	r1, #9
 800409c:	6838      	ldr	r0, [r7, #0]
 800409e:	f7ff ff7f 	bl	8003fa0 <u8g2_font_get_byte>
 80040a2:	4603      	mov	r3, r0
 80040a4:	b25a      	sxtb	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80040aa:	210a      	movs	r1, #10
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f7ff ff77 	bl	8003fa0 <u8g2_font_get_byte>
 80040b2:	4603      	mov	r3, r0
 80040b4:	b25a      	sxtb	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80040ba:	210b      	movs	r1, #11
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f7ff ff6f 	bl	8003fa0 <u8g2_font_get_byte>
 80040c2:	4603      	mov	r3, r0
 80040c4:	b25a      	sxtb	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80040ca:	210c      	movs	r1, #12
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f7ff ff67 	bl	8003fa0 <u8g2_font_get_byte>
 80040d2:	4603      	mov	r3, r0
 80040d4:	b25a      	sxtb	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80040da:	210d      	movs	r1, #13
 80040dc:	6838      	ldr	r0, [r7, #0]
 80040de:	f7ff ff5f 	bl	8003fa0 <u8g2_font_get_byte>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b25a      	sxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80040ea:	210e      	movs	r1, #14
 80040ec:	6838      	ldr	r0, [r7, #0]
 80040ee:	f7ff ff57 	bl	8003fa0 <u8g2_font_get_byte>
 80040f2:	4603      	mov	r3, r0
 80040f4:	b25a      	sxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80040fa:	210f      	movs	r1, #15
 80040fc:	6838      	ldr	r0, [r7, #0]
 80040fe:	f7ff ff4f 	bl	8003fa0 <u8g2_font_get_byte>
 8004102:	4603      	mov	r3, r0
 8004104:	b25a      	sxtb	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800410a:	2110      	movs	r1, #16
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f7ff ff47 	bl	8003fa0 <u8g2_font_get_byte>
 8004112:	4603      	mov	r3, r0
 8004114:	b25a      	sxtb	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800411a:	2111      	movs	r1, #17
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f7ff ff50 	bl	8003fc2 <u8g2_font_get_word>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800412a:	2113      	movs	r1, #19
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f7ff ff48 	bl	8003fc2 <u8g2_font_get_word>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800413a:	2115      	movs	r1, #21
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f7ff ff40 	bl	8003fc2 <u8g2_font_get_word>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	82da      	strh	r2, [r3, #22]
#endif
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7b1b      	ldrb	r3, [r3, #12]
 8004162:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	7b7b      	ldrb	r3, [r7, #13]
 8004170:	fa42 f303 	asr.w	r3, r2, r3
 8004174:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800417a:	7bba      	ldrb	r2, [r7, #14]
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	4413      	add	r3, r2
 8004180:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004182:	7bbb      	ldrb	r3, [r7, #14]
 8004184:	2b07      	cmp	r3, #7
 8004186:	d91a      	bls.n	80041be <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004188:	2308      	movs	r3, #8
 800418a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800418c:	7b3a      	ldrb	r2, [r7, #12]
 800418e:	7b7b      	ldrb	r3, [r7, #13]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	7b3b      	ldrb	r3, [r7, #12]
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	b25a      	sxtb	r2, r3
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80041b8:	7bbb      	ldrb	r3, [r7, #14]
 80041ba:	3b08      	subs	r3, #8
 80041bc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f04f 32ff 	mov.w	r2, #4294967295
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	4013      	ands	r3, r2
 80041d2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	7bba      	ldrb	r2, [r7, #14]
 80041d8:	731a      	strb	r2, [r3, #12]
  return val;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ffab 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004200:	2301      	movs	r3, #1
 8004202:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	3b01      	subs	r3, #1
 8004208:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800420a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	73fb      	strb	r3, [r7, #15]
  return v;
 8004220:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800422c:	b490      	push	{r4, r7}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	4604      	mov	r4, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	80fb      	strh	r3, [r7, #6]
 800423e:	4603      	mov	r3, r0
 8004240:	717b      	strb	r3, [r7, #5]
 8004242:	460b      	mov	r3, r1
 8004244:	713b      	strb	r3, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d014      	beq.n	800427a <u8g2_add_vector_y+0x4e>
 8004250:	2b02      	cmp	r3, #2
 8004252:	dc19      	bgt.n	8004288 <u8g2_add_vector_y+0x5c>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <u8g2_add_vector_y+0x32>
 8004258:	2b01      	cmp	r3, #1
 800425a:	d007      	beq.n	800426c <u8g2_add_vector_y+0x40>
 800425c:	e014      	b.n	8004288 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800425e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004262:	b29a      	uxth	r2, r3
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	4413      	add	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
      break;
 800426a:	e014      	b.n	8004296 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800426c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004270:	b29a      	uxth	r2, r3
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4413      	add	r3, r2
 8004276:	80fb      	strh	r3, [r7, #6]
      break;
 8004278:	e00d      	b.n	8004296 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800427a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800427e:	b29b      	uxth	r3, r3
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	80fb      	strh	r3, [r7, #6]
      break;
 8004286:	e006      	b.n	8004296 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004288:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800428c:	b29b      	uxth	r3, r3
 800428e:	88fa      	ldrh	r2, [r7, #6]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	80fb      	strh	r3, [r7, #6]
      break;      
 8004294:	bf00      	nop
  }
  return dy;
 8004296:	88fb      	ldrh	r3, [r7, #6]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bc90      	pop	{r4, r7}
 80042a0:	4770      	bx	lr

080042a2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80042a2:	b490      	push	{r4, r7}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4604      	mov	r4, r0
 80042aa:	4608      	mov	r0, r1
 80042ac:	4611      	mov	r1, r2
 80042ae:	461a      	mov	r2, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	80fb      	strh	r3, [r7, #6]
 80042b4:	4603      	mov	r3, r0
 80042b6:	717b      	strb	r3, [r7, #5]
 80042b8:	460b      	mov	r3, r1
 80042ba:	713b      	strb	r3, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d014      	beq.n	80042f0 <u8g2_add_vector_x+0x4e>
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	dc19      	bgt.n	80042fe <u8g2_add_vector_x+0x5c>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <u8g2_add_vector_x+0x32>
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d007      	beq.n	80042e2 <u8g2_add_vector_x+0x40>
 80042d2:	e014      	b.n	80042fe <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80042d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	4413      	add	r3, r2
 80042de:	80fb      	strh	r3, [r7, #6]
      break;
 80042e0:	e014      	b.n	800430c <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80042e2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	88fa      	ldrh	r2, [r7, #6]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	80fb      	strh	r3, [r7, #6]
      break;
 80042ee:	e00d      	b.n	800430c <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80042f0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	80fb      	strh	r3, [r7, #6]
      break;
 80042fc:	e006      	b.n	800430c <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80042fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004302:	b29a      	uxth	r2, r3
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	4413      	add	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
      break;      
 800430a:	bf00      	nop
  }
  return dx;
 800430c:	88fb      	ldrh	r3, [r7, #6]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bc90      	pop	{r4, r7}
 8004316:	4770      	bx	lr

08004318 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af02      	add	r7, sp, #8
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3360      	adds	r3, #96	; 0x60
 800432c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004338:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004340:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004348:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	7d7b      	ldrb	r3, [r7, #21]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004356:	7dfa      	ldrb	r2, [r7, #23]
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	429a      	cmp	r2, r3
 800435c:	d201      	bcs.n	8004362 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	889b      	ldrh	r3, [r3, #4]
 8004366:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	88db      	ldrh	r3, [r3, #6]
 800436c:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800436e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004372:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	7c1b      	ldrb	r3, [r3, #16]
 800437a:	89b8      	ldrh	r0, [r7, #12]
 800437c:	f7ff ff91 	bl	80042a2 <u8g2_add_vector_x>
 8004380:	4603      	mov	r3, r0
 8004382:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004384:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004388:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	7c1b      	ldrb	r3, [r3, #16]
 8004390:	8978      	ldrh	r0, [r7, #10]
 8004392:	f7ff ff4b 	bl	800422c <u8g2_add_vector_y>
 8004396:	4603      	mov	r3, r0
 8004398:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800439a:	78bb      	ldrb	r3, [r7, #2]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	7b9a      	ldrb	r2, [r3, #14]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80043aa:	7dbb      	ldrb	r3, [r7, #22]
 80043ac:	b298      	uxth	r0, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	7c1b      	ldrb	r3, [r3, #16]
 80043b2:	897a      	ldrh	r2, [r7, #10]
 80043b4:	89b9      	ldrh	r1, [r7, #12]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	4603      	mov	r3, r0
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fbfa 	bl	8004bb4 <u8g2_DrawHVLine>
 80043c0:	e013      	b.n	80043ea <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	7b5b      	ldrb	r3, [r3, #13]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10f      	bne.n	80043ea <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	7bda      	ldrb	r2, [r3, #15]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80043d4:	7dbb      	ldrb	r3, [r7, #22]
 80043d6:	b298      	uxth	r0, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	7c1b      	ldrb	r3, [r3, #16]
 80043dc:	897a      	ldrh	r2, [r7, #10]
 80043de:	89b9      	ldrh	r1, [r7, #12]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4603      	mov	r3, r0
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fbe5 	bl	8004bb4 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80043ea:	7dfa      	ldrb	r2, [r7, #23]
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d309      	bcc.n	8004406 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80043f2:	7dfa      	ldrb	r2, [r7, #23]
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	757b      	strb	r3, [r7, #21]
    ly++;
 80043fe:	7d3b      	ldrb	r3, [r7, #20]
 8004400:	3301      	adds	r3, #1
 8004402:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004404:	e79d      	b.n	8004342 <u8g2_font_decode_len+0x2a>
      break;
 8004406:	bf00      	nop
  }
  lx += cnt;
 8004408:	7d7a      	ldrb	r2, [r7, #21]
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	4413      	add	r3, r2
 800440e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004410:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8004418:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	725a      	strb	r2, [r3, #9]
  
}
 8004420:	bf00      	nop
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800444a:	4619      	mov	r1, r3
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fe80 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 8004452:	4603      	mov	r3, r0
 8004454:	b25a      	sxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004460:	4619      	mov	r1, r3
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fe75 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 8004468:	4603      	mov	r3, r0
 800446a:	b25a      	sxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	7b9b      	ldrb	r3, [r3, #14]
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	73da      	strb	r2, [r3, #15]
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3360      	adds	r3, #96	; 0x60
 80044a6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff ffbc 	bl	8004428 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80044b6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80044be:	4619      	mov	r1, r3
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff fe90 	bl	80041e6 <u8g2_font_decode_get_signed_bits>
 80044c6:	4603      	mov	r3, r0
 80044c8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80044d0:	4619      	mov	r1, r3
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff fe87 	bl	80041e6 <u8g2_font_decode_get_signed_bits>
 80044d8:	4603      	mov	r3, r0
 80044da:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044e2:	4619      	mov	r1, r3
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f7ff fe7e 	bl	80041e6 <u8g2_font_decode_get_signed_bits>
 80044ea:	4603      	mov	r3, r0
 80044ec:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f340 80d7 	ble.w	80046a8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	8898      	ldrh	r0, [r3, #4]
 80044fe:	7cfa      	ldrb	r2, [r7, #19]
 8004500:	7c7b      	ldrb	r3, [r7, #17]
 8004502:	4413      	add	r3, r2
 8004504:	b2db      	uxtb	r3, r3
 8004506:	425b      	negs	r3, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	b25a      	sxtb	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	7c1b      	ldrb	r3, [r3, #16]
 8004510:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004514:	f7ff fec5 	bl	80042a2 <u8g2_add_vector_x>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	88d8      	ldrh	r0, [r3, #6]
 8004524:	7cfa      	ldrb	r2, [r7, #19]
 8004526:	7c7b      	ldrb	r3, [r7, #17]
 8004528:	4413      	add	r3, r2
 800452a:	b2db      	uxtb	r3, r3
 800452c:	425b      	negs	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	b25a      	sxtb	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	7c1b      	ldrb	r3, [r3, #16]
 8004536:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800453a:	f7ff fe77 	bl	800422c <u8g2_add_vector_y>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	889b      	ldrh	r3, [r3, #4]
 800454a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	88db      	ldrh	r3, [r3, #6]
 8004550:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8004552:	8bfb      	ldrh	r3, [r7, #30]
 8004554:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8004556:	8b7b      	ldrh	r3, [r7, #26]
 8004558:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	7c1b      	ldrb	r3, [r3, #16]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d85a      	bhi.n	8004618 <u8g2_font_decode_glyph+0x180>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <u8g2_font_decode_glyph+0xd0>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	08004579 	.word	0x08004579
 800456c:	08004595 	.word	0x08004595
 8004570:	080045bd 	.word	0x080045bd
 8004574:	080045f1 	.word	0x080045f1
      {
	case 0:
	    x1 += decode->glyph_width;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800457e:	b29a      	uxth	r2, r3
 8004580:	8bbb      	ldrh	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8004586:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800458a:	b29a      	uxth	r2, r3
 800458c:	8b3b      	ldrh	r3, [r7, #24]
 800458e:	4413      	add	r3, r2
 8004590:	833b      	strh	r3, [r7, #24]
	    break;
 8004592:	e041      	b.n	8004618 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004598:	b29b      	uxth	r3, r3
 800459a:	8bfa      	ldrh	r2, [r7, #30]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045a0:	8bfb      	ldrh	r3, [r7, #30]
 80045a2:	3301      	adds	r3, #1
 80045a4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80045a6:	8bbb      	ldrh	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	8b3b      	ldrh	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	833b      	strh	r3, [r7, #24]
	    break;
 80045ba:	e02d      	b.n	8004618 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8bfa      	ldrh	r2, [r7, #30]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045ca:	8bfb      	ldrh	r3, [r7, #30]
 80045cc:	3301      	adds	r3, #1
 80045ce:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80045d0:	8bbb      	ldrh	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80045d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8b7a      	ldrh	r2, [r7, #26]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	3301      	adds	r3, #1
 80045e6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80045e8:	8b3b      	ldrh	r3, [r7, #24]
 80045ea:	3301      	adds	r3, #1
 80045ec:	833b      	strh	r3, [r7, #24]
	    break;	  
 80045ee:	e013      	b.n	8004618 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80045f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	8bbb      	ldrh	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004602:	b29b      	uxth	r3, r3
 8004604:	8b7a      	ldrh	r2, [r7, #26]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800460a:	8b7b      	ldrh	r3, [r7, #26]
 800460c:	3301      	adds	r3, #1
 800460e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004610:	8b3b      	ldrh	r3, [r7, #24]
 8004612:	3301      	adds	r3, #1
 8004614:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004616:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004618:	8bb8      	ldrh	r0, [r7, #28]
 800461a:	8b7a      	ldrh	r2, [r7, #26]
 800461c:	8bf9      	ldrh	r1, [r7, #30]
 800461e:	8b3b      	ldrh	r3, [r7, #24]
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4603      	mov	r3, r0
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb83 	bl	8004d30 <u8g2_IsIntersection>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <u8g2_font_decode_glyph+0x19e>
	return d;
 8004630:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8004634:	e03a      	b.n	80046ac <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004648:	4619      	mov	r1, r3
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f7ff fd81 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800465a:	4619      	mov	r1, r3
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f7ff fd78 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 8004662:	4603      	mov	r3, r0
 8004664:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2200      	movs	r2, #0
 800466a:	4619      	mov	r1, r3
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fe53 	bl	8004318 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	2201      	movs	r2, #1
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fe4d 	bl	8004318 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800467e:	2101      	movs	r1, #1
 8004680:	6978      	ldr	r0, [r7, #20]
 8004682:	f7ff fd66 	bl	8004152 <u8g2_font_decode_get_unsigned_bits>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ec      	bne.n	8004666 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004692:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8004696:	429a      	cmp	r2, r3
 8004698:	dd00      	ble.n	800469c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800469a:	e7d2      	b.n	8004642 <u8g2_font_decode_glyph+0x1aa>
	break;
 800469c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	7b9a      	ldrb	r2, [r3, #14]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80046a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3317      	adds	r3, #23
 80046ca:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	2bff      	cmp	r3, #255	; 0xff
 80046d0:	d82a      	bhi.n	8004728 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80046d2:	887b      	ldrh	r3, [r7, #2]
 80046d4:	2b60      	cmp	r3, #96	; 0x60
 80046d6:	d907      	bls.n	80046e8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80046de:	461a      	mov	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e009      	b.n	80046fc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80046e8:	887b      	ldrh	r3, [r7, #2]
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d906      	bls.n	80046fc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80046f4:	461a      	mov	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	3301      	adds	r3, #1
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04e      	beq.n	80047a4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	887a      	ldrh	r2, [r7, #2]
 800470e:	429a      	cmp	r2, r3
 8004710:	d102      	bne.n	8004718 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3302      	adds	r3, #2
 8004716:	e049      	b.n	80047ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3301      	adds	r3, #1
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4413      	add	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004726:	e7e9      	b.n	80046fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800472e:	461a      	mov	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	4413      	add	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800473a:	2100      	movs	r1, #0
 800473c:	6938      	ldr	r0, [r7, #16]
 800473e:	f7ff fc40 	bl	8003fc2 <u8g2_font_get_word>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800474c:	2102      	movs	r1, #2
 800474e:	6938      	ldr	r0, [r7, #16]
 8004750:	f7ff fc37 	bl	8003fc2 <u8g2_font_get_word>
 8004754:	4603      	mov	r3, r0
 8004756:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	3304      	adds	r3, #4
 800475c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800475e:	89fa      	ldrh	r2, [r7, #14]
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3e9      	bcc.n	800473a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	b29a      	uxth	r2, r3
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	4313      	orrs	r3, r2
 800477e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004786:	89fa      	ldrh	r2, [r7, #14]
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	429a      	cmp	r2, r3
 800478c:	d102      	bne.n	8004794 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3303      	adds	r3, #3
 8004792:	e00b      	b.n	80047ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3302      	adds	r3, #2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80047a2:	e7e0      	b.n	8004766 <u8g2_font_get_glyph_data+0xb2>
	break;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <u8g2_font_get_glyph_data+0xf6>
	break;
 80047a8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	817b      	strh	r3, [r7, #10]
 80047c6:	460b      	mov	r3, r1
 80047c8:	813b      	strh	r3, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	897a      	ldrh	r2, [r7, #10]
 80047d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	893a      	ldrh	r2, [r7, #8]
 80047de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	4619      	mov	r1, r3
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff ff64 	bl	80046b4 <u8g2_font_get_glyph_data>
 80047ec:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80047f4:	6939      	ldr	r1, [r7, #16]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f7ff fe4e 	bl	8004498 <u8g2_font_decode_glyph>
 80047fc:	4603      	mov	r3, r0
 80047fe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004800:	8afb      	ldrh	r3, [r7, #22]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4603      	mov	r3, r0
 800481c:	817b      	strh	r3, [r7, #10]
 800481e:	460b      	mov	r3, r1
 8004820:	813b      	strh	r3, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800482c:	2b03      	cmp	r3, #3
 800482e:	d833      	bhi.n	8004898 <u8g2_DrawGlyph+0x8c>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <u8g2_DrawGlyph+0x2c>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	08004849 	.word	0x08004849
 800483c:	0800485d 	.word	0x0800485d
 8004840:	08004871 	.word	0x08004871
 8004844:	08004885 	.word	0x08004885
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	4798      	blx	r3
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	893b      	ldrh	r3, [r7, #8]
 8004856:	4413      	add	r3, r2
 8004858:	813b      	strh	r3, [r7, #8]
      break;
 800485a:	e01d      	b.n	8004898 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	4798      	blx	r3
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	817b      	strh	r3, [r7, #10]
      break;
 800486e:	e013      	b.n	8004898 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	4798      	blx	r3
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	813b      	strh	r3, [r7, #8]
      break;
 8004882:	e009      	b.n	8004898 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	4798      	blx	r3
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	897b      	ldrh	r3, [r7, #10]
 8004892:	4413      	add	r3, r2
 8004894:	817b      	strh	r3, [r7, #10]
      break;
 8004896:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	893a      	ldrh	r2, [r7, #8]
 800489c:	8979      	ldrh	r1, [r7, #10]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff88 	bl	80047b4 <u8g2_font_draw_glyph>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop

080048b0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	4613      	mov	r3, r2
 80048c0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fc5f 	bl	8005186 <u8x8_utf8_init>
  sum = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	7812      	ldrb	r2, [r2, #0]
 80048d4:	4611      	mov	r1, r2
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	4798      	blx	r3
 80048da:	4603      	mov	r3, r0
 80048dc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80048de:	8abb      	ldrh	r3, [r7, #20]
 80048e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d038      	beq.n	800495a <u8g2_draw_string+0xaa>
      break;
    str++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80048ee:	8abb      	ldrh	r3, [r7, #20]
 80048f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d0e9      	beq.n	80048cc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80048f8:	8abb      	ldrh	r3, [r7, #20]
 80048fa:	893a      	ldrh	r2, [r7, #8]
 80048fc:	8979      	ldrh	r1, [r7, #10]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff84 	bl	800480c <u8g2_DrawGlyph>
 8004904:	4603      	mov	r3, r0
 8004906:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800490e:	2b03      	cmp	r3, #3
 8004910:	d81e      	bhi.n	8004950 <u8g2_draw_string+0xa0>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <u8g2_draw_string+0x68>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004929 	.word	0x08004929
 800491c:	08004933 	.word	0x08004933
 8004920:	0800493d 	.word	0x0800493d
 8004924:	08004947 	.word	0x08004947
      {
	case 0:
	  x += delta;
 8004928:	897a      	ldrh	r2, [r7, #10]
 800492a:	8a7b      	ldrh	r3, [r7, #18]
 800492c:	4413      	add	r3, r2
 800492e:	817b      	strh	r3, [r7, #10]
	  break;
 8004930:	e00e      	b.n	8004950 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004932:	893a      	ldrh	r2, [r7, #8]
 8004934:	8a7b      	ldrh	r3, [r7, #18]
 8004936:	4413      	add	r3, r2
 8004938:	813b      	strh	r3, [r7, #8]
	  break;
 800493a:	e009      	b.n	8004950 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800493c:	897a      	ldrh	r2, [r7, #10]
 800493e:	8a7b      	ldrh	r3, [r7, #18]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	817b      	strh	r3, [r7, #10]
	  break;
 8004944:	e004      	b.n	8004950 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004946:	893a      	ldrh	r2, [r7, #8]
 8004948:	8a7b      	ldrh	r3, [r7, #18]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	813b      	strh	r3, [r7, #8]
	  break;
 800494e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004950:	8afa      	ldrh	r2, [r7, #22]
 8004952:	8a7b      	ldrh	r3, [r7, #18]
 8004954:	4413      	add	r3, r2
 8004956:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004958:	e7b8      	b.n	80048cc <u8g2_draw_string+0x1c>
      break;
 800495a:	bf00      	nop
    }
  }
  return sum;
 800495c:	8afb      	ldrh	r3, [r7, #22]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop

08004968 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	4613      	mov	r3, r2
 8004978:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a06      	ldr	r2, [pc, #24]	; (8004998 <u8g2_DrawStr+0x30>)
 800497e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004980:	893a      	ldrh	r2, [r7, #8]
 8004982:	8979      	ldrh	r1, [r7, #10]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ff92 	bl	80048b0 <u8g2_draw_string>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	080051a1 	.word	0x080051a1

0800499c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05d      	beq.n	8004a68 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04d      	beq.n	8004a6a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11c      	bne.n	8004a12 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80049e4:	429a      	cmp	r2, r3
 80049e6:	da05      	bge.n	80049f4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004a00:	429a      	cmp	r2, r3
 8004a02:	dd32      	ble.n	8004a6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004a10:	e02b      	b.n	8004a6a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004a20:	4619      	mov	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a28:	440b      	add	r3, r1
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	da0d      	bge.n	8004a4a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	b25a      	sxtb	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004a56:	429a      	cmp	r2, r3
 8004a58:	dd07      	ble.n	8004a6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004a66:	e000      	b.n	8004a6a <u8g2_UpdateRefHeight+0xce>
    return;
 8004a68:	bf00      	nop
  }  
}
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  return 0;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
	...

08004a88 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <u8g2_SetFontPosBaseline+0x18>)
 8004a94:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	08004a73 	.word	0x08004a73

08004aa4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d00b      	beq.n	8004ad0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3374      	adds	r3, #116	; 0x74
 8004ac2:	6839      	ldr	r1, [r7, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fa9b 	bl	8004000 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff66 	bl	800499c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	80fb      	strh	r3, [r7, #6]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004af4:	8afb      	ldrh	r3, [r7, #22]
 8004af6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	881a      	ldrh	r2, [r3, #0]
 8004afc:	8abb      	ldrh	r3, [r7, #20]
 8004afe:	4413      	add	r3, r2
 8004b00:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004b02:	8afa      	ldrh	r2, [r7, #22]
 8004b04:	8abb      	ldrh	r3, [r7, #20]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90b      	bls.n	8004b22 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004b0a:	8afa      	ldrh	r2, [r7, #22]
 8004b0c:	88bb      	ldrh	r3, [r7, #4]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d205      	bcs.n	8004b1e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004b12:	88bb      	ldrh	r3, [r7, #4]
 8004b14:	82bb      	strh	r3, [r7, #20]
      b--;
 8004b16:	8abb      	ldrh	r3, [r7, #20]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	82bb      	strh	r3, [r7, #20]
 8004b1c:	e001      	b.n	8004b22 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004b22:	8afa      	ldrh	r2, [r7, #22]
 8004b24:	88bb      	ldrh	r3, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d301      	bcc.n	8004b2e <u8g2_clip_intersection2+0x56>
    return 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e01c      	b.n	8004b68 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004b2e:	8aba      	ldrh	r2, [r7, #20]
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d801      	bhi.n	8004b3a <u8g2_clip_intersection2+0x62>
    return 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e016      	b.n	8004b68 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004b3a:	8afa      	ldrh	r2, [r7, #22]
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d201      	bcs.n	8004b46 <u8g2_clip_intersection2+0x6e>
    a = c;
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004b46:	8aba      	ldrh	r2, [r7, #20]
 8004b48:	88bb      	ldrh	r3, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d901      	bls.n	8004b52 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004b4e:	88bb      	ldrh	r3, [r7, #4]
 8004b50:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8afa      	ldrh	r2, [r7, #22]
 8004b56:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004b58:	8aba      	ldrh	r2, [r7, #20]
 8004b5a:	8afb      	ldrh	r3, [r7, #22]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	8aba      	ldrh	r2, [r7, #20]
 8004b64:	801a      	strh	r2, [r3, #0]
  return 1;
 8004b66:	2301      	movs	r3, #1
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004b72:	b590      	push	{r4, r7, lr}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4603      	mov	r3, r0
 8004b82:	817b      	strh	r3, [r7, #10]
 8004b84:	460b      	mov	r3, r1
 8004b86:	813b      	strh	r3, [r7, #8]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	893a      	ldrh	r2, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004b9a:	88f8      	ldrh	r0, [r7, #6]
 8004b9c:	893a      	ldrh	r2, [r7, #8]
 8004b9e:	8979      	ldrh	r1, [r7, #10]
 8004ba0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	47a0      	blx	r4
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d075      	beq.n	8004cc4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d072      	beq.n	8004cc4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d91a      	bls.n	8004c1a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004be4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d109      	bne.n	8004c00 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004bec:	897a      	ldrh	r2, [r7, #10]
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	817b      	strh	r3, [r7, #10]
	  x++;
 8004bf6:	897b      	ldrh	r3, [r7, #10]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	e00c      	b.n	8004c1a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004c00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d108      	bne.n	8004c1a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	813b      	strh	r3, [r7, #8]
	  y++;
 8004c12:	893b      	ldrh	r3, [r7, #8]
 8004c14:	3301      	adds	r3, #1
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11a      	bne.n	8004c64 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004c34:	893b      	ldrh	r3, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d83b      	bhi.n	8004cb2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004c40:	893b      	ldrh	r3, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d937      	bls.n	8004cb6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004c52:	1db9      	adds	r1, r7, #6
 8004c54:	f107 000a 	add.w	r0, r7, #10
 8004c58:	f7ff ff3e 	bl	8004ad8 <u8g2_clip_intersection2>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11a      	bne.n	8004c98 <u8g2_DrawHVLine+0xe4>
	  return;
 8004c62:	e02f      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d824      	bhi.n	8004cba <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d920      	bls.n	8004cbe <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004c88:	1db9      	adds	r1, r7, #6
 8004c8a:	f107 0008 	add.w	r0, r7, #8
 8004c8e:	f7ff ff23 	bl	8004ad8 <u8g2_clip_intersection2>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d014      	beq.n	8004cc2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	689c      	ldr	r4, [r3, #8]
 8004c9e:	8979      	ldrh	r1, [r7, #10]
 8004ca0:	893a      	ldrh	r2, [r7, #8]
 8004ca2:	88f8      	ldrh	r0, [r7, #6]
 8004ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4603      	mov	r3, r0
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	47a0      	blx	r4
 8004cb0:	e008      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
	  return;
 8004cb2:	bf00      	nop
 8004cb4:	e006      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
	  return;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
	  return;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
	  return;
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <u8g2_DrawHVLine+0x110>
	  return;
 8004cc2:	bf00      	nop
    }
}
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd90      	pop	{r4, r7, pc}

08004cca <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004cca:	b490      	push	{r4, r7}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	80fb      	strh	r3, [r7, #6]
 8004cdc:	4603      	mov	r3, r0
 8004cde:	80bb      	strh	r3, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	88bb      	ldrh	r3, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d20d      	bcs.n	8004d0c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004cf0:	883a      	ldrh	r2, [r7, #0]
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d901      	bls.n	8004cfc <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e014      	b.n	8004d26 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004cfc:	887a      	ldrh	r2, [r7, #2]
 8004cfe:	883b      	ldrh	r3, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d901      	bls.n	8004d08 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e00e      	b.n	8004d26 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e00c      	b.n	8004d26 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004d0c:	883a      	ldrh	r2, [r7, #0]
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d907      	bls.n	8004d24 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004d14:	887a      	ldrh	r2, [r7, #2]
 8004d16:	883b      	ldrh	r3, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d901      	bls.n	8004d20 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e002      	b.n	8004d26 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004d24:	2300      	movs	r3, #0
    }
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc90      	pop	{r4, r7}
 8004d2e:	4770      	bx	lr

08004d30 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	817b      	strh	r3, [r7, #10]
 8004d42:	460b      	mov	r3, r1
 8004d44:	813b      	strh	r3, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004d56:	8b3b      	ldrh	r3, [r7, #24]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	f7ff ffb6 	bl	8004cca <u8g2_is_intersection_decision_tree>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <u8g2_IsIntersection+0x38>
    return 0; 
 8004d64:	2300      	movs	r3, #0
 8004d66:	e00a      	b.n	8004d7e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	897a      	ldrh	r2, [r7, #10]
 8004d78:	f7ff ffa7 	bl	8004cca <u8g2_is_intersection_decision_tree>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b089      	sub	sp, #36	; 0x24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	461a      	mov	r2, r3
 8004d94:	4603      	mov	r3, r0
 8004d96:	817b      	strh	r3, [r7, #10]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	813b      	strh	r3, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004da0:	893b      	ldrh	r3, [r7, #8]
 8004da2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004da4:	7efb      	ldrb	r3, [r7, #27]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004dac:	2301      	movs	r3, #1
 8004dae:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8004db0:	7e3a      	ldrb	r2, [r7, #24]
 8004db2:	7efb      	ldrb	r3, [r7, #27]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d801      	bhi.n	8004dd0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004dcc:	7e3b      	ldrb	r3, [r7, #24]
 8004dce:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004dda:	7e3b      	ldrb	r3, [r7, #24]
 8004ddc:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004dde:	893b      	ldrh	r3, [r7, #8]
 8004de0:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8004de2:	8afb      	ldrh	r3, [r7, #22]
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	7c1b      	ldrb	r3, [r3, #16]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8afa      	ldrh	r2, [r7, #22]
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004e00:	8afb      	ldrh	r3, [r7, #22]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004e08:	897b      	ldrh	r3, [r7, #10]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004e10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d117      	bne.n	8004e48 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	7ebb      	ldrb	r3, [r7, #26]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	7e7b      	ldrb	r3, [r7, #25]
 8004e2c:	4053      	eors	r3, r2
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
	len--;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e8      	bne.n	8004e18 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004e46:	e038      	b.n	8004eba <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	781a      	ldrb	r2, [r3, #0]
 8004e4c:	7ebb      	ldrb	r3, [r7, #26]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	7e7b      	ldrb	r3, [r7, #25]
 8004e5c:	4053      	eors	r3, r2
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004e64:	7efb      	ldrb	r3, [r7, #27]
 8004e66:	3301      	adds	r3, #1
 8004e68:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	76fb      	strb	r3, [r7, #27]
      len--;
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004e78:	7efb      	ldrb	r3, [r7, #27]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d114      	bne.n	8004ea8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004e82:	461a      	mov	r2, r3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d801      	bhi.n	8004e98 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d008      	beq.n	8004eb4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	767b      	strb	r3, [r7, #25]
 8004ea6:	e005      	b.n	8004eb4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8004ea8:	7ebb      	ldrb	r3, [r7, #26]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8004eae:	7e7b      	ldrb	r3, [r7, #25]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1c6      	bne.n	8004e48 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004eba:	bf00      	nop
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	79fa      	ldrb	r2, [r7, #7]
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ffad 	bl	8004ec4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff fd8c 	bl	8004a88 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f94:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004f96:	89fb      	ldrh	r3, [r7, #14]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	89fa      	ldrh	r2, [r7, #14]
 8004fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	7c1b      	ldrb	r3, [r3, #16]
 8004fa6:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	89fa      	ldrh	r2, [r7, #14]
 8004fb2:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fba:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	89fa      	ldrh	r2, [r7, #14]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fce:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004fd8:	4413      	add	r3, r2
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	7c52      	ldrb	r2, [r2, #17]
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	dd08      	ble.n	8004ff4 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	7c5b      	ldrb	r3, [r3, #17]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004ff4:	89fb      	ldrh	r3, [r7, #14]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005016:	89fb      	ldrh	r3, [r7, #14]
 8005018:	4413      	add	r3, r2
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	8a9a      	ldrh	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	8ada      	ldrh	r2, [r3, #22]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4603      	mov	r3, r0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff fe63 	bl	8004d30 <u8g2_IsIntersection>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005078:	e03b      	b.n	80050f2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508e:	429a      	cmp	r2, r3
 8005090:	d205      	bcs.n	800509e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d905      	bls.n	80050ba <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d205      	bcs.n	80050d6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d905      	bls.n	80050f2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ff3c 	bl	8004f80 <u8g2_update_dimension_common>
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff7b 	bl	8005040 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af02      	add	r7, sp, #8
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	4608      	mov	r0, r1
 800515c:	4611      	mov	r1, r2
 800515e:	461a      	mov	r2, r3
 8005160:	4603      	mov	r3, r0
 8005162:	817b      	strh	r3, [r7, #10]
 8005164:	460b      	mov	r3, r1
 8005166:	813b      	strh	r3, [r7, #8]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800516c:	88f8      	ldrh	r0, [r7, #6]
 800516e:	893a      	ldrh	r2, [r7, #8]
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	7e3b      	ldrb	r3, [r7, #24]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	4603      	mov	r3, r0
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fcfa 	bl	8004b72 <u8g2_draw_hv_line_2dir>
}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <u8x8_ascii_next+0x18>
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b0a      	cmp	r3, #10
 80051b6:	d102      	bne.n	80051be <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80051b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051bc:	e001      	b.n	80051c2 <u8x8_ascii_next+0x22>
  return b;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	b29b      	uxth	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80051cc:	b590      	push	{r4, r7, lr}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	460b      	mov	r3, r1
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691c      	ldr	r4, [r3, #16]
 80051de:	7afa      	ldrb	r2, [r7, #11]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2117      	movs	r1, #23
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	47a0      	blx	r4
 80051e8:	4603      	mov	r3, r0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}

080051f2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80051fe:	1cfb      	adds	r3, r7, #3
 8005200:	461a      	mov	r2, r3
 8005202:	2101      	movs	r1, #1
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ffe1 	bl	80051cc <u8x8_byte_SendBytes>
 800520a:	4603      	mov	r3, r0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691c      	ldr	r4, [r3, #16]
 8005220:	2300      	movs	r3, #0
 8005222:	2200      	movs	r2, #0
 8005224:	2118      	movs	r1, #24
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	47a0      	blx	r4
 800522a:	4603      	mov	r3, r0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}

08005234 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691c      	ldr	r4, [r3, #16]
 8005240:	2300      	movs	r3, #0
 8005242:	2200      	movs	r2, #0
 8005244:	2119      	movs	r1, #25
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	47a0      	blx	r4
 800524a:	4603      	mov	r3, r0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}

08005254 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68dc      	ldr	r4, [r3, #12]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	2300      	movs	r3, #0
 8005268:	2115      	movs	r1, #21
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	47a0      	blx	r4
 800526e:	4603      	mov	r3, r0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}

08005278 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68dc      	ldr	r4, [r3, #12]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	2300      	movs	r3, #0
 800528c:	2116      	movs	r1, #22
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	47a0      	blx	r4
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bd90      	pop	{r4, r7, pc}

0800529c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	460b      	mov	r3, r1
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68dc      	ldr	r4, [r3, #12]
 80052ae:	7afa      	ldrb	r2, [r7, #11]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2117      	movs	r1, #23
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	47a0      	blx	r4
 80052b8:	4603      	mov	r3, r0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}

080052c2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80052c2:	b590      	push	{r4, r7, lr}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68dc      	ldr	r4, [r3, #12]
 80052ce:	2300      	movs	r3, #0
 80052d0:	2200      	movs	r2, #0
 80052d2:	2118      	movs	r1, #24
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	47a0      	blx	r4
 80052d8:	4603      	mov	r3, r0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}

080052e2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80052e2:	b590      	push	{r4, r7, lr}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68dc      	ldr	r4, [r3, #12]
 80052ee:	2300      	movs	r3, #0
 80052f0:	2200      	movs	r2, #0
 80052f2:	2119      	movs	r1, #25
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	47a0      	blx	r4
 80052f8:	4603      	mov	r3, r0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}

08005302 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005302:	b590      	push	{r4, r7, lr}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	73fb      	strb	r3, [r7, #15]
    data++;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2bfe      	cmp	r3, #254	; 0xfe
 800531c:	d031      	beq.n	8005382 <u8x8_cad_SendSequence+0x80>
 800531e:	2bfe      	cmp	r3, #254	; 0xfe
 8005320:	dc3d      	bgt.n	800539e <u8x8_cad_SendSequence+0x9c>
 8005322:	2b19      	cmp	r3, #25
 8005324:	dc3b      	bgt.n	800539e <u8x8_cad_SendSequence+0x9c>
 8005326:	2b18      	cmp	r3, #24
 8005328:	da23      	bge.n	8005372 <u8x8_cad_SendSequence+0x70>
 800532a:	2b16      	cmp	r3, #22
 800532c:	dc02      	bgt.n	8005334 <u8x8_cad_SendSequence+0x32>
 800532e:	2b15      	cmp	r3, #21
 8005330:	da03      	bge.n	800533a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005332:	e034      	b.n	800539e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8005334:	2b17      	cmp	r3, #23
 8005336:	d00e      	beq.n	8005356 <u8x8_cad_SendSequence+0x54>
	return;
 8005338:	e031      	b.n	800539e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68dc      	ldr	r4, [r3, #12]
 8005344:	7bba      	ldrb	r2, [r7, #14]
 8005346:	7bf9      	ldrb	r1, [r7, #15]
 8005348:	2300      	movs	r3, #0
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	47a0      	blx	r4
	  data++;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	603b      	str	r3, [r7, #0]
	  break;
 8005354:	e022      	b.n	800539c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800535c:	f107 030e 	add.w	r3, r7, #14
 8005360:	461a      	mov	r2, r3
 8005362:	2101      	movs	r1, #1
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff99 	bl	800529c <u8x8_cad_SendData>
	  data++;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	603b      	str	r3, [r7, #0]
	  break;
 8005370:	e014      	b.n	800539c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68dc      	ldr	r4, [r3, #12]
 8005376:	7bf9      	ldrb	r1, [r7, #15]
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	47a0      	blx	r4
	  break;
 8005380:	e00c      	b.n	800539c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	461a      	mov	r2, r3
 800538c:	2129      	movs	r1, #41	; 0x29
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa36 	bl	8005800 <u8x8_gpio_call>
	  data++;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	603b      	str	r3, [r7, #0]
	  break;
 800539a:	bf00      	nop
    cmd = *data;
 800539c:	e7b6      	b.n	800530c <u8x8_cad_SendSequence+0xa>
	return;
 800539e:	bf00      	nop
    }
  }
}
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}

080053a6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	460b      	mov	r3, r1
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff2d 	bl	8005214 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff18 	bl	80051f2 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691c      	ldr	r4, [r3, #16]
 80053c6:	7afa      	ldrb	r2, [r7, #11]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2117      	movs	r1, #23
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff2f 	bl	8005234 <u8x8_byte_EndTransfer>
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}
	...

080053e0 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	72fb      	strb	r3, [r7, #11]
 80053ee:	4613      	mov	r3, r2
 80053f0:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	3b14      	subs	r3, #20
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d86e      	bhi.n	80054d8 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005497 	.word	0x08005497
 8005404:	08005419 	.word	0x08005419
 8005408:	08005447 	.word	0x08005447
 800540c:	08005453 	.word	0x08005453
 8005410:	080054bb 	.word	0x080054bb
 8005414:	080054c3 	.word	0x080054c3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8005418:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff ff07 	bl	8005234 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fef4 	bl	8005214 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800542c:	2100      	movs	r1, #0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fedf 	bl	80051f2 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005434:	7abb      	ldrb	r3, [r7, #10]
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff feda 	bl	80051f2 <u8x8_byte_SendByte>
      in_transfer = 1;
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8005444:	e04a      	b.n	80054dc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8005446:	7abb      	ldrb	r3, [r7, #10]
 8005448:	4619      	mov	r1, r3
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff fed1 	bl	80051f2 <u8x8_byte_SendByte>
      break;      
 8005450:	e044      	b.n	80054dc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8005452:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff feea 	bl	8005234 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8005464:	e00a      	b.n	800547c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	2118      	movs	r1, #24
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff9b 	bl	80053a6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8005470:	7abb      	ldrb	r3, [r7, #10]
 8005472:	3b18      	subs	r3, #24
 8005474:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	3318      	adds	r3, #24
 800547a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800547c:	7abb      	ldrb	r3, [r7, #10]
 800547e:	2b18      	cmp	r3, #24
 8005480:	d8f1      	bhi.n	8005466 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8005482:	7abb      	ldrb	r3, [r7, #10]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4619      	mov	r1, r3
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f7ff ff8c 	bl	80053a6 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800548e:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
      break;
 8005494:	e022      	b.n	80054dc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800549c:	2bff      	cmp	r3, #255	; 0xff
 800549e:	d103      	bne.n	80054a8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2278      	movs	r2, #120	; 0x78
 80054a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691c      	ldr	r4, [r3, #16]
 80054ac:	7aba      	ldrb	r2, [r7, #10]
 80054ae:	7af9      	ldrb	r1, [r7, #11]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	47a0      	blx	r4
 80054b6:	4603      	mov	r3, r0
 80054b8:	e011      	b.n	80054de <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
      break;
 80054c0:	e00c      	b.n	80054dc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff feb2 	bl	8005234 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
      break;
 80054d6:	e001      	b.n	80054dc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80054dc:	2301      	movs	r3, #1
}
 80054de:	4618      	mov	r0, r3
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000514 	.word	0x20000514

080054ec <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	72fb      	strb	r3, [r7, #11]
 80054fa:	4613      	mov	r3, r2
 80054fc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80054fe:	7afb      	ldrb	r3, [r7, #11]
 8005500:	3b0b      	subs	r3, #11
 8005502:	2b04      	cmp	r3, #4
 8005504:	f200 808a 	bhi.w	800561c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005525 	.word	0x08005525
 8005514:	0800561d 	.word	0x0800561d
 8005518:	0800553f 	.word	0x0800553f
 800551c:	08005571 	.word	0x08005571
 8005520:	08005591 	.word	0x08005591
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005524:	7abb      	ldrb	r3, [r7, #10]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800552a:	4940      	ldr	r1, [pc, #256]	; (800562c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fee8 	bl	8005302 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8005532:	e075      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005534:	493e      	ldr	r1, [pc, #248]	; (8005630 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fee3 	bl	8005302 <u8x8_cad_SendSequence>
      break;
 800553c:	e070      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800553e:	7abb      	ldrb	r3, [r7, #10]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005544:	493b      	ldr	r1, [pc, #236]	; (8005634 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff fedb 	bl	8005302 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	7c9a      	ldrb	r2, [r3, #18]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005558:	e062      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800555a:	4937      	ldr	r1, [pc, #220]	; (8005638 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fed0 	bl	8005302 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	7cda      	ldrb	r2, [r3, #19]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800556e:	e057      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fea6 	bl	80052c2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005576:	2181      	movs	r1, #129	; 0x81
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fe6b 	bl	8005254 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800557e:	7abb      	ldrb	r3, [r7, #10]
 8005580:	4619      	mov	r1, r3
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff fe78 	bl	8005278 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff feaa 	bl	80052e2 <u8x8_cad_EndTransfer>
      break;
 800558e:	e047      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fe96 	bl	80052c2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	795b      	ldrb	r3, [r3, #5]
 800559a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	4413      	add	r3, r2
 80055ac:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff fe4f 	bl	8005254 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f043 0310 	orr.w	r3, r3, #16
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	4619      	mov	r1, r3
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff fe45 	bl	8005254 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fe4f 	bl	8005278 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	799b      	ldrb	r3, [r3, #6]
 80055de:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff fe46 	bl	8005278 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80055f8:	7dbb      	ldrb	r3, [r7, #22]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4619      	mov	r1, r3
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fe4a 	bl	800529c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005608:	7abb      	ldrb	r3, [r7, #10]
 800560a:	3b01      	subs	r3, #1
 800560c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800560e:	7abb      	ldrb	r3, [r7, #10]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1eb      	bne.n	80055ec <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fe64 	bl	80052e2 <u8x8_cad_EndTransfer>
      break;
 800561a:	e001      	b.n	8005620 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8005620:	2301      	movs	r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	08007150 	.word	0x08007150
 8005630:	08007158 	.word	0x08007158
 8005634:	08007160 	.word	0x08007160
 8005638:	08007168 	.word	0x08007168

0800563c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	72fb      	strb	r3, [r7, #11]
 800564a:	4613      	mov	r3, r2
 800564c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800564e:	7aba      	ldrb	r2, [r7, #10]
 8005650:	7af9      	ldrb	r1, [r7, #11]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff ff49 	bl	80054ec <u8x8_d_ssd1306_sh1106_generic>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8005660:	2301      	movs	r3, #1
 8005662:	e014      	b.n	800568e <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	2b09      	cmp	r3, #9
 8005668:	d009      	beq.n	800567e <u8x8_d_ssd1306_128x64_noname+0x42>
 800566a:	2b0a      	cmp	r3, #10
 800566c:	d10c      	bne.n	8005688 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f829 	bl	80056c6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005674:	4908      	ldr	r1, [pc, #32]	; (8005698 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fe43 	bl	8005302 <u8x8_cad_SendSequence>
      break;
 800567c:	e006      	b.n	800568c <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800567e:	4907      	ldr	r1, [pc, #28]	; (800569c <u8x8_d_ssd1306_128x64_noname+0x60>)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f80d 	bl	80056a0 <u8x8_d_helper_display_setup_memory>
      break;
 8005686:	e001      	b.n	800568c <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 800568c:	2301      	movs	r3, #1
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	08007118 	.word	0x08007118
 800569c:	08007170 	.word	0x08007170

080056a0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	7c9a      	ldrb	r2, [r3, #18]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80056c6:	b590      	push	{r4, r7, lr}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695c      	ldr	r4, [r3, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	2200      	movs	r2, #0
 80056d6:	2128      	movs	r1, #40	; 0x28
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68dc      	ldr	r4, [r3, #12]
 80056e0:	2300      	movs	r3, #0
 80056e2:	2200      	movs	r2, #0
 80056e4:	2114      	movs	r1, #20
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80056ea:	2201      	movs	r2, #1
 80056ec:	214b      	movs	r1, #75	; 0x4b
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f886 	bl	8005800 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	2129      	movs	r1, #41	; 0x29
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f87e 	bl	8005800 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005704:	2200      	movs	r2, #0
 8005706:	214b      	movs	r1, #75	; 0x4b
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f879 	bl	8005800 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	791b      	ldrb	r3, [r3, #4]
 8005714:	461a      	mov	r2, r3
 8005716:	2129      	movs	r1, #41	; 0x29
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f871 	bl	8005800 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800571e:	2201      	movs	r2, #1
 8005720:	214b      	movs	r1, #75	; 0x4b
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f86c 	bl	8005800 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	795b      	ldrb	r3, [r3, #5]
 800572e:	461a      	mov	r2, r3
 8005730:	2129      	movs	r1, #41	; 0x29
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f864 	bl	8005800 <u8x8_gpio_call>
}    
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	bd90      	pop	{r4, r7, pc}

08005740 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	4608      	mov	r0, r1
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	4603      	mov	r3, r0
 8005750:	70fb      	strb	r3, [r7, #3]
 8005752:	460b      	mov	r3, r1
 8005754:	70bb      	strb	r3, [r7, #2]
 8005756:	4613      	mov	r3, r2
 8005758:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800575e:	78bb      	ldrb	r3, [r7, #2]
 8005760:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005762:	787b      	ldrb	r3, [r7, #1]
 8005764:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689c      	ldr	r4, [r3, #8]
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	2201      	movs	r2, #1
 8005774:	210f      	movs	r1, #15
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	47a0      	blx	r4
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bd90      	pop	{r4, r7, pc}

08005784 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689c      	ldr	r4, [r3, #8]
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	2109      	movs	r1, #9
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	47a0      	blx	r4
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}

080057a2 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80057a2:	b590      	push	{r4, r7, lr}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689c      	ldr	r4, [r3, #8]
 80057ae:	2300      	movs	r3, #0
 80057b0:	2200      	movs	r2, #0
 80057b2:	210a      	movs	r1, #10
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	47a0      	blx	r4
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}

080057c0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689c      	ldr	r4, [r3, #8]
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	2300      	movs	r3, #0
 80057d4:	210b      	movs	r1, #11
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	47a0      	blx	r4
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}

080057e2 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80057e2:	b590      	push	{r4, r7, lr}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689c      	ldr	r4, [r3, #8]
 80057ee:	2300      	movs	r3, #0
 80057f0:	2200      	movs	r2, #0
 80057f2:	2110      	movs	r1, #16
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	47a0      	blx	r4
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd90      	pop	{r4, r7, pc}

08005800 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
 800580c:	4613      	mov	r3, r2
 800580e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695c      	ldr	r4, [r3, #20]
 8005814:	78ba      	ldrb	r2, [r7, #2]
 8005816:	78f9      	ldrb	r1, [r7, #3]
 8005818:	2300      	movs	r3, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	47a0      	blx	r4
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bd90      	pop	{r4, r7, pc}

08005826 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	72fb      	strb	r3, [r7, #11]
 8005834:	4613      	mov	r3, r2
 8005836:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a11      	ldr	r2, [pc, #68]	; (800589c <u8x8_SetupDefaults+0x58>)
 8005856:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a10      	ldr	r2, [pc, #64]	; (800589c <u8x8_SetupDefaults+0x58>)
 800585c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a0e      	ldr	r2, [pc, #56]	; (800589c <u8x8_SetupDefaults+0x58>)
 8005862:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a0d      	ldr	r2, [pc, #52]	; (800589c <u8x8_SetupDefaults+0x58>)
 8005868:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	22ff      	movs	r2, #255	; 0xff
 800588c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	08005827 	.word	0x08005827

080058a0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff ffc8 	bl	8005844 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ff59 	bl	8005784 <u8x8_SetupMemory>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <__errno>:
 80058dc:	4b01      	ldr	r3, [pc, #4]	; (80058e4 <__errno+0x8>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	2600      	movs	r6, #0
 80058ec:	4d0c      	ldr	r5, [pc, #48]	; (8005920 <__libc_init_array+0x38>)
 80058ee:	4c0d      	ldr	r4, [pc, #52]	; (8005924 <__libc_init_array+0x3c>)
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	f000 fc70 	bl	80061dc <_init>
 80058fc:	2600      	movs	r6, #0
 80058fe:	4d0a      	ldr	r5, [pc, #40]	; (8005928 <__libc_init_array+0x40>)
 8005900:	4c0a      	ldr	r4, [pc, #40]	; (800592c <__libc_init_array+0x44>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	080071bc 	.word	0x080071bc
 8005924:	080071bc 	.word	0x080071bc
 8005928:	080071bc 	.word	0x080071bc
 800592c:	080071c0 	.word	0x080071c0

08005930 <memset>:
 8005930:	4603      	mov	r3, r0
 8005932:	4402      	add	r2, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <sniprintf>:
 8005940:	b40c      	push	{r2, r3}
 8005942:	b530      	push	{r4, r5, lr}
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <sniprintf+0x64>)
 8005946:	1e0c      	subs	r4, r1, #0
 8005948:	681d      	ldr	r5, [r3, #0]
 800594a:	b09d      	sub	sp, #116	; 0x74
 800594c:	da08      	bge.n	8005960 <sniprintf+0x20>
 800594e:	238b      	movs	r3, #139	; 0x8b
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	b01d      	add	sp, #116	; 0x74
 8005958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800595c:	b002      	add	sp, #8
 800595e:	4770      	bx	lr
 8005960:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005964:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005968:	bf0c      	ite	eq
 800596a:	4623      	moveq	r3, r4
 800596c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005978:	9002      	str	r0, [sp, #8]
 800597a:	9006      	str	r0, [sp, #24]
 800597c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005980:	4628      	mov	r0, r5
 8005982:	ab21      	add	r3, sp, #132	; 0x84
 8005984:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005986:	a902      	add	r1, sp, #8
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f000 f869 	bl	8005a60 <_svfiprintf_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	bfbc      	itt	lt
 8005992:	238b      	movlt	r3, #139	; 0x8b
 8005994:	602b      	strlt	r3, [r5, #0]
 8005996:	2c00      	cmp	r4, #0
 8005998:	d0dd      	beq.n	8005956 <sniprintf+0x16>
 800599a:	2200      	movs	r2, #0
 800599c:	9b02      	ldr	r3, [sp, #8]
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e7d9      	b.n	8005956 <sniprintf+0x16>
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c

080059a8 <__ssputs_r>:
 80059a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	688e      	ldr	r6, [r1, #8]
 80059ae:	4682      	mov	sl, r0
 80059b0:	429e      	cmp	r6, r3
 80059b2:	460c      	mov	r4, r1
 80059b4:	4690      	mov	r8, r2
 80059b6:	461f      	mov	r7, r3
 80059b8:	d838      	bhi.n	8005a2c <__ssputs_r+0x84>
 80059ba:	898a      	ldrh	r2, [r1, #12]
 80059bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059c0:	d032      	beq.n	8005a28 <__ssputs_r+0x80>
 80059c2:	6825      	ldr	r5, [r4, #0]
 80059c4:	6909      	ldr	r1, [r1, #16]
 80059c6:	3301      	adds	r3, #1
 80059c8:	eba5 0901 	sub.w	r9, r5, r1
 80059cc:	6965      	ldr	r5, [r4, #20]
 80059ce:	444b      	add	r3, r9
 80059d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059d8:	106d      	asrs	r5, r5, #1
 80059da:	429d      	cmp	r5, r3
 80059dc:	bf38      	it	cc
 80059de:	461d      	movcc	r5, r3
 80059e0:	0553      	lsls	r3, r2, #21
 80059e2:	d531      	bpl.n	8005a48 <__ssputs_r+0xa0>
 80059e4:	4629      	mov	r1, r5
 80059e6:	f000 fb53 	bl	8006090 <_malloc_r>
 80059ea:	4606      	mov	r6, r0
 80059ec:	b950      	cbnz	r0, 8005a04 <__ssputs_r+0x5c>
 80059ee:	230c      	movs	r3, #12
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	f8ca 3000 	str.w	r3, [sl]
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	464a      	mov	r2, r9
 8005a06:	6921      	ldr	r1, [r4, #16]
 8005a08:	f000 face 	bl	8005fa8 <memcpy>
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	6126      	str	r6, [r4, #16]
 8005a1a:	444e      	add	r6, r9
 8005a1c:	6026      	str	r6, [r4, #0]
 8005a1e:	463e      	mov	r6, r7
 8005a20:	6165      	str	r5, [r4, #20]
 8005a22:	eba5 0509 	sub.w	r5, r5, r9
 8005a26:	60a5      	str	r5, [r4, #8]
 8005a28:	42be      	cmp	r6, r7
 8005a2a:	d900      	bls.n	8005a2e <__ssputs_r+0x86>
 8005a2c:	463e      	mov	r6, r7
 8005a2e:	4632      	mov	r2, r6
 8005a30:	4641      	mov	r1, r8
 8005a32:	6820      	ldr	r0, [r4, #0]
 8005a34:	f000 fac6 	bl	8005fc4 <memmove>
 8005a38:	68a3      	ldr	r3, [r4, #8]
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	1b9b      	subs	r3, r3, r6
 8005a3e:	4432      	add	r2, r6
 8005a40:	2000      	movs	r0, #0
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	e7db      	b.n	8005a00 <__ssputs_r+0x58>
 8005a48:	462a      	mov	r2, r5
 8005a4a:	f000 fb7b 	bl	8006144 <_realloc_r>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1e1      	bne.n	8005a18 <__ssputs_r+0x70>
 8005a54:	4650      	mov	r0, sl
 8005a56:	6921      	ldr	r1, [r4, #16]
 8005a58:	f000 face 	bl	8005ff8 <_free_r>
 8005a5c:	e7c7      	b.n	80059ee <__ssputs_r+0x46>
	...

08005a60 <_svfiprintf_r>:
 8005a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a64:	4698      	mov	r8, r3
 8005a66:	898b      	ldrh	r3, [r1, #12]
 8005a68:	4607      	mov	r7, r0
 8005a6a:	061b      	lsls	r3, r3, #24
 8005a6c:	460d      	mov	r5, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	b09d      	sub	sp, #116	; 0x74
 8005a72:	d50e      	bpl.n	8005a92 <_svfiprintf_r+0x32>
 8005a74:	690b      	ldr	r3, [r1, #16]
 8005a76:	b963      	cbnz	r3, 8005a92 <_svfiprintf_r+0x32>
 8005a78:	2140      	movs	r1, #64	; 0x40
 8005a7a:	f000 fb09 	bl	8006090 <_malloc_r>
 8005a7e:	6028      	str	r0, [r5, #0]
 8005a80:	6128      	str	r0, [r5, #16]
 8005a82:	b920      	cbnz	r0, 8005a8e <_svfiprintf_r+0x2e>
 8005a84:	230c      	movs	r3, #12
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e0d1      	b.n	8005c32 <_svfiprintf_r+0x1d2>
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	616b      	str	r3, [r5, #20]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9309      	str	r3, [sp, #36]	; 0x24
 8005a96:	2320      	movs	r3, #32
 8005a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a9c:	2330      	movs	r3, #48	; 0x30
 8005a9e:	f04f 0901 	mov.w	r9, #1
 8005aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c4c <_svfiprintf_r+0x1ec>
 8005aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aae:	4623      	mov	r3, r4
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab6:	b10a      	cbz	r2, 8005abc <_svfiprintf_r+0x5c>
 8005ab8:	2a25      	cmp	r2, #37	; 0x25
 8005aba:	d1f9      	bne.n	8005ab0 <_svfiprintf_r+0x50>
 8005abc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac0:	d00b      	beq.n	8005ada <_svfiprintf_r+0x7a>
 8005ac2:	465b      	mov	r3, fp
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ff6d 	bl	80059a8 <__ssputs_r>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f000 80aa 	beq.w	8005c28 <_svfiprintf_r+0x1c8>
 8005ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad6:	445a      	add	r2, fp
 8005ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8005ada:	f89a 3000 	ldrb.w	r3, [sl]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80a2 	beq.w	8005c28 <_svfiprintf_r+0x1c8>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005aee:	f10a 0a01 	add.w	sl, sl, #1
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	9307      	str	r3, [sp, #28]
 8005af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005afa:	931a      	str	r3, [sp, #104]	; 0x68
 8005afc:	4654      	mov	r4, sl
 8005afe:	2205      	movs	r2, #5
 8005b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b04:	4851      	ldr	r0, [pc, #324]	; (8005c4c <_svfiprintf_r+0x1ec>)
 8005b06:	f000 fa41 	bl	8005f8c <memchr>
 8005b0a:	9a04      	ldr	r2, [sp, #16]
 8005b0c:	b9d8      	cbnz	r0, 8005b46 <_svfiprintf_r+0xe6>
 8005b0e:	06d0      	lsls	r0, r2, #27
 8005b10:	bf44      	itt	mi
 8005b12:	2320      	movmi	r3, #32
 8005b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b18:	0711      	lsls	r1, r2, #28
 8005b1a:	bf44      	itt	mi
 8005b1c:	232b      	movmi	r3, #43	; 0x2b
 8005b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b22:	f89a 3000 	ldrb.w	r3, [sl]
 8005b26:	2b2a      	cmp	r3, #42	; 0x2a
 8005b28:	d015      	beq.n	8005b56 <_svfiprintf_r+0xf6>
 8005b2a:	4654      	mov	r4, sl
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f04f 0c0a 	mov.w	ip, #10
 8005b32:	9a07      	ldr	r2, [sp, #28]
 8005b34:	4621      	mov	r1, r4
 8005b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b3a:	3b30      	subs	r3, #48	; 0x30
 8005b3c:	2b09      	cmp	r3, #9
 8005b3e:	d94e      	bls.n	8005bde <_svfiprintf_r+0x17e>
 8005b40:	b1b0      	cbz	r0, 8005b70 <_svfiprintf_r+0x110>
 8005b42:	9207      	str	r2, [sp, #28]
 8005b44:	e014      	b.n	8005b70 <_svfiprintf_r+0x110>
 8005b46:	eba0 0308 	sub.w	r3, r0, r8
 8005b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	46a2      	mov	sl, r4
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	e7d2      	b.n	8005afc <_svfiprintf_r+0x9c>
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	1d19      	adds	r1, r3, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	9103      	str	r1, [sp, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bfbb      	ittet	lt
 8005b62:	425b      	neglt	r3, r3
 8005b64:	f042 0202 	orrlt.w	r2, r2, #2
 8005b68:	9307      	strge	r3, [sp, #28]
 8005b6a:	9307      	strlt	r3, [sp, #28]
 8005b6c:	bfb8      	it	lt
 8005b6e:	9204      	strlt	r2, [sp, #16]
 8005b70:	7823      	ldrb	r3, [r4, #0]
 8005b72:	2b2e      	cmp	r3, #46	; 0x2e
 8005b74:	d10c      	bne.n	8005b90 <_svfiprintf_r+0x130>
 8005b76:	7863      	ldrb	r3, [r4, #1]
 8005b78:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7a:	d135      	bne.n	8005be8 <_svfiprintf_r+0x188>
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	3402      	adds	r4, #2
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	9203      	str	r2, [sp, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb8      	it	lt
 8005b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b8e:	9305      	str	r3, [sp, #20]
 8005b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c5c <_svfiprintf_r+0x1fc>
 8005b94:	2203      	movs	r2, #3
 8005b96:	4650      	mov	r0, sl
 8005b98:	7821      	ldrb	r1, [r4, #0]
 8005b9a:	f000 f9f7 	bl	8005f8c <memchr>
 8005b9e:	b140      	cbz	r0, 8005bb2 <_svfiprintf_r+0x152>
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	eba0 000a 	sub.w	r0, r0, sl
 8005ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	3401      	adds	r4, #1
 8005bae:	4303      	orrs	r3, r0
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb6:	2206      	movs	r2, #6
 8005bb8:	4825      	ldr	r0, [pc, #148]	; (8005c50 <_svfiprintf_r+0x1f0>)
 8005bba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bbe:	f000 f9e5 	bl	8005f8c <memchr>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d038      	beq.n	8005c38 <_svfiprintf_r+0x1d8>
 8005bc6:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <_svfiprintf_r+0x1f4>)
 8005bc8:	bb1b      	cbnz	r3, 8005c12 <_svfiprintf_r+0x1b2>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	3307      	adds	r3, #7
 8005bce:	f023 0307 	bic.w	r3, r3, #7
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	4433      	add	r3, r6
 8005bda:	9309      	str	r3, [sp, #36]	; 0x24
 8005bdc:	e767      	b.n	8005aae <_svfiprintf_r+0x4e>
 8005bde:	460c      	mov	r4, r1
 8005be0:	2001      	movs	r0, #1
 8005be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be6:	e7a5      	b.n	8005b34 <_svfiprintf_r+0xd4>
 8005be8:	2300      	movs	r3, #0
 8005bea:	f04f 0c0a 	mov.w	ip, #10
 8005bee:	4619      	mov	r1, r3
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfa:	3a30      	subs	r2, #48	; 0x30
 8005bfc:	2a09      	cmp	r2, #9
 8005bfe:	d903      	bls.n	8005c08 <_svfiprintf_r+0x1a8>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0c5      	beq.n	8005b90 <_svfiprintf_r+0x130>
 8005c04:	9105      	str	r1, [sp, #20]
 8005c06:	e7c3      	b.n	8005b90 <_svfiprintf_r+0x130>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c10:	e7f0      	b.n	8005bf4 <_svfiprintf_r+0x194>
 8005c12:	ab03      	add	r3, sp, #12
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	462a      	mov	r2, r5
 8005c18:	4638      	mov	r0, r7
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <_svfiprintf_r+0x1f8>)
 8005c1c:	a904      	add	r1, sp, #16
 8005c1e:	f3af 8000 	nop.w
 8005c22:	1c42      	adds	r2, r0, #1
 8005c24:	4606      	mov	r6, r0
 8005c26:	d1d6      	bne.n	8005bd6 <_svfiprintf_r+0x176>
 8005c28:	89ab      	ldrh	r3, [r5, #12]
 8005c2a:	065b      	lsls	r3, r3, #25
 8005c2c:	f53f af2c 	bmi.w	8005a88 <_svfiprintf_r+0x28>
 8005c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c32:	b01d      	add	sp, #116	; 0x74
 8005c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c38:	ab03      	add	r3, sp, #12
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4638      	mov	r0, r7
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <_svfiprintf_r+0x1f8>)
 8005c42:	a904      	add	r1, sp, #16
 8005c44:	f000 f87c 	bl	8005d40 <_printf_i>
 8005c48:	e7eb      	b.n	8005c22 <_svfiprintf_r+0x1c2>
 8005c4a:	bf00      	nop
 8005c4c:	08007188 	.word	0x08007188
 8005c50:	08007192 	.word	0x08007192
 8005c54:	00000000 	.word	0x00000000
 8005c58:	080059a9 	.word	0x080059a9
 8005c5c:	0800718e 	.word	0x0800718e

08005c60 <_printf_common>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	4616      	mov	r6, r2
 8005c66:	4699      	mov	r9, r3
 8005c68:	688a      	ldr	r2, [r1, #8]
 8005c6a:	690b      	ldr	r3, [r1, #16]
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfb8      	it	lt
 8005c72:	4613      	movlt	r3, r2
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c80:	b10a      	cbz	r2, 8005c86 <_printf_common+0x26>
 8005c82:	3301      	adds	r3, #1
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	0699      	lsls	r1, r3, #26
 8005c8a:	bf42      	ittt	mi
 8005c8c:	6833      	ldrmi	r3, [r6, #0]
 8005c8e:	3302      	addmi	r3, #2
 8005c90:	6033      	strmi	r3, [r6, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d106      	bne.n	8005ca8 <_printf_common+0x48>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	6832      	ldr	r2, [r6, #0]
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	dc28      	bgt.n	8005cfa <_printf_common+0x9a>
 8005ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cac:	1e13      	subs	r3, r2, #0
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2301      	movne	r3, #1
 8005cb4:	0692      	lsls	r2, r2, #26
 8005cb6:	d42d      	bmi.n	8005d14 <_printf_common+0xb4>
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc0:	47c0      	blx	r8
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d020      	beq.n	8005d08 <_printf_common+0xa8>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	68e5      	ldr	r5, [r4, #12]
 8005cca:	f003 0306 	and.w	r3, r3, #6
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	bf18      	it	ne
 8005cd2:	2500      	movne	r5, #0
 8005cd4:	6832      	ldr	r2, [r6, #0]
 8005cd6:	f04f 0600 	mov.w	r6, #0
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	bf08      	it	eq
 8005cde:	1aad      	subeq	r5, r5, r2
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	bf08      	it	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	bfc4      	itt	gt
 8005cec:	1a9b      	subgt	r3, r3, r2
 8005cee:	18ed      	addgt	r5, r5, r3
 8005cf0:	341a      	adds	r4, #26
 8005cf2:	42b5      	cmp	r5, r6
 8005cf4:	d11a      	bne.n	8005d2c <_printf_common+0xcc>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e008      	b.n	8005d0c <_printf_common+0xac>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4638      	mov	r0, r7
 8005d02:	47c0      	blx	r8
 8005d04:	3001      	adds	r0, #1
 8005d06:	d103      	bne.n	8005d10 <_printf_common+0xb0>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d10:	3501      	adds	r5, #1
 8005d12:	e7c4      	b.n	8005c9e <_printf_common+0x3e>
 8005d14:	2030      	movs	r0, #48	; 0x30
 8005d16:	18e1      	adds	r1, r4, r3
 8005d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d22:	4422      	add	r2, r4
 8005d24:	3302      	adds	r3, #2
 8005d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2a:	e7c5      	b.n	8005cb8 <_printf_common+0x58>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4622      	mov	r2, r4
 8005d30:	4649      	mov	r1, r9
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d0e6      	beq.n	8005d08 <_printf_common+0xa8>
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7d9      	b.n	8005cf2 <_printf_common+0x92>
	...

08005d40 <_printf_i>:
 8005d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	460c      	mov	r4, r1
 8005d46:	7e27      	ldrb	r7, [r4, #24]
 8005d48:	4691      	mov	r9, r2
 8005d4a:	2f78      	cmp	r7, #120	; 0x78
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	469a      	mov	sl, r3
 8005d50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d56:	d807      	bhi.n	8005d68 <_printf_i+0x28>
 8005d58:	2f62      	cmp	r7, #98	; 0x62
 8005d5a:	d80a      	bhi.n	8005d72 <_printf_i+0x32>
 8005d5c:	2f00      	cmp	r7, #0
 8005d5e:	f000 80d9 	beq.w	8005f14 <_printf_i+0x1d4>
 8005d62:	2f58      	cmp	r7, #88	; 0x58
 8005d64:	f000 80a4 	beq.w	8005eb0 <_printf_i+0x170>
 8005d68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d70:	e03a      	b.n	8005de8 <_printf_i+0xa8>
 8005d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d76:	2b15      	cmp	r3, #21
 8005d78:	d8f6      	bhi.n	8005d68 <_printf_i+0x28>
 8005d7a:	a001      	add	r0, pc, #4	; (adr r0, 8005d80 <_printf_i+0x40>)
 8005d7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005ded 	.word	0x08005ded
 8005d88:	08005d69 	.word	0x08005d69
 8005d8c:	08005d69 	.word	0x08005d69
 8005d90:	08005d69 	.word	0x08005d69
 8005d94:	08005d69 	.word	0x08005d69
 8005d98:	08005ded 	.word	0x08005ded
 8005d9c:	08005d69 	.word	0x08005d69
 8005da0:	08005d69 	.word	0x08005d69
 8005da4:	08005d69 	.word	0x08005d69
 8005da8:	08005d69 	.word	0x08005d69
 8005dac:	08005efb 	.word	0x08005efb
 8005db0:	08005e1d 	.word	0x08005e1d
 8005db4:	08005edd 	.word	0x08005edd
 8005db8:	08005d69 	.word	0x08005d69
 8005dbc:	08005d69 	.word	0x08005d69
 8005dc0:	08005f1d 	.word	0x08005f1d
 8005dc4:	08005d69 	.word	0x08005d69
 8005dc8:	08005e1d 	.word	0x08005e1d
 8005dcc:	08005d69 	.word	0x08005d69
 8005dd0:	08005d69 	.word	0x08005d69
 8005dd4:	08005ee5 	.word	0x08005ee5
 8005dd8:	680b      	ldr	r3, [r1, #0]
 8005dda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	600a      	str	r2, [r1, #0]
 8005de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0a4      	b.n	8005f36 <_printf_i+0x1f6>
 8005dec:	6825      	ldr	r5, [r4, #0]
 8005dee:	6808      	ldr	r0, [r1, #0]
 8005df0:	062e      	lsls	r6, r5, #24
 8005df2:	f100 0304 	add.w	r3, r0, #4
 8005df6:	d50a      	bpl.n	8005e0e <_printf_i+0xce>
 8005df8:	6805      	ldr	r5, [r0, #0]
 8005dfa:	600b      	str	r3, [r1, #0]
 8005dfc:	2d00      	cmp	r5, #0
 8005dfe:	da03      	bge.n	8005e08 <_printf_i+0xc8>
 8005e00:	232d      	movs	r3, #45	; 0x2d
 8005e02:	426d      	negs	r5, r5
 8005e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e08:	230a      	movs	r3, #10
 8005e0a:	485e      	ldr	r0, [pc, #376]	; (8005f84 <_printf_i+0x244>)
 8005e0c:	e019      	b.n	8005e42 <_printf_i+0x102>
 8005e0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e12:	6805      	ldr	r5, [r0, #0]
 8005e14:	600b      	str	r3, [r1, #0]
 8005e16:	bf18      	it	ne
 8005e18:	b22d      	sxthne	r5, r5
 8005e1a:	e7ef      	b.n	8005dfc <_printf_i+0xbc>
 8005e1c:	680b      	ldr	r3, [r1, #0]
 8005e1e:	6825      	ldr	r5, [r4, #0]
 8005e20:	1d18      	adds	r0, r3, #4
 8005e22:	6008      	str	r0, [r1, #0]
 8005e24:	0628      	lsls	r0, r5, #24
 8005e26:	d501      	bpl.n	8005e2c <_printf_i+0xec>
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <_printf_i+0xf2>
 8005e2c:	0669      	lsls	r1, r5, #25
 8005e2e:	d5fb      	bpl.n	8005e28 <_printf_i+0xe8>
 8005e30:	881d      	ldrh	r5, [r3, #0]
 8005e32:	2f6f      	cmp	r7, #111	; 0x6f
 8005e34:	bf0c      	ite	eq
 8005e36:	2308      	moveq	r3, #8
 8005e38:	230a      	movne	r3, #10
 8005e3a:	4852      	ldr	r0, [pc, #328]	; (8005f84 <_printf_i+0x244>)
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e42:	6866      	ldr	r6, [r4, #4]
 8005e44:	2e00      	cmp	r6, #0
 8005e46:	bfa8      	it	ge
 8005e48:	6821      	ldrge	r1, [r4, #0]
 8005e4a:	60a6      	str	r6, [r4, #8]
 8005e4c:	bfa4      	itt	ge
 8005e4e:	f021 0104 	bicge.w	r1, r1, #4
 8005e52:	6021      	strge	r1, [r4, #0]
 8005e54:	b90d      	cbnz	r5, 8005e5a <_printf_i+0x11a>
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d04d      	beq.n	8005ef6 <_printf_i+0x1b6>
 8005e5a:	4616      	mov	r6, r2
 8005e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e60:	fb03 5711 	mls	r7, r3, r1, r5
 8005e64:	5dc7      	ldrb	r7, [r0, r7]
 8005e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e6a:	462f      	mov	r7, r5
 8005e6c:	42bb      	cmp	r3, r7
 8005e6e:	460d      	mov	r5, r1
 8005e70:	d9f4      	bls.n	8005e5c <_printf_i+0x11c>
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d10b      	bne.n	8005e8e <_printf_i+0x14e>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07df      	lsls	r7, r3, #31
 8005e7a:	d508      	bpl.n	8005e8e <_printf_i+0x14e>
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	6861      	ldr	r1, [r4, #4]
 8005e80:	4299      	cmp	r1, r3
 8005e82:	bfde      	ittt	le
 8005e84:	2330      	movle	r3, #48	; 0x30
 8005e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e8e:	1b92      	subs	r2, r2, r6
 8005e90:	6122      	str	r2, [r4, #16]
 8005e92:	464b      	mov	r3, r9
 8005e94:	4621      	mov	r1, r4
 8005e96:	4640      	mov	r0, r8
 8005e98:	f8cd a000 	str.w	sl, [sp]
 8005e9c:	aa03      	add	r2, sp, #12
 8005e9e:	f7ff fedf 	bl	8005c60 <_printf_common>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d14c      	bne.n	8005f40 <_printf_i+0x200>
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	b004      	add	sp, #16
 8005eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb0:	4834      	ldr	r0, [pc, #208]	; (8005f84 <_printf_i+0x244>)
 8005eb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005eb6:	680e      	ldr	r6, [r1, #0]
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ebe:	061f      	lsls	r7, r3, #24
 8005ec0:	600e      	str	r6, [r1, #0]
 8005ec2:	d514      	bpl.n	8005eee <_printf_i+0x1ae>
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	bf44      	itt	mi
 8005ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ecc:	6023      	strmi	r3, [r4, #0]
 8005ece:	b91d      	cbnz	r5, 8005ed8 <_printf_i+0x198>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f023 0320 	bic.w	r3, r3, #32
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	2310      	movs	r3, #16
 8005eda:	e7af      	b.n	8005e3c <_printf_i+0xfc>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f043 0320 	orr.w	r3, r3, #32
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2378      	movs	r3, #120	; 0x78
 8005ee6:	4828      	ldr	r0, [pc, #160]	; (8005f88 <_printf_i+0x248>)
 8005ee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eec:	e7e3      	b.n	8005eb6 <_printf_i+0x176>
 8005eee:	065e      	lsls	r6, r3, #25
 8005ef0:	bf48      	it	mi
 8005ef2:	b2ad      	uxthmi	r5, r5
 8005ef4:	e7e6      	b.n	8005ec4 <_printf_i+0x184>
 8005ef6:	4616      	mov	r6, r2
 8005ef8:	e7bb      	b.n	8005e72 <_printf_i+0x132>
 8005efa:	680b      	ldr	r3, [r1, #0]
 8005efc:	6826      	ldr	r6, [r4, #0]
 8005efe:	1d1d      	adds	r5, r3, #4
 8005f00:	6960      	ldr	r0, [r4, #20]
 8005f02:	600d      	str	r5, [r1, #0]
 8005f04:	0635      	lsls	r5, r6, #24
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	d501      	bpl.n	8005f0e <_printf_i+0x1ce>
 8005f0a:	6018      	str	r0, [r3, #0]
 8005f0c:	e002      	b.n	8005f14 <_printf_i+0x1d4>
 8005f0e:	0671      	lsls	r1, r6, #25
 8005f10:	d5fb      	bpl.n	8005f0a <_printf_i+0x1ca>
 8005f12:	8018      	strh	r0, [r3, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	4616      	mov	r6, r2
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	e7ba      	b.n	8005e92 <_printf_i+0x152>
 8005f1c:	680b      	ldr	r3, [r1, #0]
 8005f1e:	1d1a      	adds	r2, r3, #4
 8005f20:	600a      	str	r2, [r1, #0]
 8005f22:	681e      	ldr	r6, [r3, #0]
 8005f24:	2100      	movs	r1, #0
 8005f26:	4630      	mov	r0, r6
 8005f28:	6862      	ldr	r2, [r4, #4]
 8005f2a:	f000 f82f 	bl	8005f8c <memchr>
 8005f2e:	b108      	cbz	r0, 8005f34 <_printf_i+0x1f4>
 8005f30:	1b80      	subs	r0, r0, r6
 8005f32:	6060      	str	r0, [r4, #4]
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f3e:	e7a8      	b.n	8005e92 <_printf_i+0x152>
 8005f40:	4632      	mov	r2, r6
 8005f42:	4649      	mov	r1, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	47d0      	blx	sl
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d0ab      	beq.n	8005ea6 <_printf_i+0x166>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	079b      	lsls	r3, r3, #30
 8005f52:	d413      	bmi.n	8005f7c <_printf_i+0x23c>
 8005f54:	68e0      	ldr	r0, [r4, #12]
 8005f56:	9b03      	ldr	r3, [sp, #12]
 8005f58:	4298      	cmp	r0, r3
 8005f5a:	bfb8      	it	lt
 8005f5c:	4618      	movlt	r0, r3
 8005f5e:	e7a4      	b.n	8005eaa <_printf_i+0x16a>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4632      	mov	r2, r6
 8005f64:	4649      	mov	r1, r9
 8005f66:	4640      	mov	r0, r8
 8005f68:	47d0      	blx	sl
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d09b      	beq.n	8005ea6 <_printf_i+0x166>
 8005f6e:	3501      	adds	r5, #1
 8005f70:	68e3      	ldr	r3, [r4, #12]
 8005f72:	9903      	ldr	r1, [sp, #12]
 8005f74:	1a5b      	subs	r3, r3, r1
 8005f76:	42ab      	cmp	r3, r5
 8005f78:	dcf2      	bgt.n	8005f60 <_printf_i+0x220>
 8005f7a:	e7eb      	b.n	8005f54 <_printf_i+0x214>
 8005f7c:	2500      	movs	r5, #0
 8005f7e:	f104 0619 	add.w	r6, r4, #25
 8005f82:	e7f5      	b.n	8005f70 <_printf_i+0x230>
 8005f84:	08007199 	.word	0x08007199
 8005f88:	080071aa 	.word	0x080071aa

08005f8c <memchr>:
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	b2c9      	uxtb	r1, r1
 8005f92:	4402      	add	r2, r0
 8005f94:	4293      	cmp	r3, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	d101      	bne.n	8005f9e <memchr+0x12>
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e003      	b.n	8005fa6 <memchr+0x1a>
 8005f9e:	7804      	ldrb	r4, [r0, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	428c      	cmp	r4, r1
 8005fa4:	d1f6      	bne.n	8005f94 <memchr+0x8>
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <memcpy>:
 8005fa8:	440a      	add	r2, r1
 8005faa:	4291      	cmp	r1, r2
 8005fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	4770      	bx	lr
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc0:	d1f9      	bne.n	8005fb6 <memcpy+0xe>
 8005fc2:	bd10      	pop	{r4, pc}

08005fc4 <memmove>:
 8005fc4:	4288      	cmp	r0, r1
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	eb01 0402 	add.w	r4, r1, r2
 8005fcc:	d902      	bls.n	8005fd4 <memmove+0x10>
 8005fce:	4284      	cmp	r4, r0
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	d807      	bhi.n	8005fe4 <memmove+0x20>
 8005fd4:	1e43      	subs	r3, r0, #1
 8005fd6:	42a1      	cmp	r1, r4
 8005fd8:	d008      	beq.n	8005fec <memmove+0x28>
 8005fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fe2:	e7f8      	b.n	8005fd6 <memmove+0x12>
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	4402      	add	r2, r0
 8005fe8:	428a      	cmp	r2, r1
 8005fea:	d100      	bne.n	8005fee <memmove+0x2a>
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ff6:	e7f7      	b.n	8005fe8 <memmove+0x24>

08005ff8 <_free_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4605      	mov	r5, r0
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d043      	beq.n	8006088 <_free_r+0x90>
 8006000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006004:	1f0c      	subs	r4, r1, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfb8      	it	lt
 800600a:	18e4      	addlt	r4, r4, r3
 800600c:	f000 f8d0 	bl	80061b0 <__malloc_lock>
 8006010:	4a1e      	ldr	r2, [pc, #120]	; (800608c <_free_r+0x94>)
 8006012:	6813      	ldr	r3, [r2, #0]
 8006014:	4610      	mov	r0, r2
 8006016:	b933      	cbnz	r3, 8006026 <_free_r+0x2e>
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	6014      	str	r4, [r2, #0]
 800601c:	4628      	mov	r0, r5
 800601e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006022:	f000 b8cb 	b.w	80061bc <__malloc_unlock>
 8006026:	42a3      	cmp	r3, r4
 8006028:	d90a      	bls.n	8006040 <_free_r+0x48>
 800602a:	6821      	ldr	r1, [r4, #0]
 800602c:	1862      	adds	r2, r4, r1
 800602e:	4293      	cmp	r3, r2
 8006030:	bf01      	itttt	eq
 8006032:	681a      	ldreq	r2, [r3, #0]
 8006034:	685b      	ldreq	r3, [r3, #4]
 8006036:	1852      	addeq	r2, r2, r1
 8006038:	6022      	streq	r2, [r4, #0]
 800603a:	6063      	str	r3, [r4, #4]
 800603c:	6004      	str	r4, [r0, #0]
 800603e:	e7ed      	b.n	800601c <_free_r+0x24>
 8006040:	461a      	mov	r2, r3
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	b10b      	cbz	r3, 800604a <_free_r+0x52>
 8006046:	42a3      	cmp	r3, r4
 8006048:	d9fa      	bls.n	8006040 <_free_r+0x48>
 800604a:	6811      	ldr	r1, [r2, #0]
 800604c:	1850      	adds	r0, r2, r1
 800604e:	42a0      	cmp	r0, r4
 8006050:	d10b      	bne.n	800606a <_free_r+0x72>
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	4401      	add	r1, r0
 8006056:	1850      	adds	r0, r2, r1
 8006058:	4283      	cmp	r3, r0
 800605a:	6011      	str	r1, [r2, #0]
 800605c:	d1de      	bne.n	800601c <_free_r+0x24>
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4401      	add	r1, r0
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	6053      	str	r3, [r2, #4]
 8006068:	e7d8      	b.n	800601c <_free_r+0x24>
 800606a:	d902      	bls.n	8006072 <_free_r+0x7a>
 800606c:	230c      	movs	r3, #12
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	e7d4      	b.n	800601c <_free_r+0x24>
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	1821      	adds	r1, r4, r0
 8006076:	428b      	cmp	r3, r1
 8006078:	bf01      	itttt	eq
 800607a:	6819      	ldreq	r1, [r3, #0]
 800607c:	685b      	ldreq	r3, [r3, #4]
 800607e:	1809      	addeq	r1, r1, r0
 8006080:	6021      	streq	r1, [r4, #0]
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	6054      	str	r4, [r2, #4]
 8006086:	e7c9      	b.n	800601c <_free_r+0x24>
 8006088:	bd38      	pop	{r3, r4, r5, pc}
 800608a:	bf00      	nop
 800608c:	20000518 	.word	0x20000518

08006090 <_malloc_r>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	1ccd      	adds	r5, r1, #3
 8006094:	f025 0503 	bic.w	r5, r5, #3
 8006098:	3508      	adds	r5, #8
 800609a:	2d0c      	cmp	r5, #12
 800609c:	bf38      	it	cc
 800609e:	250c      	movcc	r5, #12
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	4606      	mov	r6, r0
 80060a4:	db01      	blt.n	80060aa <_malloc_r+0x1a>
 80060a6:	42a9      	cmp	r1, r5
 80060a8:	d903      	bls.n	80060b2 <_malloc_r+0x22>
 80060aa:	230c      	movs	r3, #12
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	2000      	movs	r0, #0
 80060b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b2:	f000 f87d 	bl	80061b0 <__malloc_lock>
 80060b6:	4921      	ldr	r1, [pc, #132]	; (800613c <_malloc_r+0xac>)
 80060b8:	680a      	ldr	r2, [r1, #0]
 80060ba:	4614      	mov	r4, r2
 80060bc:	b99c      	cbnz	r4, 80060e6 <_malloc_r+0x56>
 80060be:	4f20      	ldr	r7, [pc, #128]	; (8006140 <_malloc_r+0xb0>)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	b923      	cbnz	r3, 80060ce <_malloc_r+0x3e>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4630      	mov	r0, r6
 80060c8:	f000 f862 	bl	8006190 <_sbrk_r>
 80060cc:	6038      	str	r0, [r7, #0]
 80060ce:	4629      	mov	r1, r5
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f85d 	bl	8006190 <_sbrk_r>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	d123      	bne.n	8006122 <_malloc_r+0x92>
 80060da:	230c      	movs	r3, #12
 80060dc:	4630      	mov	r0, r6
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	f000 f86c 	bl	80061bc <__malloc_unlock>
 80060e4:	e7e3      	b.n	80060ae <_malloc_r+0x1e>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	1b5b      	subs	r3, r3, r5
 80060ea:	d417      	bmi.n	800611c <_malloc_r+0x8c>
 80060ec:	2b0b      	cmp	r3, #11
 80060ee:	d903      	bls.n	80060f8 <_malloc_r+0x68>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	441c      	add	r4, r3
 80060f4:	6025      	str	r5, [r4, #0]
 80060f6:	e004      	b.n	8006102 <_malloc_r+0x72>
 80060f8:	6863      	ldr	r3, [r4, #4]
 80060fa:	42a2      	cmp	r2, r4
 80060fc:	bf0c      	ite	eq
 80060fe:	600b      	streq	r3, [r1, #0]
 8006100:	6053      	strne	r3, [r2, #4]
 8006102:	4630      	mov	r0, r6
 8006104:	f000 f85a 	bl	80061bc <__malloc_unlock>
 8006108:	f104 000b 	add.w	r0, r4, #11
 800610c:	1d23      	adds	r3, r4, #4
 800610e:	f020 0007 	bic.w	r0, r0, #7
 8006112:	1ac2      	subs	r2, r0, r3
 8006114:	d0cc      	beq.n	80060b0 <_malloc_r+0x20>
 8006116:	1a1b      	subs	r3, r3, r0
 8006118:	50a3      	str	r3, [r4, r2]
 800611a:	e7c9      	b.n	80060b0 <_malloc_r+0x20>
 800611c:	4622      	mov	r2, r4
 800611e:	6864      	ldr	r4, [r4, #4]
 8006120:	e7cc      	b.n	80060bc <_malloc_r+0x2c>
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d0e3      	beq.n	80060f4 <_malloc_r+0x64>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f82e 	bl	8006190 <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d1dd      	bne.n	80060f4 <_malloc_r+0x64>
 8006138:	e7cf      	b.n	80060da <_malloc_r+0x4a>
 800613a:	bf00      	nop
 800613c:	20000518 	.word	0x20000518
 8006140:	2000051c 	.word	0x2000051c

08006144 <_realloc_r>:
 8006144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006146:	4607      	mov	r7, r0
 8006148:	4614      	mov	r4, r2
 800614a:	460e      	mov	r6, r1
 800614c:	b921      	cbnz	r1, 8006158 <_realloc_r+0x14>
 800614e:	4611      	mov	r1, r2
 8006150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006154:	f7ff bf9c 	b.w	8006090 <_malloc_r>
 8006158:	b922      	cbnz	r2, 8006164 <_realloc_r+0x20>
 800615a:	f7ff ff4d 	bl	8005ff8 <_free_r>
 800615e:	4625      	mov	r5, r4
 8006160:	4628      	mov	r0, r5
 8006162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006164:	f000 f830 	bl	80061c8 <_malloc_usable_size_r>
 8006168:	42a0      	cmp	r0, r4
 800616a:	d20f      	bcs.n	800618c <_realloc_r+0x48>
 800616c:	4621      	mov	r1, r4
 800616e:	4638      	mov	r0, r7
 8006170:	f7ff ff8e 	bl	8006090 <_malloc_r>
 8006174:	4605      	mov	r5, r0
 8006176:	2800      	cmp	r0, #0
 8006178:	d0f2      	beq.n	8006160 <_realloc_r+0x1c>
 800617a:	4631      	mov	r1, r6
 800617c:	4622      	mov	r2, r4
 800617e:	f7ff ff13 	bl	8005fa8 <memcpy>
 8006182:	4631      	mov	r1, r6
 8006184:	4638      	mov	r0, r7
 8006186:	f7ff ff37 	bl	8005ff8 <_free_r>
 800618a:	e7e9      	b.n	8006160 <_realloc_r+0x1c>
 800618c:	4635      	mov	r5, r6
 800618e:	e7e7      	b.n	8006160 <_realloc_r+0x1c>

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	2300      	movs	r3, #0
 8006194:	4d05      	ldr	r5, [pc, #20]	; (80061ac <_sbrk_r+0x1c>)
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fa fb7a 	bl	8000894 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20000618 	.word	0x20000618

080061b0 <__malloc_lock>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__malloc_lock+0x8>)
 80061b2:	f000 b811 	b.w	80061d8 <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	2000061c 	.word	0x2000061c

080061bc <__malloc_unlock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_unlock+0x8>)
 80061be:	f000 b80c 	b.w	80061da <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	2000061c 	.word	0x2000061c

080061c8 <_malloc_usable_size_r>:
 80061c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061cc:	1f18      	subs	r0, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfbc      	itt	lt
 80061d2:	580b      	ldrlt	r3, [r1, r0]
 80061d4:	18c0      	addlt	r0, r0, r3
 80061d6:	4770      	bx	lr

080061d8 <__retarget_lock_acquire_recursive>:
 80061d8:	4770      	bx	lr

080061da <__retarget_lock_release_recursive>:
 80061da:	4770      	bx	lr

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
