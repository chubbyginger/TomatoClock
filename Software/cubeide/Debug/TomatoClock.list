
TomatoClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d28  08006d28  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d28  08006d28  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d28  08006d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000070  08006da0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08006da0  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007f6bb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebd  00000000  00000000  0009f754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003170  00000000  00000000  000a3618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f90  00000000  00000000  000a6788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e14  00000000  00000000  000a9718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024083  00000000  00000000  000c352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3158  00000000  00000000  000e75af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dbdc  00000000  00000000  0018a75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d58 	.word	0x08005d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005d58 	.word	0x08005d58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb77 	bl	8000844 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Had better delay for some time here.
  HAL_Delay(100);
 8000156:	2064      	movs	r0, #100	; 0x64
 8000158:	f000 fbd6 	bl	8000908 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015c:	f000 f830 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000160:	f000 f97a 	bl	8000458 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000164:	f000 f88a 	bl	800027c <MX_I2C1_Init>
  MX_RTC_Init();
 8000168:	f000 f8b6 	bl	80002d8 <MX_RTC_Init>
  MX_TIM2_Init();
 800016c:	f000 f8fe 	bl	800036c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Show the running status.
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000176:	480f      	ldr	r0, [pc, #60]	; (80001b4 <main+0x68>)
 8000178:	f000 fe52 	bl	8000e20 <HAL_GPIO_WritePin>

  // Initialize u8g2
  u8g2_t u8g2;
  u8g2Init(&u8g2);
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	4618      	mov	r0, r3
 8000180:	f003 fbd0 	bl	8003924 <u8g2Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_latin);
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	490c      	ldr	r1, [pc, #48]	; (80001b8 <main+0x6c>)
 8000188:	4618      	mov	r0, r3
 800018a:	f004 fa49 	bl	8004620 <u8g2_SetFont>
	u8g2_ClearBuffer(&u8g2);
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	4618      	mov	r0, r3
 8000192:	f003 fc09 	bl	80039a8 <u8g2_ClearBuffer>
	u8g2_DrawStr(&u8g2, 11, 44, getTime(&hrtc));
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <main+0x70>)
 8000198:	f003 fbe2 	bl	8003960 <getTime>
 800019c:	4603      	mov	r3, r0
 800019e:	1d38      	adds	r0, r7, #4
 80001a0:	222c      	movs	r2, #44	; 0x2c
 80001a2:	210b      	movs	r1, #11
 80001a4:	f004 f99e 	bl	80044e4 <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	4618      	mov	r0, r3
 80001ac:	f003 fc6f 	bl	8003a8e <u8g2_SendBuffer>
  {
 80001b0:	e7e8      	b.n	8000184 <main+0x38>
 80001b2:	bf00      	nop
 80001b4:	40011000 	.word	0x40011000
 80001b8:	08005db4 	.word	0x08005db4
 80001bc:	20000520 	.word	0x20000520

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b094      	sub	sp, #80	; 0x50
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f005 f96c 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80001f0:	2309      	movs	r3, #9
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000210:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fa6e 	bl	80016fc <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000226:	f000 f99d 	bl	8000564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fcd8 	bl	8001bfc <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000252:	f000 f987 	bl	8000564 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000256:	2301      	movs	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800025a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800025e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fe64 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800026e:	f000 f979 	bl	8000564 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	; 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_I2C1_Init+0x50>)
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <MX_I2C1_Init+0x54>)
 8000284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_I2C1_Init+0x50>)
 8000288:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_I2C1_Init+0x58>)
 800028a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_I2C1_Init+0x50>)
 800029a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_I2C1_Init+0x50>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_I2C1_Init+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_I2C1_Init+0x50>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_I2C1_Init+0x50>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_I2C1_Init+0x50>)
 80002ba:	f000 fdc9 	bl	8000e50 <HAL_I2C_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c4:	f000 f94e 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000534 	.word	0x20000534
 80002d0:	40005400 	.word	0x40005400
 80002d4:	000186a0 	.word	0x000186a0

080002d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	460a      	mov	r2, r1
 80002e4:	801a      	strh	r2, [r3, #0]
 80002e6:	460a      	mov	r2, r1
 80002e8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002ea:	2300      	movs	r3, #0
 80002ec:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002ee:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_RTC_Init+0x8c>)
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <MX_RTC_Init+0x90>)
 80002f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_RTC_Init+0x8c>)
 80002f6:	f04f 32ff 	mov.w	r2, #4294967295
 80002fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002fc:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_RTC_Init+0x8c>)
 80002fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000302:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000304:	4817      	ldr	r0, [pc, #92]	; (8000364 <MX_RTC_Init+0x8c>)
 8000306:	f001 ff8d 	bl	8002224 <HAL_RTC_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000310:	f000 f928 	bl	8000564 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8000314:	2321      	movs	r3, #33	; 0x21
 8000316:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 8000318:	2345      	movs	r3, #69	; 0x45
 800031a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800031c:	2300      	movs	r3, #0
 800031e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2201      	movs	r2, #1
 8000324:	4619      	mov	r1, r3
 8000326:	480f      	ldr	r0, [pc, #60]	; (8000364 <MX_RTC_Init+0x8c>)
 8000328:	f002 f812 	bl	8002350 <HAL_RTC_SetTime>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000332:	f000 f917 	bl	8000564 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000336:	2300      	movs	r3, #0
 8000338:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800033a:	2301      	movs	r3, #1
 800033c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 800033e:	2316      	movs	r3, #22
 8000340:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 8000342:	2322      	movs	r3, #34	; 0x22
 8000344:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000346:	463b      	mov	r3, r7
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_RTC_Init+0x8c>)
 800034e:	f002 f96f 	bl	8002630 <HAL_RTC_SetDate>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000358:	f000 f904 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000520 	.word	0x20000520
 8000368:	40002800 	.word	0x40002800

0800036c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08e      	sub	sp, #56	; 0x38
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	f107 0320 	add.w	r3, r7, #32
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
 8000398:	615a      	str	r2, [r3, #20]
 800039a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_TIM2_Init+0xe8>)
 800039e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003a4:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c4:	4823      	ldr	r0, [pc, #140]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003c6:	f002 fc8b 	bl	8002ce0 <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003d0:	f000 f8c8 	bl	8000564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	4619      	mov	r1, r3
 80003e0:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003e2:	f002 fde3 	bl	8002fac <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003ec:	f000 f8ba 	bl	8000564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <MX_TIM2_Init+0xe8>)
 80003f2:	f002 fcc4 	bl	8002d7e <HAL_TIM_PWM_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003fc:	f000 f8b2 	bl	8000564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000408:	f107 0320 	add.w	r3, r7, #32
 800040c:	4619      	mov	r1, r3
 800040e:	4811      	ldr	r0, [pc, #68]	; (8000454 <MX_TIM2_Init+0xe8>)
 8000410:	f003 f910 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800041a:	f000 f8a3 	bl	8000564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041e:	2360      	movs	r3, #96	; 0x60
 8000420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2204      	movs	r2, #4
 8000432:	4619      	mov	r1, r3
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <MX_TIM2_Init+0xe8>)
 8000436:	f002 fcfb 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000440:	f000 f890 	bl	8000564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <MX_TIM2_Init+0xe8>)
 8000446:	f000 f943 	bl	80006d0 <HAL_TIM_MspPostInit>

}
 800044a:	bf00      	nop
 800044c:	3738      	adds	r7, #56	; 0x38
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000588 	.word	0x20000588

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	4b39      	ldr	r3, [pc, #228]	; (8000554 <MX_GPIO_Init+0xfc>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a38      	ldr	r2, [pc, #224]	; (8000554 <MX_GPIO_Init+0xfc>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b36      	ldr	r3, [pc, #216]	; (8000554 <MX_GPIO_Init+0xfc>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <MX_GPIO_Init+0xfc>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a32      	ldr	r2, [pc, #200]	; (8000554 <MX_GPIO_Init+0xfc>)
 800048a:	f043 0320 	orr.w	r3, r3, #32
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b30      	ldr	r3, [pc, #192]	; (8000554 <MX_GPIO_Init+0xfc>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0320 	and.w	r3, r3, #32
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <MX_GPIO_Init+0xfc>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a2c      	ldr	r2, [pc, #176]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	4b27      	ldr	r3, [pc, #156]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a26      	ldr	r2, [pc, #152]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b24      	ldr	r3, [pc, #144]	; (8000554 <MX_GPIO_Init+0xfc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0308 	and.w	r3, r3, #8
 80004c8:	603b      	str	r3, [r7, #0]
 80004ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	4821      	ldr	r0, [pc, #132]	; (8000558 <MX_GPIO_Init+0x100>)
 80004d4:	f000 fca4 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	481f      	ldr	r0, [pc, #124]	; (800055c <MX_GPIO_Init+0x104>)
 80004de:	f000 fc9f 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4817      	ldr	r0, [pc, #92]	; (8000558 <MX_GPIO_Init+0x100>)
 80004fc:	f000 fb0c 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000500:	2370      	movs	r3, #112	; 0x70
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4812      	ldr	r0, [pc, #72]	; (800055c <MX_GPIO_Init+0x104>)
 8000514:	f000 fb00 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2302      	movs	r3, #2
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MX_GPIO_Init+0x104>)
 8000530:	f000 faf2 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000534:	2301      	movs	r3, #1
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_GPIO_Init+0x108>)
 8000548:	f000 fae6 	bl	8000b18 <HAL_GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	40011000 	.word	0x40011000
 800055c:	40010800 	.word	0x40010800
 8000560:	40010c00 	.word	0x40010c00

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>
	...

08000570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <HAL_MspInit+0x5c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_MspInit+0x5c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_MspInit+0x5c>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x5c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_MspInit+0x60>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_MspInit+0x60>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010000 	.word	0x40010000

080005d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <HAL_I2C_MspInit+0x70>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d123      	bne.n	800063c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_I2C_MspInit+0x74>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <HAL_I2C_MspInit+0x74>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800060c:	23c0      	movs	r3, #192	; 0xc0
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000610:	2312      	movs	r3, #18
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_I2C_MspInit+0x78>)
 8000620:	f000 fa7a 	bl	8000b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_I2C_MspInit+0x74>)
 800062a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800062e:	61d3      	str	r3, [r2, #28]
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_I2C_MspInit+0x74>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010c00 	.word	0x40010c00

08000650 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <HAL_RTC_MspInit+0x3c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d110      	bne.n	8000684 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000662:	f001 f83f 	bl	80016e4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_RTC_MspInit+0x40>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <HAL_RTC_MspInit+0x40>)
 800066c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_RTC_MspInit+0x40>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_RTC_MspInit+0x44>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40002800 	.word	0x40002800
 8000690:	40021000 	.word	0x40021000
 8000694:	4242043c 	.word	0x4242043c

08000698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a8:	d10b      	bne.n	80006c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_TIM_Base_MspInit+0x34>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_TIM_Base_MspInit+0x34>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_TIM_Base_MspInit+0x34>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ee:	d117      	bne.n	8000720 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_TIM_MspPostInit+0x58>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <HAL_TIM_MspPostInit+0x58>)
 80006f6:	f043 0304 	orr.w	r3, r3, #4
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_TIM_MspPostInit+0x58>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <HAL_TIM_MspPostInit+0x5c>)
 800071c:	f000 f9fc 	bl	8000b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f8ab 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f004 fe52 	bl	8005458 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	200005e8 	.word	0x200005e8

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffe5 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f004 fe1f 	bl	8005464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fc91 	bl	800014c <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000834:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8000838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800083c:	200005e4 	.word	0x200005e4

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f92b 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe86 	bl	8000570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f935 	bl	8000afe <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f90b 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	200005d0 	.word	0x200005d0

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	200005d0 	.word	0x200005d0

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffe0 	bl	80008f4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff90 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff49 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5e 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff90 	bl	8000a08 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb0 	bl	8000a6c <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e169      	b.n	8000e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8158 	bne.w	8000dfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4a9a      	ldr	r2, [pc, #616]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d05e      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b54:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d875      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a98      	ldr	r2, [pc, #608]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d058      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b60:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d86f      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b66:	4a96      	ldr	r2, [pc, #600]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d052      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d869      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b72:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d04c      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b78:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d863      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a92      	ldr	r2, [pc, #584]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d046      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b84:	4a90      	ldr	r2, [pc, #576]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d85d      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d82a      	bhi.n	8000be4 <HAL_GPIO_Init+0xcc>
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d859      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <HAL_GPIO_Init+0x80>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000bed 	.word	0x08000bed
 8000ba0:	08000bff 	.word	0x08000bff
 8000ba4:	08000c41 	.word	0x08000c41
 8000ba8:	08000c47 	.word	0x08000c47
 8000bac:	08000c47 	.word	0x08000c47
 8000bb0:	08000c47 	.word	0x08000c47
 8000bb4:	08000c47 	.word	0x08000c47
 8000bb8:	08000c47 	.word	0x08000c47
 8000bbc:	08000c47 	.word	0x08000c47
 8000bc0:	08000c47 	.word	0x08000c47
 8000bc4:	08000c47 	.word	0x08000c47
 8000bc8:	08000c47 	.word	0x08000c47
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c47 	.word	0x08000c47
 8000bd4:	08000c47 	.word	0x08000c47
 8000bd8:	08000c47 	.word	0x08000c47
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <HAL_GPIO_Init+0x2b4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e029      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e024      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01f      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e01a      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e013      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e009      	b.n	8000c48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          break;
 8000c46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	; 0xff
 8000c4c:	d801      	bhi.n	8000c52 <HAL_GPIO_Init+0x13a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	e001      	b.n	8000c56 <HAL_GPIO_Init+0x13e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	; 0xff
 8000c5c:	d802      	bhi.n	8000c64 <HAL_GPIO_Init+0x14c>
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x152>
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	3b08      	subs	r3, #8
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	210f      	movs	r1, #15
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	6a39      	ldr	r1, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c98:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb0:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a40      	ldr	r2, [pc, #256]	; (8000dd8 <HAL_GPIO_Init+0x2c0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d013      	beq.n	8000d04 <HAL_GPIO_Init+0x1ec>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3f      	ldr	r2, [pc, #252]	; (8000ddc <HAL_GPIO_Init+0x2c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d00d      	beq.n	8000d00 <HAL_GPIO_Init+0x1e8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d007      	beq.n	8000cfc <HAL_GPIO_Init+0x1e4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3d      	ldr	r2, [pc, #244]	; (8000de4 <HAL_GPIO_Init+0x2cc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d101      	bne.n	8000cf8 <HAL_GPIO_Init+0x1e0>
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d04:	2300      	movs	r3, #0
 8000d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d16:	492f      	ldr	r1, [pc, #188]	; (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	492c      	ldr	r1, [pc, #176]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4928      	ldr	r1, [pc, #160]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4922      	ldr	r1, [pc, #136]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	491e      	ldr	r1, [pc, #120]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4918      	ldr	r1, [pc, #96]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4914      	ldr	r1, [pc, #80]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d021      	beq.n	8000dec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	490e      	ldr	r1, [pc, #56]	; (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
 8000db4:	e021      	b.n	8000dfa <HAL_GPIO_Init+0x2e2>
 8000db6:	bf00      	nop
 8000db8:	10320000 	.word	0x10320000
 8000dbc:	10310000 	.word	0x10310000
 8000dc0:	10220000 	.word	0x10220000
 8000dc4:	10210000 	.word	0x10210000
 8000dc8:	10120000 	.word	0x10120000
 8000dcc:	10110000 	.word	0x10110000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4909      	ldr	r1, [pc, #36]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f47f ae8e 	bne.w	8000b2c <HAL_GPIO_Init+0x14>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	372c      	adds	r7, #44	; 0x2c
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40010400 	.word	0x40010400

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e30:	787b      	ldrb	r3, [r7, #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e3c:	e003      	b.n	8000e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	041a      	lsls	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e12b      	b.n	80010ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d106      	bne.n	8000e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fbac 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2224      	movs	r2, #36	; 0x24
 8000e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eb4:	f000 fff6 	bl	8001ea4 <HAL_RCC_GetPCLK1Freq>
 8000eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a81      	ldr	r2, [pc, #516]	; (80010c4 <HAL_I2C_Init+0x274>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d807      	bhi.n	8000ed4 <HAL_I2C_Init+0x84>
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4a80      	ldr	r2, [pc, #512]	; (80010c8 <HAL_I2C_Init+0x278>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	bf94      	ite	ls
 8000ecc:	2301      	movls	r3, #1
 8000ece:	2300      	movhi	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	e006      	b.n	8000ee2 <HAL_I2C_Init+0x92>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4a7d      	ldr	r2, [pc, #500]	; (80010cc <HAL_I2C_Init+0x27c>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	bf94      	ite	ls
 8000edc:	2301      	movls	r3, #1
 8000ede:	2300      	movhi	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e0e7      	b.n	80010ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4a78      	ldr	r2, [pc, #480]	; (80010d0 <HAL_I2C_Init+0x280>)
 8000eee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef2:	0c9b      	lsrs	r3, r3, #18
 8000ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a6a      	ldr	r2, [pc, #424]	; (80010c4 <HAL_I2C_Init+0x274>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d802      	bhi.n	8000f24 <HAL_I2C_Init+0xd4>
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3301      	adds	r3, #1
 8000f22:	e009      	b.n	8000f38 <HAL_I2C_Init+0xe8>
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	4a69      	ldr	r2, [pc, #420]	; (80010d4 <HAL_I2C_Init+0x284>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	099b      	lsrs	r3, r3, #6
 8000f36:	3301      	adds	r3, #1
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	495c      	ldr	r1, [pc, #368]	; (80010c4 <HAL_I2C_Init+0x274>)
 8000f54:	428b      	cmp	r3, r1
 8000f56:	d819      	bhi.n	8000f8c <HAL_I2C_Init+0x13c>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1e59      	subs	r1, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f66:	1c59      	adds	r1, r3, #1
 8000f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f6c:	400b      	ands	r3, r1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00a      	beq.n	8000f88 <HAL_I2C_Init+0x138>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1e59      	subs	r1, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f80:	3301      	adds	r3, #1
 8000f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f86:	e051      	b.n	800102c <HAL_I2C_Init+0x1dc>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	e04f      	b.n	800102c <HAL_I2C_Init+0x1dc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d111      	bne.n	8000fb8 <HAL_I2C_Init+0x168>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1e58      	subs	r0, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	440b      	add	r3, r1
 8000fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf0c      	ite	eq
 8000fb0:	2301      	moveq	r3, #1
 8000fb2:	2300      	movne	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e012      	b.n	8000fde <HAL_I2C_Init+0x18e>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1e58      	subs	r0, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6859      	ldr	r1, [r3, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	0099      	lsls	r1, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_I2C_Init+0x196>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e022      	b.n	800102c <HAL_I2C_Init+0x1dc>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10e      	bne.n	800100c <HAL_I2C_Init+0x1bc>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1e58      	subs	r0, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	440b      	add	r3, r1
 8000ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001000:	3301      	adds	r3, #1
 8001002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100a:	e00f      	b.n	800102c <HAL_I2C_Init+0x1dc>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e58      	subs	r0, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6859      	ldr	r1, [r3, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	0099      	lsls	r1, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001022:	3301      	adds	r3, #1
 8001024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	6809      	ldr	r1, [r1, #0]
 8001030:	4313      	orrs	r3, r2
 8001032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69da      	ldr	r2, [r3, #28]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800105a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6911      	ldr	r1, [r2, #16]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68d2      	ldr	r2, [r2, #12]
 8001066:	4311      	orrs	r1, r2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	430b      	orrs	r3, r1
 800106e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	000186a0 	.word	0x000186a0
 80010c8:	001e847f 	.word	0x001e847f
 80010cc:	003d08ff 	.word	0x003d08ff
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	10624dd3 	.word	0x10624dd3

080010d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af02      	add	r7, sp, #8
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	817b      	strh	r3, [r7, #10]
 80010e8:	4613      	mov	r3, r2
 80010ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fc02 	bl	80008f4 <HAL_GetTick>
 80010f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b20      	cmp	r3, #32
 80010fc:	f040 80e0 	bne.w	80012c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2319      	movs	r3, #25
 8001106:	2201      	movs	r2, #1
 8001108:	4970      	ldr	r1, [pc, #448]	; (80012cc <HAL_I2C_Master_Transmit+0x1f4>)
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f964 	bl	80013d8 <I2C_WaitOnFlagUntilTimeout>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001116:	2302      	movs	r3, #2
 8001118:	e0d3      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_I2C_Master_Transmit+0x50>
 8001124:	2302      	movs	r3, #2
 8001126:	e0cc      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d007      	beq.n	800114e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0201 	orr.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800115c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2221      	movs	r2, #33	; 0x21
 8001162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2210      	movs	r2, #16
 800116a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	893a      	ldrh	r2, [r7, #8]
 800117e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001190:	8979      	ldrh	r1, [r7, #10]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	6a3a      	ldr	r2, [r7, #32]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f89c 	bl	80012d4 <I2C_MasterRequestWrite>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e08d      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011bc:	e066      	b.n	800128c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	6a39      	ldr	r1, [r7, #32]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f9de 	bl	8001584 <I2C_WaitOnTXEFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00d      	beq.n	80011ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e06b      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001212:	3b01      	subs	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b04      	cmp	r3, #4
 8001226:	d11b      	bne.n	8001260 <HAL_I2C_Master_Transmit+0x188>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122c:	2b00      	cmp	r3, #0
 800122e:	d017      	beq.n	8001260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124a:	b29b      	uxth	r3, r3
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001258:	3b01      	subs	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	6a39      	ldr	r1, [r7, #32]
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f9ce 	bl	8001606 <I2C_WaitOnBTFFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00d      	beq.n	800128c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	2b04      	cmp	r3, #4
 8001276:	d107      	bne.n	8001288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e01a      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	2b00      	cmp	r3, #0
 8001292:	d194      	bne.n	80011be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2220      	movs	r2, #32
 80012a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e000      	b.n	80012c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012c0:	2302      	movs	r3, #2
  }
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	00100002 	.word	0x00100002
 80012d0:	ffff0000 	.word	0xffff0000

080012d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d006      	beq.n	80012fe <I2C_MasterRequestWrite+0x2a>
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d003      	beq.n	80012fe <I2C_MasterRequestWrite+0x2a>
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80012fc:	d108      	bne.n	8001310 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e00b      	b.n	8001328 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	2b12      	cmp	r3, #18
 8001316:	d107      	bne.n	8001328 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f84f 	bl	80013d8 <I2C_WaitOnFlagUntilTimeout>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800134e:	d103      	bne.n	8001358 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e035      	b.n	80013c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001364:	d108      	bne.n	8001378 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001366:	897b      	ldrh	r3, [r7, #10]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	e01b      	b.n	80013b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001378:	897b      	ldrh	r3, [r7, #10]
 800137a:	11db      	asrs	r3, r3, #7
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0306 	and.w	r3, r3, #6
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f063 030f 	orn	r3, r3, #15
 8001388:	b2da      	uxtb	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	490e      	ldr	r1, [pc, #56]	; (80013d0 <I2C_MasterRequestWrite+0xfc>)
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f875 	bl	8001486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e010      	b.n	80013c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013a6:	897b      	ldrh	r3, [r7, #10]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <I2C_MasterRequestWrite+0x100>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f865 	bl	8001486 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	00010008 	.word	0x00010008
 80013d4:	00010002 	.word	0x00010002

080013d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013e8:	e025      	b.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d021      	beq.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013f2:	f7ff fa7f 	bl	80008f4 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d302      	bcc.n	8001408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d116      	bne.n	8001436 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2220      	movs	r2, #32
 8001412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f043 0220 	orr.w	r2, r3, #32
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e023      	b.n	800147e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10d      	bne.n	800145c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4013      	ands	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	e00c      	b.n	8001476 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4013      	ands	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	429a      	cmp	r2, r3
 800147a:	d0b6      	beq.n	80013ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001494:	e051      	b.n	800153a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a4:	d123      	bne.n	80014ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2220      	movs	r2, #32
 80014ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f043 0204 	orr.w	r2, r3, #4
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e046      	b.n	800157c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d021      	beq.n	800153a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f6:	f7ff f9fd 	bl	80008f4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d116      	bne.n	800153a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e020      	b.n	800157c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	0c1b      	lsrs	r3, r3, #16
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10c      	bne.n	800155e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4013      	ands	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf14      	ite	ne
 8001556:	2301      	movne	r3, #1
 8001558:	2300      	moveq	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	e00b      	b.n	8001576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	43da      	mvns	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	4013      	ands	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d18d      	bne.n	8001496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001590:	e02d      	b.n	80015ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f878 	bl	8001688 <I2C_IsAcknowledgeFailed>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e02d      	b.n	80015fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d021      	beq.n	80015ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015aa:	f7ff f9a3 	bl	80008f4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d302      	bcc.n	80015c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d116      	bne.n	80015ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f8:	2b80      	cmp	r3, #128	; 0x80
 80015fa:	d1ca      	bne.n	8001592 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001612:	e02d      	b.n	8001670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f837 	bl	8001688 <I2C_IsAcknowledgeFailed>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e02d      	b.n	8001680 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162a:	d021      	beq.n	8001670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162c:	f7ff f962 	bl	80008f4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d302      	bcc.n	8001642 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e007      	b.n	8001680 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b04      	cmp	r3, #4
 800167c:	d1ca      	bne.n	8001614 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d11b      	bne.n	80016d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f043 0204 	orr.w	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	420e0020 	.word	0x420e0020

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e26c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x12c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e246      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x76>
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xbc>
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a67      	ldr	r2, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff f88c 	bl	80008f4 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f888 	bl	80008f4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1fa      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe4>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f878 	bl	80008f4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f874 	bl	80008f4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1e6      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x10c>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1ba      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4939      	ldr	r1, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f82d 	bl	80008f4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff f829 	bl	80008f4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e19b      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f80c 	bl	80008f4 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff f808 	bl	80008f4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e17a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03a      	beq.n	8001980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7fe ffec 	bl	80008f4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe ffe8 	bl	80008f4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e15a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 fad8 	bl	8001ef4 <RCC_Delay>
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe ffd2 	bl	80008f4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e00f      	b.n	8001974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7fe ffce 	bl	80008f4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d908      	bls.n	8001974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e140      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	42420000 	.word	0x42420000
 8001970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e9      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a6 	beq.w	8001ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b97      	ldr	r3, [pc, #604]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b94      	ldr	r3, [pc, #592]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a8a      	ldr	r2, [pc, #552]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7fe ff8f 	bl	80008f4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7fe ff8b 	bl	80008f4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0fd      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x356>
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7fe ff3f 	bl	80008f4 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7fe ff3b 	bl	80008f4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0ab      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x37e>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe ff29 	bl	80008f4 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe ff25 	bl	80008f4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e095      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a47      	ldr	r2, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8081 	beq.w	8001be6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d146      	bne.n	8001b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe fef9 	bl	80008f4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7fe fef5 	bl	80008f4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e067      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	492d      	ldr	r1, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a19      	ldr	r1, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	430b      	orrs	r3, r1
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fec9 	bl	80008f4 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fec5 	bl	80008f4 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e037      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
 8001b84:	e02f      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe feb2 	bl	80008f4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe feae 	bl	80008f4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e020      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x498>
 8001bb2:	e018      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e013      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42420060 	.word	0x42420060

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fe02 	bl	80008f4 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fdfe 	bl	80008f4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd60 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08005d9c 	.word	0x08005d9c
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b490      	push	{r4, r7}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dd8:	1d3c      	adds	r4, r7, #4
 8001dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de0:	f240 2301 	movw	r3, #513	; 0x201
 8001de4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
 8001e0e:	e02d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e22:	4413      	add	r3, r2
 8001e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c5b      	lsrs	r3, r3, #17
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	fb02 f203 	mul.w	r2, r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e004      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e6e:	623b      	str	r3, [r7, #32]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc90      	pop	{r4, r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	08005d70 	.word	0x08005d70
 8001e84:	40021000 	.word	0x40021000
 8001e88:	007a1200 	.word	0x007a1200
 8001e8c:	003d0900 	.word	0x003d0900

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea8:	f7ff fff2 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08005dac 	.word	0x08005dac

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08005dac 	.word	0x08005dac

08001ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <RCC_Delay+0x34>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <RCC_Delay+0x38>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0a5b      	lsrs	r3, r3, #9
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f10:	bf00      	nop
  }
  while (Delay --);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f9      	bne.n	8001f10 <RCC_Delay+0x1c>
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	10624dd3 	.word	0x10624dd3

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d07d      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4a4b      	ldr	r2, [pc, #300]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	61d3      	str	r3, [r2, #28]
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d118      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a42      	ldr	r2, [pc, #264]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f90:	f7fe fcb0 	bl	80008f4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	e008      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe fcac 	bl	80008f4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e06d      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02e      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d027      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fea:	4a29      	ldr	r2, [pc, #164]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d014      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fc7b 	bl	80008f4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe fc77 	bl	80008f4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e036      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4917      	ldr	r1, [pc, #92]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	4313      	orrs	r3, r2
 8002034:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002046:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	490b      	ldr	r1, [pc, #44]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4904      	ldr	r1, [pc, #16]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420440 	.word	0x42420440

0800209c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b08d      	sub	sp, #52	; 0x34
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020a4:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80020a6:	f107 040c 	add.w	r4, r7, #12
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020b0:	f240 2301 	movw	r3, #513	; 0x201
 80020b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	f200 8091 	bhi.w	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d04c      	beq.n	8002178 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d07c      	beq.n	80021de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80020e4:	e089      	b.n	80021fa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020ec:	4b49      	ldr	r3, [pc, #292]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8082 	beq.w	80021fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	0c9b      	lsrs	r3, r3, #18
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002106:	4413      	add	r3, r2
 8002108:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800210c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	0c5b      	lsrs	r3, r3, #17
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002126:	4413      	add	r3, r2
 8002128:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002138:	4a37      	ldr	r2, [pc, #220]	; (8002218 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002148:	e004      	b.n	8002154 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d102      	bne.n	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002166:	e04a      	b.n	80021fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002176:	e042      	b.n	80021fe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002178:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002188:	d108      	bne.n	800219c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
 800219a:	e01f      	b.n	80021dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a6:	d109      	bne.n	80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80021b4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ba:	e00f      	b.n	80021dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021c6:	d11c      	bne.n	8002202 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d016      	beq.n	8002202 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80021d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021da:	e012      	b.n	8002202 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80021dc:	e011      	b.n	8002202 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80021de:	f7ff fe75 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0b9b      	lsrs	r3, r3, #14
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	3301      	adds	r3, #1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80021f8:	e004      	b.n	8002204 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80021fa:	bf00      	nop
 80021fc:	e002      	b.n	8002204 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80021fe:	bf00      	nop
 8002200:	e000      	b.n	8002204 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002202:	bf00      	nop
    }
  }
  return (frequency);
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002206:	4618      	mov	r0, r3
 8002208:	3734      	adds	r7, #52	; 0x34
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	08005d80 	.word	0x08005d80
 8002214:	40021000 	.word	0x40021000
 8002218:	007a1200 	.word	0x007a1200
 800221c:	003d0900 	.word	0x003d0900
 8002220:	aaaaaaab 	.word	0xaaaaaaab

08002224 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e084      	b.n	8002344 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7c5b      	ldrb	r3, [r3, #17]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fa00 	bl	8000650 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 faa0 	bl	800279c <HAL_RTC_WaitForSynchro>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2204      	movs	r2, #4
 8002266:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e06b      	b.n	8002344 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb59 	bl	8002924 <RTC_EnterInitMode>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2204      	movs	r2, #4
 800227c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e060      	b.n	8002344 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0207 	bic.w	r2, r2, #7
 8002290:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800229a:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_RTC_Init+0x128>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a2b      	ldr	r2, [pc, #172]	; (800234c <HAL_RTC_Init+0x128>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_RTC_Init+0x128>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4926      	ldr	r1, [pc, #152]	; (800234c <HAL_RTC_Init+0x128>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d003      	beq.n	80022ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e00e      	b.n	80022e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fee6 	bl	800209c <HAL_RCCEx_GetPeriphCLKFreq>
 80022d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2204      	movs	r2, #4
 80022dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e030      	b.n	8002344 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 010f 	bic.w	r1, r3, #15
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c1a      	lsrs	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b291      	uxth	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fb2d 	bl	8002974 <RTC_ExitInitMode>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2204      	movs	r2, #4
 8002324:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00c      	b.n	8002344 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002342:	2300      	movs	r3, #0
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40006c00 	.word	0x40006c00

08002350 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_RTC_SetTime+0x20>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e080      	b.n	8002476 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	7c1b      	ldrb	r3, [r3, #16]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_RTC_SetTime+0x30>
 800237c:	2302      	movs	r3, #2
 800237e:	e07a      	b.n	8002476 <HAL_RTC_SetTime+0x126>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2202      	movs	r2, #2
 800238a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800239c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	4619      	mov	r1, r3
 80023a6:	460b      	mov	r3, r1
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a5b      	subs	r3, r3, r1
 80023ac:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80023ae:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80023b4:	4413      	add	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e01e      	b.n	80023f8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fb1d 	bl	80029fe <RTC_Bcd2ToByte>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80023cc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	785b      	ldrb	r3, [r3, #1]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fb12 	bl	80029fe <RTC_Bcd2ToByte>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80023e6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	789b      	ldrb	r3, [r3, #2]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fb06 	bl	80029fe <RTC_Bcd2ToByte>
 80023f2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80023f4:	4423      	add	r3, r4
 80023f6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa2b 	bl	8002856 <RTC_WriteTimeCounter>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2204      	movs	r2, #4
 800240a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02f      	b.n	8002476 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0205 	bic.w	r2, r2, #5
 8002424:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa3c 	bl	80028a4 <RTC_ReadAlarmCounter>
 800242c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d018      	beq.n	8002468 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	429a      	cmp	r2, r3
 800243c:	d214      	bcs.n	8002468 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002444:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002448:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800244a:	6939      	ldr	r1, [r7, #16]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fa42 	bl	80028d6 <RTC_WriteAlarmCounter>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2204      	movs	r2, #4
 800245c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e006      	b.n	8002476 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
	...

08002480 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_RTC_GetTime+0x28>
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0b5      	b.n	8002618 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0ac      	b.n	8002618 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f999 	bl	80027f6 <RTC_ReadTimeCounter>
 80024c4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4a55      	ldr	r2, [pc, #340]	; (8002620 <HAL_RTC_GetTime+0x1a0>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_RTC_GetTime+0x1a0>)
 80024d6:	fba3 1302 	umull	r1, r3, r3, r2
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_RTC_GetTime+0x1a4>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4a4a      	ldr	r2, [pc, #296]	; (8002620 <HAL_RTC_GetTime+0x1a0>)
 80024f8:	fba2 1203 	umull	r1, r2, r2, r3
 80024fc:	0ad2      	lsrs	r2, r2, #11
 80024fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002502:	fb01 f202 	mul.w	r2, r1, r2
 8002506:	1a9a      	subs	r2, r3, r2
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RTC_GetTime+0x1a4>)
 800250a:	fba3 1302 	umull	r1, r3, r3, r2
 800250e:	0959      	lsrs	r1, r3, #5
 8002510:	460b      	mov	r3, r1
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a5b      	subs	r3, r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	1ad1      	subs	r1, r2, r3
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b17      	cmp	r3, #23
 8002524:	d955      	bls.n	80025d2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_RTC_GetTime+0x1a8>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002532:	6939      	ldr	r1, [r7, #16]
 8002534:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <HAL_RTC_GetTime+0x1a8>)
 8002536:	fba3 2301 	umull	r2, r3, r3, r1
 800253a:	091a      	lsrs	r2, r3, #4
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1aca      	subs	r2, r1, r3
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f9a9 	bl	80028a4 <RTC_ReadAlarmCounter>
 8002552:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255a:	d008      	beq.n	800256e <HAL_RTC_GetTime+0xee>
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	429a      	cmp	r2, r3
 8002562:	d904      	bls.n	800256e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e002      	b.n	8002574 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4a2d      	ldr	r2, [pc, #180]	; (800262c <HAL_RTC_GetTime+0x1ac>)
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f966 	bl	8002856 <RTC_WriteTimeCounter>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e041      	b.n	8002618 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259a:	d00c      	beq.n	80025b6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80025a4:	69f9      	ldr	r1, [r7, #28]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f995 	bl	80028d6 <RTC_WriteAlarmCounter>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e030      	b.n	8002618 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80025b6:	69f9      	ldr	r1, [r7, #28]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f98c 	bl	80028d6 <RTC_WriteAlarmCounter>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e027      	b.n	8002618 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa34 	bl	8002a38 <RTC_DateUpdate>
 80025d0:	e003      	b.n	80025da <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01a      	beq.n	8002616 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f9ed 	bl	80029c4 <RTC_ByteToBcd2>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f9e4 	bl	80029c4 <RTC_ByteToBcd2>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	789b      	ldrb	r3, [r3, #2]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f9db 	bl	80029c4 <RTC_ByteToBcd2>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	91a2b3c5 	.word	0x91a2b3c5
 8002624:	88888889 	.word	0x88888889
 8002628:	aaaaaaab 	.word	0xaaaaaaab
 800262c:	00015180 	.word	0x00015180

08002630 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RTC_SetDate+0x24>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e097      	b.n	8002788 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	7c1b      	ldrb	r3, [r3, #16]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_RTC_SetDate+0x34>
 8002660:	2302      	movs	r3, #2
 8002662:	e091      	b.n	8002788 <HAL_RTC_SetDate+0x158>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	78da      	ldrb	r2, [r3, #3]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	785a      	ldrb	r2, [r3, #1]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	789a      	ldrb	r2, [r3, #2]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	739a      	strb	r2, [r3, #14]
 800268e:	e01a      	b.n	80026c6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f9b2 	bl	80029fe <RTC_Bcd2ToByte>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f9a9 	bl	80029fe <RTC_Bcd2ToByte>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f9a0 	bl	80029fe <RTC_Bcd2ToByte>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	7bdb      	ldrb	r3, [r3, #15]
 80026ca:	4618      	mov	r0, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	7b59      	ldrb	r1, [r3, #13]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	7b9b      	ldrb	r3, [r3, #14]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f000 fa8b 	bl	8002bf0 <RTC_WeekDayNum>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	7b1a      	ldrb	r2, [r3, #12]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f883 	bl	80027f6 <RTC_ReadTimeCounter>
 80026f0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <HAL_RTC_SetDate+0x160>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b18      	cmp	r3, #24
 8002702:	d93a      	bls.n	800277a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <HAL_RTC_SetDate+0x164>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_RTC_SetDate+0x168>)
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800271a:	69f9      	ldr	r1, [r7, #28]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f89a 	bl	8002856 <RTC_WriteTimeCounter>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2204      	movs	r2, #4
 800272c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e027      	b.n	8002788 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f8b3 	bl	80028a4 <RTC_ReadAlarmCounter>
 800273e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002746:	d018      	beq.n	800277a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	429a      	cmp	r2, r3
 800274e:	d214      	bcs.n	800277a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002756:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800275a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800275c:	69b9      	ldr	r1, [r7, #24]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8b9 	bl	80028d6 <RTC_WriteAlarmCounter>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2204      	movs	r2, #4
 800276e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e006      	b.n	8002788 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	91a2b3c5 	.word	0x91a2b3c5
 8002794:	aaaaaaab 	.word	0xaaaaaaab
 8002798:	00015180 	.word	0x00015180

0800279c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e01d      	b.n	80027ee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027c2:	f7fe f897 	bl	80008f4 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027c8:	e009      	b.n	80027de <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027ca:	f7fe f893 	bl	80008f4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d8:	d901      	bls.n	80027de <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e007      	b.n	80027ee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ee      	beq.n	80027ca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	827b      	strh	r3, [r7, #18]
 8002802:	2300      	movs	r3, #0
 8002804:	823b      	strh	r3, [r7, #16]
 8002806:	2300      	movs	r3, #0
 8002808:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002826:	8a7a      	ldrh	r2, [r7, #18]
 8002828:	8a3b      	ldrh	r3, [r7, #16]
 800282a:	429a      	cmp	r2, r3
 800282c:	d008      	beq.n	8002840 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800282e:	8a3b      	ldrh	r3, [r7, #16]
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e004      	b.n	800284a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002840:	8a7b      	ldrh	r3, [r7, #18]
 8002842:	041a      	lsls	r2, r3, #16
 8002844:	89fb      	ldrh	r3, [r7, #14]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800284a:	697b      	ldr	r3, [r7, #20]
}
 800284c:	4618      	mov	r0, r3
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f85d 	bl	8002924 <RTC_EnterInitMode>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e011      	b.n	800289a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	0c12      	lsrs	r2, r2, #16
 800287e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b292      	uxth	r2, r2
 8002888:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f872 	bl	8002974 <RTC_ExitInitMode>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	81fb      	strh	r3, [r7, #14]
 80028b0:	2300      	movs	r3, #0
 80028b2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80028c4:	89fb      	ldrh	r3, [r7, #14]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	89bb      	ldrh	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f81d 	bl	8002924 <RTC_EnterInitMode>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e011      	b.n	800291a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	0c12      	lsrs	r2, r2, #16
 80028fe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b292      	uxth	r2, r2
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f832 	bl	8002974 <RTC_ExitInitMode>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002930:	f7fd ffe0 	bl	80008f4 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002936:	e009      	b.n	800294c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002938:	f7fd ffdc 	bl	80008f4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002946:	d901      	bls.n	800294c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e00f      	b.n	800296c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ee      	beq.n	8002938 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0210 	orr.w	r2, r2, #16
 8002968:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0210 	bic.w	r2, r2, #16
 800298e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002990:	f7fd ffb0 	bl	80008f4 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002996:	e009      	b.n	80029ac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002998:	f7fd ffac 	bl	80008f4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a6:	d901      	bls.n	80029ac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e007      	b.n	80029bc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ee      	beq.n	8002998 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80029d2:	e005      	b.n	80029e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	3b0a      	subs	r3, #10
 80029de:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2b09      	cmp	r3, #9
 80029e4:	d8f6      	bhi.n	80029d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	b2db      	uxtb	r3, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b2db      	uxtb	r3, r3
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7bdb      	ldrb	r3, [r3, #15]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b5b      	ldrb	r3, [r3, #13]
 8002a5c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7b9b      	ldrb	r3, [r3, #14]
 8002a62:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	e06f      	b.n	8002b4a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d011      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d00e      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d00b      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	d008      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d005      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0a      	cmp	r3, #10
 8002a8c:	d002      	beq.n	8002a94 <RTC_DateUpdate+0x5c>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d117      	bne.n	8002ac4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b1e      	cmp	r3, #30
 8002a98:	d803      	bhi.n	8002aa2 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002aa0:	e050      	b.n	8002b44 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d005      	beq.n	8002ab4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002ab2:	e047      	b.n	8002b44 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
          year++;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002ac2:	e03f      	b.n	8002b44 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d008      	beq.n	8002adc <RTC_DateUpdate+0xa4>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d005      	beq.n	8002adc <RTC_DateUpdate+0xa4>
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d002      	beq.n	8002adc <RTC_DateUpdate+0xa4>
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	d10c      	bne.n	8002af6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b1d      	cmp	r3, #29
 8002ae0:	d803      	bhi.n	8002aea <RTC_DateUpdate+0xb2>
      {
        day++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ae8:	e02c      	b.n	8002b44 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	3301      	adds	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002af0:	2301      	movs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002af4:	e026      	b.n	8002b44 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b1b      	cmp	r3, #27
 8002b00:	d803      	bhi.n	8002b0a <RTC_DateUpdate+0xd2>
      {
        day++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3301      	adds	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e01c      	b.n	8002b44 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b1c      	cmp	r3, #28
 8002b0e:	d111      	bne.n	8002b34 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f839 	bl	8002b8c <RTC_IsLeapYear>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3301      	adds	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e00d      	b.n	8002b44 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e007      	b.n	8002b44 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b1d      	cmp	r3, #29
 8002b38:	d104      	bne.n	8002b44 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b40:	2301      	movs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d38b      	bcc.n	8002a6a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	6978      	ldr	r0, [r7, #20]
 8002b76:	f000 f83b 	bl	8002bf0 <RTC_WeekDayNum>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	731a      	strb	r2, [r3, #12]
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e01d      	b.n	8002be2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4a10      	ldr	r2, [pc, #64]	; (8002bec <RTC_IsLeapYear+0x60>)
 8002baa:	fba2 1203 	umull	r1, r2, r2, r3
 8002bae:	0952      	lsrs	r2, r2, #5
 8002bb0:	2164      	movs	r1, #100	; 0x64
 8002bb2:	fb01 f202 	mul.w	r2, r1, r2
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00f      	b.n	8002be2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <RTC_IsLeapYear+0x60>)
 8002bc6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bca:	09d2      	lsrs	r2, r2, #7
 8002bcc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002bd0:	fb01 f202 	mul.w	r2, r1, r2
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002be0:	2300      	movs	r3, #0
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	51eb851f 	.word	0x51eb851f

08002bf0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c0e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d82d      	bhi.n	8002c72 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	4a2c      	ldr	r2, [pc, #176]	; (8002cd4 <RTC_WeekDayNum+0xe4>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	085a      	lsrs	r2, r3, #1
 8002c2a:	78bb      	ldrb	r3, [r7, #2]
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	441a      	add	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	4926      	ldr	r1, [pc, #152]	; (8002cd8 <RTC_WeekDayNum+0xe8>)
 8002c40:	fba1 1303 	umull	r1, r3, r1, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <RTC_WeekDayNum+0xe8>)
 8002c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8002c52:	09db      	lsrs	r3, r3, #7
 8002c54:	4413      	add	r3, r2
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <RTC_WeekDayNum+0xec>)
 8002c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5e:	1ad1      	subs	r1, r2, r3
 8002c60:	0849      	lsrs	r1, r1, #1
 8002c62:	440b      	add	r3, r1
 8002c64:	0899      	lsrs	r1, r3, #2
 8002c66:	460b      	mov	r3, r1
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a5b      	subs	r3, r3, r1
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e029      	b.n	8002cc6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <RTC_WeekDayNum+0xe4>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	085a      	lsrs	r2, r3, #1
 8002c86:	78bb      	ldrb	r3, [r7, #2]
 8002c88:	441a      	add	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	441a      	add	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <RTC_WeekDayNum+0xe8>)
 8002c98:	fba1 1303 	umull	r1, r3, r1, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	490d      	ldr	r1, [pc, #52]	; (8002cd8 <RTC_WeekDayNum+0xe8>)
 8002ca4:	fba1 1303 	umull	r1, r3, r1, r3
 8002ca8:	09db      	lsrs	r3, r3, #7
 8002caa:	4413      	add	r3, r2
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <RTC_WeekDayNum+0xec>)
 8002cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb4:	1ad1      	subs	r1, r2, r3
 8002cb6:	0849      	lsrs	r1, r1, #1
 8002cb8:	440b      	add	r3, r1
 8002cba:	0899      	lsrs	r1, r3, #2
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	1a5b      	subs	r3, r3, r1
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	b2db      	uxtb	r3, r3
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	38e38e39 	.word	0x38e38e39
 8002cd8:	51eb851f 	.word	0x51eb851f
 8002cdc:	24924925 	.word	0x24924925

08002ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e041      	b.n	8002d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fcc6 	bl	8000698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	f000 fa08 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e041      	b.n	8002e14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f839 	bl	8002e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f000 f9b9 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0ac      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	f200 809f 	bhi.w	8002f98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002f99 	.word	0x08002f99
 8002e68:	08002f99 	.word	0x08002f99
 8002e6c:	08002f99 	.word	0x08002f99
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002f99 	.word	0x08002f99
 8002e78:	08002f99 	.word	0x08002f99
 8002e7c:	08002f99 	.word	0x08002f99
 8002e80:	08002f17 	.word	0x08002f17
 8002e84:	08002f99 	.word	0x08002f99
 8002e88:	08002f99 	.word	0x08002f99
 8002e8c:	08002f99 	.word	0x08002f99
 8002e90:	08002f57 	.word	0x08002f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f9ac 	bl	80031f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0208 	orr.w	r2, r2, #8
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0204 	bic.w	r2, r2, #4
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	619a      	str	r2, [r3, #24]
      break;
 8002ed2:	e062      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f9f2 	bl	80032c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	619a      	str	r2, [r3, #24]
      break;
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa3b 	bl	8003398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0208 	orr.w	r2, r2, #8
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0204 	bic.w	r2, r2, #4
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]
      break;
 8002f54:	e021      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa85 	bl	800346c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	61da      	str	r2, [r3, #28]
      break;
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0x18>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b3      	b.n	800312c <HAL_TIM_ConfigClockSource+0x180>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d03e      	beq.n	800307c <HAL_TIM_ConfigClockSource+0xd0>
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	f200 8087 	bhi.w	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	f000 8085 	beq.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d87f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d01a      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xa2>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d87b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d050      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x116>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d877      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b50      	cmp	r3, #80	; 0x50
 8003026:	d03c      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d873      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d058      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x136>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d86f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d064      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d86b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d060      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d867      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d05a      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800304c:	e062      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f000 faca 	bl	80035f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003070:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
      break;
 800307a:	e04e      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f000 fab3 	bl	80035f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800309e:	609a      	str	r2, [r3, #8]
      break;
 80030a0:	e03b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fa2a 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2150      	movs	r1, #80	; 0x50
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa81 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e02b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f000 fa48 	bl	8003564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2160      	movs	r1, #96	; 0x60
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fa71 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e01b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 fa0a 	bl	8003508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fa61 	bl	80035c2 <TIM_ITRx_SetConfig>
      break;
 8003100:	e00b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fa58 	bl	80035c2 <TIM_ITRx_SetConfig>
        break;
 8003112:	e002      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003118:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x30>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00b      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d007      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <TIM_Base_SetConfig+0xbc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d003      	beq.n	8003196 <TIM_Base_SetConfig+0x62>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a18      	ldr	r2, [pc, #96]	; (80031f4 <TIM_Base_SetConfig+0xc0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <TIM_Base_SetConfig+0xb8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	615a      	str	r2, [r3, #20]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800

080031f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0201 	bic.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d10c      	bne.n	800326e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0308 	bic.w	r3, r3, #8
 800325a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <TIM_OC1_SetConfig+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00

080032c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f023 0210 	bic.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0320 	bic.w	r3, r3, #32
 800330e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <TIM_OC2_SetConfig+0xd0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10d      	bne.n	8003340 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <TIM_OC2_SetConfig+0xd0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d113      	bne.n	8003370 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800334e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40012c00 	.word	0x40012c00

08003398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <TIM_OC3_SetConfig+0xd0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d10d      	bne.n	8003412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <TIM_OC3_SetConfig+0xd0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00

0800346c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800349a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	031b      	lsls	r3, r3, #12
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0f      	ldr	r2, [pc, #60]	; (8003504 <TIM_OC4_SetConfig+0x98>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d109      	bne.n	80034e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00

08003508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 030a 	bic.w	r3, r3, #10
 8003544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0210 	bic.w	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800358e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	031b      	lsls	r3, r3, #12
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003610:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	609a      	str	r2, [r3, #8]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003648:	2302      	movs	r3, #2
 800364a:	e046      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800

080036f0 <u8x8_byte_stm32f1xx_hw_i2c>:
 */

#include "oled.h"

uint8_t u8x8_byte_stm32f1xx_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	72fb      	strb	r3, [r7, #11]
 80036fe:	4613      	mov	r3, r2
 8003700:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[128];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	3b14      	subs	r3, #20
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d848      	bhi.n	800379c <u8x8_byte_stm32f1xx_hw_i2c+0xac>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <u8x8_byte_stm32f1xx_hw_i2c+0x20>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	080037a1 	.word	0x080037a1
 8003714:	0800379d 	.word	0x0800379d
 8003718:	0800379d 	.word	0x0800379d
 800371c:	0800374d 	.word	0x0800374d
 8003720:	08003745 	.word	0x08003745
 8003724:	0800377d 	.word	0x0800377d
 8003728:	0800379d 	.word	0x0800379d
 800372c:	0800379d 	.word	0x0800379d
 8003730:	0800379d 	.word	0x0800379d
 8003734:	0800379d 	.word	0x0800379d
 8003738:	0800379d 	.word	0x0800379d
 800373c:	0800379d 	.word	0x0800379d
 8003740:	080037a1 	.word	0x080037a1
    }
    break;

    case U8X8_MSG_BYTE_START_TRANSFER:
    {
        buf_idx = 0;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
    }
    break;
 800374a:	e02c      	b.n	80037a6 <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	617b      	str	r3, [r7, #20]

        while (arg_int > 0)
 8003750:	e010      	b.n	8003774 <u8x8_byte_stm32f1xx_hw_i2c+0x84>
        {
            buffer[buf_idx++] = *data;
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	b2d1      	uxtb	r1, r2
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 800375c:	7011      	strb	r1, [r2, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	7819      	ldrb	r1, [r3, #0]
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 8003766:	5499      	strb	r1, [r3, r2]
            data++;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
            arg_int--;
 800376e:	7abb      	ldrb	r3, [r7, #10]
 8003770:	3b01      	subs	r3, #1
 8003772:	72bb      	strb	r3, [r7, #10]
        while (arg_int > 0)
 8003774:	7abb      	ldrb	r3, [r7, #10]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1eb      	bne.n	8003752 <u8x8_byte_stm32f1xx_hw_i2c+0x62>
        }
    }
    break;
 800377a:	e014      	b.n	80037a6 <u8x8_byte_stm32f1xx_hw_i2c+0xb6>

    case U8X8_MSG_BYTE_END_TRANSFER:
    {
        if (HAL_I2C_Master_Transmit(&hi2c1, (OLED_ADDRESS), buffer, buf_idx, 1000) != HAL_OK)
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <u8x8_byte_stm32f1xx_hw_i2c+0xc0>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003786:	9200      	str	r2, [sp, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <u8x8_byte_stm32f1xx_hw_i2c+0xc4>)
 800378a:	2178      	movs	r1, #120	; 0x78
 800378c:	480a      	ldr	r0, [pc, #40]	; (80037b8 <u8x8_byte_stm32f1xx_hw_i2c+0xc8>)
 800378e:	f7fd fca3 	bl	80010d8 <HAL_I2C_Master_Transmit>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <u8x8_byte_stm32f1xx_hw_i2c+0xb4>
            return 0;
 8003798:	2300      	movs	r3, #0
 800379a:	e005      	b.n	80037a8 <u8x8_byte_stm32f1xx_hw_i2c+0xb8>

    case U8X8_MSG_BYTE_SET_DC:
        break;

    default:
        return 0;
 800379c:	2300      	movs	r3, #0
 800379e:	e003      	b.n	80037a8 <u8x8_byte_stm32f1xx_hw_i2c+0xb8>
    	break;
 80037a0:	bf00      	nop
 80037a2:	e000      	b.n	80037a6 <u8x8_byte_stm32f1xx_hw_i2c+0xb6>
    break;
 80037a4:	bf00      	nop
    }

    return 1;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000090 	.word	0x20000090
 80037b4:	20000094 	.word	0x20000094
 80037b8:	20000534 	.word	0x20000534

080037bc <delay_us>:


void delay_us(uint32_t time)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    uint32_t i = 72 * time;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
    //           ^
    // The 72 here should be the same as the clock speed (in MHz).
    while (i--)
 80037d0:	bf00      	nop
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	60fa      	str	r2, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1fa      	bne.n	80037d2 <delay_us+0x16>
        ;
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <u8x8_gpio_and_delay>:
 * This is the u8g2 GPIO and delay configuration function.
 *
 */

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	72fb      	strb	r3, [r7, #11]
 80037f6:	4613      	mov	r3, r2
 80037f8:	72bb      	strb	r3, [r7, #10]
    switch (msg)
 80037fa:	7afb      	ldrb	r3, [r7, #11]
 80037fc:	3b29      	subs	r3, #41	; 0x29
 80037fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003800:	f200 8084 	bhi.w	800390c <u8x8_gpio_and_delay+0x124>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <u8x8_gpio_and_delay+0x24>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	080038d5 	.word	0x080038d5
 8003810:	080038bd 	.word	0x080038bd
 8003814:	080038b9 	.word	0x080038b9
 8003818:	0800390d 	.word	0x0800390d
 800381c:	080038dd 	.word	0x080038dd
 8003820:	0800390d 	.word	0x0800390d
 8003824:	0800390d 	.word	0x0800390d
 8003828:	0800390d 	.word	0x0800390d
 800382c:	0800390d 	.word	0x0800390d
 8003830:	0800390d 	.word	0x0800390d
 8003834:	0800390d 	.word	0x0800390d
 8003838:	0800390d 	.word	0x0800390d
 800383c:	0800390d 	.word	0x0800390d
 8003840:	0800390d 	.word	0x0800390d
 8003844:	0800390d 	.word	0x0800390d
 8003848:	0800390d 	.word	0x0800390d
 800384c:	0800390d 	.word	0x0800390d
 8003850:	0800390d 	.word	0x0800390d
 8003854:	0800390d 	.word	0x0800390d
 8003858:	0800390d 	.word	0x0800390d
 800385c:	0800390d 	.word	0x0800390d
 8003860:	0800390d 	.word	0x0800390d
 8003864:	0800390d 	.word	0x0800390d
 8003868:	0800390d 	.word	0x0800390d
 800386c:	0800390d 	.word	0x0800390d
 8003870:	0800390d 	.word	0x0800390d
 8003874:	0800390d 	.word	0x0800390d
 8003878:	0800390d 	.word	0x0800390d
 800387c:	0800390d 	.word	0x0800390d
 8003880:	0800390d 	.word	0x0800390d
 8003884:	0800390d 	.word	0x0800390d
 8003888:	0800390d 	.word	0x0800390d
 800388c:	0800390d 	.word	0x0800390d
 8003890:	0800390d 	.word	0x0800390d
 8003894:	0800390d 	.word	0x0800390d
 8003898:	08003917 	.word	0x08003917
 800389c:	08003917 	.word	0x08003917
 80038a0:	0800390d 	.word	0x0800390d
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	080038e5 	.word	0x080038e5
 80038ac:	080038ef 	.word	0x080038ef
 80038b0:	080038f9 	.word	0x080038f9
 80038b4:	08003903 	.word	0x08003903
    {
    case U8X8_MSG_DELAY_100NANO: // delay arg_int * 100 nano seconds
        __NOP();
 80038b8:	bf00      	nop
        break;
 80038ba:	e02d      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
        for (uint16_t n = 0; n < 320; n++)
 80038bc:	2300      	movs	r3, #0
 80038be:	82fb      	strh	r3, [r7, #22]
 80038c0:	e003      	b.n	80038ca <u8x8_gpio_and_delay+0xe2>
        {
            __NOP();
 80038c2:	bf00      	nop
        for (uint16_t n = 0; n < 320; n++)
 80038c4:	8afb      	ldrh	r3, [r7, #22]
 80038c6:	3301      	adds	r3, #1
 80038c8:	82fb      	strh	r3, [r7, #22]
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80038d0:	d3f7      	bcc.n	80038c2 <u8x8_gpio_and_delay+0xda>
        }
        break;
 80038d2:	e021      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_MILLI: // delay arg_int * 1 milli second
        HAL_Delay(1);
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7fd f817 	bl	8000908 <HAL_Delay>
        break;
 80038da:	e01d      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_DELAY_I2C: // arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
        delay_us(5);
 80038dc:	2005      	movs	r0, #5
 80038de:	f7ff ff6d 	bl	80037bc <delay_us>
        break;                    // arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
 80038e2:	e019      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_I2C_CLOCK: // arg_int=0: Output low at I2C clock pin
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:  // arg_int=0: Output low at I2C data pin
        break;                    // arg_int=1: Input dir with pullup high for I2C data pin
    case U8X8_MSG_GPIO_MENU_SELECT:
        u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80038ec:	e014      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_NEXT:
        u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 80038f6:	e00f      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_PREV:
        u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003900:	e00a      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    case U8X8_MSG_GPIO_MENU_HOME:
        u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 800390a:	e005      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
    default:
        u8x8_SetGPIOResult(u8x8, 1); // default return value
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
        break;
 8003914:	e000      	b.n	8003918 <u8x8_gpio_and_delay+0x130>
        break;                    // arg_int=1: Input dir with pullup high for I2C clock pin
 8003916:	bf00      	nop
    }
    return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop

08003924 <u8g2Init>:

void u8g2Init(u8g2_t *u8g2)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2, U8G2_R0, u8x8_byte_stm32f1xx_hw_i2c, u8x8_gpio_and_delay);
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <u8g2Init+0x30>)
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <u8g2Init+0x34>)
 8003930:	490a      	ldr	r1, [pc, #40]	; (800395c <u8g2Init+0x38>)
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8ca 	bl	8003acc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8g2_InitDisplay(u8g2);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f001 fcf0 	bl	800531e <u8x8_InitDisplay>
    u8g2_SetPowerSave(u8g2, 0);
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f001 fcfb 	bl	800533c <u8x8_SetPowerSave>
    u8g2_ClearBuffer(u8g2);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f82e 	bl	80039a8 <u8g2_ClearBuffer>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	080037e9 	.word	0x080037e9
 8003958:	080036f1 	.word	0x080036f1
 800395c:	08006c78 	.word	0x08006c78

08003960 <getTime>:
#include "rtc.h"

char* getTime(RTC_HandleTypeDef rtc)
{
 8003960:	b084      	sub	sp, #16
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af02      	add	r7, sp, #8
 8003968:	f107 0c18 	add.w	ip, r7, #24
 800396c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	RTC_TimeTypeDef time;
	HAL_RTC_GetTime(&rtc, &time, RTC_FORMAT_BIN);
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	2200      	movs	r2, #0
 8003976:	4619      	mov	r1, r3
 8003978:	f107 0018 	add.w	r0, r7, #24
 800397c:	f7fe fd80 	bl	8002480 <HAL_RTC_GetTime>
	char timestr[6];
	snprintf(timestr, sizeof(timestr), "%02u:%02u", time.Hours, time.Minutes);
 8003980:	7b3b      	ldrb	r3, [r7, #12]
 8003982:	461a      	mov	r2, r3
 8003984:	7b7b      	ldrb	r3, [r7, #13]
 8003986:	1d38      	adds	r0, r7, #4
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <getTime+0x44>)
 800398e:	2106      	movs	r1, #6
 8003990:	f001 fd94 	bl	80054bc <sniprintf>
	return timestr;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039a0:	b004      	add	sp, #16
 80039a2:	4770      	bx	lr
 80039a4:	08005d90 	.word	0x08005d90

080039a8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	7c1b      	ldrb	r3, [r3, #16]
 80039b6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fd68 	bl	80054ac <memset>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
 80039f0:	4613      	mov	r3, r2
 80039f2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	7c1b      	ldrb	r3, [r3, #16]
 80039fa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	89ba      	ldrh	r2, [r7, #12]
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003a12:	89bb      	ldrh	r3, [r7, #12]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003a18:	89bb      	ldrh	r3, [r7, #12]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003a20:	7bf9      	ldrb	r1, [r7, #15]
 8003a22:	78ba      	ldrb	r2, [r7, #2]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 fc45 	bl	80052bc <u8x8_DrawTile>
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a4c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a54:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	7c5b      	ldrb	r3, [r3, #17]
 8003a5c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003a5e:	7bba      	ldrb	r2, [r7, #14]
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ffbd 	bl	80039e4 <u8g2_send_tile_row>
    src_row++;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	3301      	adds	r3, #1
 8003a74:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	7b7b      	ldrb	r3, [r7, #13]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d203      	bcs.n	8003a86 <u8g2_send_buffer+0x4c>
 8003a7e:	7bba      	ldrb	r2, [r7, #14]
 8003a80:	7b3b      	ldrb	r3, [r7, #12]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3eb      	bcc.n	8003a5e <u8g2_send_buffer+0x24>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffcf 	bl	8003a3a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f001 fc5e 	bl	800535e <u8x8_RefreshDisplay>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	701a      	strb	r2, [r3, #0]
  return buf;
 8003aba:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000114 	.word	0x20000114

08003acc <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8003ae2:	490c      	ldr	r1, [pc, #48]	; (8003b14 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 fc99 	bl	800541c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003aea:	f107 0313 	add.w	r3, r7, #19
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ffdc 	bl	8003aac <u8g2_m_16_8_f>
 8003af4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003af6:	7cfa      	ldrb	r2, [r7, #19]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8003afe:	6979      	ldr	r1, [r7, #20]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 ffbc 	bl	8004a7e <u8g2_SetupBuffer>
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	08004f5d 	.word	0x08004f5d
 8003b14:	080051b9 	.word	0x080051b9
 8003b18:	08004903 	.word	0x08004903

08003b1c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	781b      	ldrb	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	81fb      	strh	r3, [r7, #14]
    font++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	89fb      	ldrh	r3, [r7, #14]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003b86:	2100      	movs	r1, #0
 8003b88:	6838      	ldr	r0, [r7, #0]
 8003b8a:	f7ff ffc7 	bl	8003b1c <u8g2_font_get_byte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003b96:	2101      	movs	r1, #1
 8003b98:	6838      	ldr	r0, [r7, #0]
 8003b9a:	f7ff ffbf 	bl	8003b1c <u8g2_font_get_byte>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	6838      	ldr	r0, [r7, #0]
 8003baa:	f7ff ffb7 	bl	8003b1c <u8g2_font_get_byte>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	6838      	ldr	r0, [r7, #0]
 8003bba:	f7ff ffaf 	bl	8003b1c <u8g2_font_get_byte>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	6838      	ldr	r0, [r7, #0]
 8003bca:	f7ff ffa7 	bl	8003b1c <u8g2_font_get_byte>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003bd6:	2105      	movs	r1, #5
 8003bd8:	6838      	ldr	r0, [r7, #0]
 8003bda:	f7ff ff9f 	bl	8003b1c <u8g2_font_get_byte>
 8003bde:	4603      	mov	r3, r0
 8003be0:	461a      	mov	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003be6:	2106      	movs	r1, #6
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f7ff ff97 	bl	8003b1c <u8g2_font_get_byte>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003bf6:	2107      	movs	r1, #7
 8003bf8:	6838      	ldr	r0, [r7, #0]
 8003bfa:	f7ff ff8f 	bl	8003b1c <u8g2_font_get_byte>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003c06:	2108      	movs	r1, #8
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f7ff ff87 	bl	8003b1c <u8g2_font_get_byte>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003c16:	2109      	movs	r1, #9
 8003c18:	6838      	ldr	r0, [r7, #0]
 8003c1a:	f7ff ff7f 	bl	8003b1c <u8g2_font_get_byte>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	b25a      	sxtb	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003c26:	210a      	movs	r1, #10
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f7ff ff77 	bl	8003b1c <u8g2_font_get_byte>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	b25a      	sxtb	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003c36:	210b      	movs	r1, #11
 8003c38:	6838      	ldr	r0, [r7, #0]
 8003c3a:	f7ff ff6f 	bl	8003b1c <u8g2_font_get_byte>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	b25a      	sxtb	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003c46:	210c      	movs	r1, #12
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f7ff ff67 	bl	8003b1c <u8g2_font_get_byte>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	b25a      	sxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003c56:	210d      	movs	r1, #13
 8003c58:	6838      	ldr	r0, [r7, #0]
 8003c5a:	f7ff ff5f 	bl	8003b1c <u8g2_font_get_byte>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	b25a      	sxtb	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003c66:	210e      	movs	r1, #14
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f7ff ff57 	bl	8003b1c <u8g2_font_get_byte>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b25a      	sxtb	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003c76:	210f      	movs	r1, #15
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f7ff ff4f 	bl	8003b1c <u8g2_font_get_byte>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003c86:	2110      	movs	r1, #16
 8003c88:	6838      	ldr	r0, [r7, #0]
 8003c8a:	f7ff ff47 	bl	8003b1c <u8g2_font_get_byte>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	b25a      	sxtb	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003c96:	2111      	movs	r1, #17
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	f7ff ff50 	bl	8003b3e <u8g2_font_get_word>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003ca6:	2113      	movs	r1, #19
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	f7ff ff48 	bl	8003b3e <u8g2_font_get_word>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003cb6:	2115      	movs	r1, #21
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f7ff ff40 	bl	8003b3e <u8g2_font_get_word>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	82da      	strh	r2, [r3, #22]
#endif
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	7b7b      	ldrb	r3, [r7, #13]
 8003cec:	fa42 f303 	asr.w	r3, r2, r3
 8003cf0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003cf2:	7b7b      	ldrb	r3, [r7, #13]
 8003cf4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003cf6:	7bba      	ldrb	r2, [r7, #14]
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003cfe:	7bbb      	ldrb	r3, [r7, #14]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d91a      	bls.n	8003d3a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003d04:	2308      	movs	r3, #8
 8003d06:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003d08:	7b3a      	ldrb	r2, [r7, #12]
 8003d0a:	7b7b      	ldrb	r3, [r7, #13]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	7b3b      	ldrb	r3, [r7, #12]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	b25a      	sxtb	r2, r3
 8003d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	b25b      	sxtb	r3, r3
 8003d32:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003d34:	7bbb      	ldrb	r3, [r7, #14]
 8003d36:	3b08      	subs	r3, #8
 8003d38:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7bba      	ldrb	r2, [r7, #14]
 8003d54:	731a      	strb	r2, [r3, #12]
  return val;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffab 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003d86:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	73fb      	strb	r3, [r7, #15]
  return v;
 8003d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003da8:	b490      	push	{r4, r7}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	80fb      	strh	r3, [r7, #6]
 8003dba:	4603      	mov	r3, r0
 8003dbc:	717b      	strb	r3, [r7, #5]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	713b      	strb	r3, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d014      	beq.n	8003df6 <u8g2_add_vector_y+0x4e>
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	dc19      	bgt.n	8003e04 <u8g2_add_vector_y+0x5c>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <u8g2_add_vector_y+0x32>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d007      	beq.n	8003de8 <u8g2_add_vector_y+0x40>
 8003dd8:	e014      	b.n	8003e04 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8003dda:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4413      	add	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
      break;
 8003de6:	e014      	b.n	8003e12 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8003de8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	4413      	add	r3, r2
 8003df2:	80fb      	strh	r3, [r7, #6]
      break;
 8003df4:	e00d      	b.n	8003e12 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8003df6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	80fb      	strh	r3, [r7, #6]
      break;
 8003e02:	e006      	b.n	8003e12 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8003e04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	80fb      	strh	r3, [r7, #6]
      break;      
 8003e10:	bf00      	nop
  }
  return dy;
 8003e12:	88fb      	ldrh	r3, [r7, #6]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc90      	pop	{r4, r7}
 8003e1c:	4770      	bx	lr

08003e1e <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003e1e:	b490      	push	{r4, r7}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4604      	mov	r4, r0
 8003e26:	4608      	mov	r0, r1
 8003e28:	4611      	mov	r1, r2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	80fb      	strh	r3, [r7, #6]
 8003e30:	4603      	mov	r3, r0
 8003e32:	717b      	strb	r3, [r7, #5]
 8003e34:	460b      	mov	r3, r1
 8003e36:	713b      	strb	r3, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d014      	beq.n	8003e6c <u8g2_add_vector_x+0x4e>
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	dc19      	bgt.n	8003e7a <u8g2_add_vector_x+0x5c>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <u8g2_add_vector_x+0x32>
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <u8g2_add_vector_x+0x40>
 8003e4e:	e014      	b.n	8003e7a <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8003e50:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4413      	add	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
      break;
 8003e5c:	e014      	b.n	8003e88 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8003e5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	80fb      	strh	r3, [r7, #6]
      break;
 8003e6a:	e00d      	b.n	8003e88 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8003e6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	80fb      	strh	r3, [r7, #6]
      break;
 8003e78:	e006      	b.n	8003e88 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8003e7a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	4413      	add	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
      break;      
 8003e86:	bf00      	nop
  }
  return dx;
 8003e88:	88fb      	ldrh	r3, [r7, #6]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc90      	pop	{r4, r7}
 8003e92:	4770      	bx	lr

08003e94 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003eb4:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003ebc:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003ec4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	7d7b      	ldrb	r3, [r7, #21]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003ed2:	7dfa      	ldrb	r2, [r7, #23]
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d201      	bcs.n	8003ede <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	889b      	ldrh	r3, [r3, #4]
 8003ee2:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	88db      	ldrh	r3, [r3, #6]
 8003ee8:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003eea:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003eee:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	7c1b      	ldrb	r3, [r3, #16]
 8003ef6:	89b8      	ldrh	r0, [r7, #12]
 8003ef8:	f7ff ff91 	bl	8003e1e <u8g2_add_vector_x>
 8003efc:	4603      	mov	r3, r0
 8003efe:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003f00:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003f04:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	7c1b      	ldrb	r3, [r3, #16]
 8003f0c:	8978      	ldrh	r0, [r7, #10]
 8003f0e:	f7ff ff4b 	bl	8003da8 <u8g2_add_vector_y>
 8003f12:	4603      	mov	r3, r0
 8003f14:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003f16:	78bb      	ldrb	r3, [r7, #2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	7b9a      	ldrb	r2, [r3, #14]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003f26:	7dbb      	ldrb	r3, [r7, #22]
 8003f28:	b298      	uxth	r0, r3
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	7c1b      	ldrb	r3, [r3, #16]
 8003f2e:	897a      	ldrh	r2, [r7, #10]
 8003f30:	89b9      	ldrh	r1, [r7, #12]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fbfa 	bl	8004730 <u8g2_DrawHVLine>
 8003f3c:	e013      	b.n	8003f66 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	7b5b      	ldrb	r3, [r3, #13]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	7bda      	ldrb	r2, [r3, #15]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003f50:	7dbb      	ldrb	r3, [r7, #22]
 8003f52:	b298      	uxth	r0, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	7c1b      	ldrb	r3, [r3, #16]
 8003f58:	897a      	ldrh	r2, [r7, #10]
 8003f5a:	89b9      	ldrh	r1, [r7, #12]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4603      	mov	r3, r0
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fbe5 	bl	8004730 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003f66:	7dfa      	ldrb	r2, [r7, #23]
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d309      	bcc.n	8003f82 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8003f6e:	7dfa      	ldrb	r2, [r7, #23]
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	757b      	strb	r3, [r7, #21]
    ly++;
 8003f7a:	7d3b      	ldrb	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003f80:	e79d      	b.n	8003ebe <u8g2_font_decode_len+0x2a>
      break;
 8003f82:	bf00      	nop
  }
  lx += cnt;
 8003f84:	7d7a      	ldrb	r2, [r7, #21]
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	4413      	add	r3, r2
 8003f8a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003f8c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003f94:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	725a      	strb	r2, [r3, #9]
  
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3360      	adds	r3, #96	; 0x60
 8003fb2:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fe80 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	b25a      	sxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fe75 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b25a      	sxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	7b9b      	ldrb	r3, [r3, #14]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf0c      	ite	eq
 8003ffe:	2301      	moveq	r3, #1
 8004000:	2300      	movne	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	73da      	strb	r2, [r3, #15]
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3360      	adds	r3, #96	; 0x60
 8004022:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff ffbc 	bl	8003fa4 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004032:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800403a:	4619      	mov	r1, r3
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7ff fe90 	bl	8003d62 <u8g2_font_decode_get_signed_bits>
 8004042:	4603      	mov	r3, r0
 8004044:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800404c:	4619      	mov	r1, r3
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff fe87 	bl	8003d62 <u8g2_font_decode_get_signed_bits>
 8004054:	4603      	mov	r3, r0
 8004056:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800405e:	4619      	mov	r1, r3
 8004060:	6978      	ldr	r0, [r7, #20]
 8004062:	f7ff fe7e 	bl	8003d62 <u8g2_font_decode_get_signed_bits>
 8004066:	4603      	mov	r3, r0
 8004068:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f340 80d7 	ble.w	8004224 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	8898      	ldrh	r0, [r3, #4]
 800407a:	7cfa      	ldrb	r2, [r7, #19]
 800407c:	7c7b      	ldrb	r3, [r7, #17]
 800407e:	4413      	add	r3, r2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	425b      	negs	r3, r3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	b25a      	sxtb	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	7c1b      	ldrb	r3, [r3, #16]
 800408c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004090:	f7ff fec5 	bl	8003e1e <u8g2_add_vector_x>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	88d8      	ldrh	r0, [r3, #6]
 80040a0:	7cfa      	ldrb	r2, [r7, #19]
 80040a2:	7c7b      	ldrb	r3, [r7, #17]
 80040a4:	4413      	add	r3, r2
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	425b      	negs	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	b25a      	sxtb	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	7c1b      	ldrb	r3, [r3, #16]
 80040b2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80040b6:	f7ff fe77 	bl	8003da8 <u8g2_add_vector_y>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	889b      	ldrh	r3, [r3, #4]
 80040c6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	88db      	ldrh	r3, [r3, #6]
 80040cc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80040ce:	8bfb      	ldrh	r3, [r7, #30]
 80040d0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80040d2:	8b7b      	ldrh	r3, [r7, #26]
 80040d4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	7c1b      	ldrb	r3, [r3, #16]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d85a      	bhi.n	8004194 <u8g2_font_decode_glyph+0x180>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <u8g2_font_decode_glyph+0xd0>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004139 	.word	0x08004139
 80040f0:	0800416d 	.word	0x0800416d
      {
	case 0:
	    x1 += decode->glyph_width;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	8bbb      	ldrh	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8004102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004106:	b29a      	uxth	r2, r3
 8004108:	8b3b      	ldrh	r3, [r7, #24]
 800410a:	4413      	add	r3, r2
 800410c:	833b      	strh	r3, [r7, #24]
	    break;
 800410e:	e041      	b.n	8004194 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004114:	b29b      	uxth	r3, r3
 8004116:	8bfa      	ldrh	r2, [r7, #30]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800411c:	8bfb      	ldrh	r3, [r7, #30]
 800411e:	3301      	adds	r3, #1
 8004120:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004122:	8bbb      	ldrh	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800412e:	b29a      	uxth	r2, r3
 8004130:	8b3b      	ldrh	r3, [r7, #24]
 8004132:	4413      	add	r3, r2
 8004134:	833b      	strh	r3, [r7, #24]
	    break;
 8004136:	e02d      	b.n	8004194 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800413e:	b29b      	uxth	r3, r3
 8004140:	8bfa      	ldrh	r2, [r7, #30]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004146:	8bfb      	ldrh	r3, [r7, #30]
 8004148:	3301      	adds	r3, #1
 800414a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800414c:	8bbb      	ldrh	r3, [r7, #28]
 800414e:	3301      	adds	r3, #1
 8004150:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8004152:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004156:	b29b      	uxth	r3, r3
 8004158:	8b7a      	ldrh	r2, [r7, #26]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800415e:	8b7b      	ldrh	r3, [r7, #26]
 8004160:	3301      	adds	r3, #1
 8004162:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004164:	8b3b      	ldrh	r3, [r7, #24]
 8004166:	3301      	adds	r3, #1
 8004168:	833b      	strh	r3, [r7, #24]
	    break;	  
 800416a:	e013      	b.n	8004194 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800416c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004170:	b29a      	uxth	r2, r3
 8004172:	8bbb      	ldrh	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800417e:	b29b      	uxth	r3, r3
 8004180:	8b7a      	ldrh	r2, [r7, #26]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004186:	8b7b      	ldrh	r3, [r7, #26]
 8004188:	3301      	adds	r3, #1
 800418a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800418c:	8b3b      	ldrh	r3, [r7, #24]
 800418e:	3301      	adds	r3, #1
 8004190:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004192:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004194:	8bb8      	ldrh	r0, [r7, #28]
 8004196:	8b7a      	ldrh	r2, [r7, #26]
 8004198:	8bf9      	ldrh	r1, [r7, #30]
 800419a:	8b3b      	ldrh	r3, [r7, #24]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4603      	mov	r3, r0
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb83 	bl	80048ac <u8g2_IsIntersection>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <u8g2_font_decode_glyph+0x19e>
	return d;
 80041ac:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80041b0:	e03a      	b.n	8004228 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80041c4:	4619      	mov	r1, r3
 80041c6:	6978      	ldr	r0, [r7, #20]
 80041c8:	f7ff fd81 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 80041cc:	4603      	mov	r3, r0
 80041ce:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80041d6:	4619      	mov	r1, r3
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f7ff fd78 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 80041de:	4603      	mov	r3, r0
 80041e0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2200      	movs	r2, #0
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fe53 	bl	8003e94 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fe4d 	bl	8003e94 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80041fa:	2101      	movs	r1, #1
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7ff fd66 	bl	8003cce <u8g2_font_decode_get_unsigned_bits>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ec      	bne.n	80041e2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800420e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8004212:	429a      	cmp	r2, r3
 8004214:	dd00      	ble.n	8004218 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004216:	e7d2      	b.n	80041be <u8g2_font_decode_glyph+0x1aa>
	break;
 8004218:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	7b9a      	ldrb	r2, [r3, #14]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8004224:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3317      	adds	r3, #23
 8004246:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	2bff      	cmp	r3, #255	; 0xff
 800424c:	d82a      	bhi.n	80042a4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800424e:	887b      	ldrh	r3, [r7, #2]
 8004250:	2b60      	cmp	r3, #96	; 0x60
 8004252:	d907      	bls.n	8004264 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800425a:	461a      	mov	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d906      	bls.n	8004278 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004270:	461a      	mov	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4413      	add	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3301      	adds	r3, #1
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d04e      	beq.n	8004320 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	887a      	ldrh	r2, [r7, #2]
 800428a:	429a      	cmp	r2, r3
 800428c:	d102      	bne.n	8004294 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	3302      	adds	r3, #2
 8004292:	e049      	b.n	8004328 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3301      	adds	r3, #1
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80042a2:	e7e9      	b.n	8004278 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80042aa:	461a      	mov	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6938      	ldr	r0, [r7, #16]
 80042ba:	f7ff fc40 	bl	8003b3e <u8g2_font_get_word>
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4413      	add	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80042c8:	2102      	movs	r1, #2
 80042ca:	6938      	ldr	r0, [r7, #16]
 80042cc:	f7ff fc37 	bl	8003b3e <u8g2_font_get_word>
 80042d0:	4603      	mov	r3, r0
 80042d2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3304      	adds	r3, #4
 80042d8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80042da:	89fa      	ldrh	r2, [r7, #14]
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3e9      	bcc.n	80042b6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80042fc:	89fb      	ldrh	r3, [r7, #14]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d010      	beq.n	8004324 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004302:	89fa      	ldrh	r2, [r7, #14]
 8004304:	887b      	ldrh	r3, [r7, #2]
 8004306:	429a      	cmp	r2, r3
 8004308:	d102      	bne.n	8004310 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3303      	adds	r3, #3
 800430e:	e00b      	b.n	8004328 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	3302      	adds	r3, #2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4413      	add	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800431e:	e7e0      	b.n	80042e2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004320:	bf00      	nop
 8004322:	e000      	b.n	8004326 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004324:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	897a      	ldrh	r2, [r7, #10]
 8004352:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	893a      	ldrh	r2, [r7, #8]
 800435a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	4619      	mov	r1, r3
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ff64 	bl	8004230 <u8g2_font_get_glyph_data>
 8004368:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004370:	6939      	ldr	r1, [r7, #16]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fe4e 	bl	8004014 <u8g2_font_decode_glyph>
 8004378:	4603      	mov	r3, r0
 800437a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800437c:	8afb      	ldrh	r3, [r7, #22]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	4608      	mov	r0, r1
 8004392:	4611      	mov	r1, r2
 8004394:	461a      	mov	r2, r3
 8004396:	4603      	mov	r3, r0
 8004398:	817b      	strh	r3, [r7, #10]
 800439a:	460b      	mov	r3, r1
 800439c:	813b      	strh	r3, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d833      	bhi.n	8004414 <u8g2_DrawGlyph+0x8c>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <u8g2_DrawGlyph+0x2c>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d9 	.word	0x080043d9
 80043bc:	080043ed 	.word	0x080043ed
 80043c0:	08004401 	.word	0x08004401
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	4798      	blx	r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	4413      	add	r3, r2
 80043d4:	813b      	strh	r3, [r7, #8]
      break;
 80043d6:	e01d      	b.n	8004414 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	4798      	blx	r3
 80043e0:	4603      	mov	r3, r0
 80043e2:	461a      	mov	r2, r3
 80043e4:	897b      	ldrh	r3, [r7, #10]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	817b      	strh	r3, [r7, #10]
      break;
 80043ea:	e013      	b.n	8004414 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	4798      	blx	r3
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	893b      	ldrh	r3, [r7, #8]
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	813b      	strh	r3, [r7, #8]
      break;
 80043fe:	e009      	b.n	8004414 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	4798      	blx	r3
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	897b      	ldrh	r3, [r7, #10]
 800440e:	4413      	add	r3, r2
 8004410:	817b      	strh	r3, [r7, #10]
      break;
 8004412:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	893a      	ldrh	r2, [r7, #8]
 8004418:	8979      	ldrh	r1, [r7, #10]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ff88 	bl	8004330 <u8g2_font_draw_glyph>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop

0800442c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	4613      	mov	r3, r2
 800443c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fc5f 	bl	8004d02 <u8x8_utf8_init>
  sum = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	4611      	mov	r1, r2
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	4798      	blx	r3
 8004456:	4603      	mov	r3, r0
 8004458:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800445a:	8abb      	ldrh	r3, [r7, #20]
 800445c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004460:	4293      	cmp	r3, r2
 8004462:	d038      	beq.n	80044d6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3301      	adds	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800446a:	8abb      	ldrh	r3, [r7, #20]
 800446c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004470:	4293      	cmp	r3, r2
 8004472:	d0e9      	beq.n	8004448 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004474:	8abb      	ldrh	r3, [r7, #20]
 8004476:	893a      	ldrh	r2, [r7, #8]
 8004478:	8979      	ldrh	r1, [r7, #10]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff84 	bl	8004388 <u8g2_DrawGlyph>
 8004480:	4603      	mov	r3, r0
 8004482:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800448a:	2b03      	cmp	r3, #3
 800448c:	d81e      	bhi.n	80044cc <u8g2_draw_string+0xa0>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <u8g2_draw_string+0x68>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044af 	.word	0x080044af
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044c3 	.word	0x080044c3
      {
	case 0:
	  x += delta;
 80044a4:	897a      	ldrh	r2, [r7, #10]
 80044a6:	8a7b      	ldrh	r3, [r7, #18]
 80044a8:	4413      	add	r3, r2
 80044aa:	817b      	strh	r3, [r7, #10]
	  break;
 80044ac:	e00e      	b.n	80044cc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80044ae:	893a      	ldrh	r2, [r7, #8]
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	4413      	add	r3, r2
 80044b4:	813b      	strh	r3, [r7, #8]
	  break;
 80044b6:	e009      	b.n	80044cc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80044b8:	897a      	ldrh	r2, [r7, #10]
 80044ba:	8a7b      	ldrh	r3, [r7, #18]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	817b      	strh	r3, [r7, #10]
	  break;
 80044c0:	e004      	b.n	80044cc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80044c2:	893a      	ldrh	r2, [r7, #8]
 80044c4:	8a7b      	ldrh	r3, [r7, #18]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	813b      	strh	r3, [r7, #8]
	  break;
 80044ca:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80044cc:	8afa      	ldrh	r2, [r7, #22]
 80044ce:	8a7b      	ldrh	r3, [r7, #18]
 80044d0:	4413      	add	r3, r2
 80044d2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80044d4:	e7b8      	b.n	8004448 <u8g2_draw_string+0x1c>
      break;
 80044d6:	bf00      	nop
    }
  }
  return sum;
 80044d8:	8afb      	ldrh	r3, [r7, #22]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop

080044e4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	4613      	mov	r3, r2
 80044f4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a06      	ldr	r2, [pc, #24]	; (8004514 <u8g2_DrawStr+0x30>)
 80044fa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80044fc:	893a      	ldrh	r2, [r7, #8]
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f7ff ff92 	bl	800442c <u8g2_draw_string>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	08004d1d 	.word	0x08004d1d

08004518 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05d      	beq.n	80045e4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004546:	2b00      	cmp	r3, #0
 8004548:	d04d      	beq.n	80045e6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004550:	2b01      	cmp	r3, #1
 8004552:	d11c      	bne.n	800458e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8004560:	429a      	cmp	r2, r3
 8004562:	da05      	bge.n	8004570 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 800457c:	429a      	cmp	r2, r3
 800457e:	dd32      	ble.n	80045e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800458c:	e02b      	b.n	80045e6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004594:	461a      	mov	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800459c:	4619      	mov	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80045a4:	440b      	add	r3, r1
 80045a6:	429a      	cmp	r2, r3
 80045a8:	da0d      	bge.n	80045c6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	b25a      	sxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80045d2:	429a      	cmp	r2, r3
 80045d4:	dd07      	ble.n	80045e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80045e2:	e000      	b.n	80045e6 <u8g2_UpdateRefHeight+0xce>
    return;
 80045e4:	bf00      	nop
  }  
}
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return 0;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
	...

08004604 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a03      	ldr	r2, [pc, #12]	; (800461c <u8g2_SetFontPosBaseline+0x18>)
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	080045ef 	.word	0x080045ef

08004620 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d00b      	beq.n	800464c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3374      	adds	r3, #116	; 0x74
 800463e:	6839      	ldr	r1, [r7, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fa9b 	bl	8003b7c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ff66 	bl	8004518 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	460b      	mov	r3, r1
 8004664:	80fb      	strh	r3, [r7, #6]
 8004666:	4613      	mov	r3, r2
 8004668:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004670:	8afb      	ldrh	r3, [r7, #22]
 8004672:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	8abb      	ldrh	r3, [r7, #20]
 800467a:	4413      	add	r3, r2
 800467c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800467e:	8afa      	ldrh	r2, [r7, #22]
 8004680:	8abb      	ldrh	r3, [r7, #20]
 8004682:	429a      	cmp	r2, r3
 8004684:	d90b      	bls.n	800469e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004686:	8afa      	ldrh	r2, [r7, #22]
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d205      	bcs.n	800469a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800468e:	88bb      	ldrh	r3, [r7, #4]
 8004690:	82bb      	strh	r3, [r7, #20]
      b--;
 8004692:	8abb      	ldrh	r3, [r7, #20]
 8004694:	3b01      	subs	r3, #1
 8004696:	82bb      	strh	r3, [r7, #20]
 8004698:	e001      	b.n	800469e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800469e:	8afa      	ldrh	r2, [r7, #22]
 80046a0:	88bb      	ldrh	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d301      	bcc.n	80046aa <u8g2_clip_intersection2+0x56>
    return 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e01c      	b.n	80046e4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80046aa:	8aba      	ldrh	r2, [r7, #20]
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d801      	bhi.n	80046b6 <u8g2_clip_intersection2+0x62>
    return 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e016      	b.n	80046e4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80046b6:	8afa      	ldrh	r2, [r7, #22]
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d201      	bcs.n	80046c2 <u8g2_clip_intersection2+0x6e>
    a = c;
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80046c2:	8aba      	ldrh	r2, [r7, #20]
 80046c4:	88bb      	ldrh	r3, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d901      	bls.n	80046ce <u8g2_clip_intersection2+0x7a>
    b = d;
 80046ca:	88bb      	ldrh	r3, [r7, #4]
 80046cc:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8afa      	ldrh	r2, [r7, #22]
 80046d2:	801a      	strh	r2, [r3, #0]
  b -= a;
 80046d4:	8aba      	ldrh	r2, [r7, #20]
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	8aba      	ldrh	r2, [r7, #20]
 80046e0:	801a      	strh	r2, [r3, #0]
  return 1;
 80046e2:	2301      	movs	r3, #1
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80046ee:	b590      	push	{r4, r7, lr}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af02      	add	r7, sp, #8
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	4608      	mov	r0, r1
 80046f8:	4611      	mov	r1, r2
 80046fa:	461a      	mov	r2, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	817b      	strh	r3, [r7, #10]
 8004700:	460b      	mov	r3, r1
 8004702:	813b      	strh	r3, [r7, #8]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	893a      	ldrh	r2, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004716:	88f8      	ldrh	r0, [r7, #6]
 8004718:	893a      	ldrh	r2, [r7, #8]
 800471a:	8979      	ldrh	r1, [r7, #10]
 800471c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4603      	mov	r3, r0
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	47a0      	blx	r4
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b087      	sub	sp, #28
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d075      	beq.n	8004840 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d072      	beq.n	8004840 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d91a      	bls.n	8004796 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d109      	bne.n	800477c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004768:	897a      	ldrh	r2, [r7, #10]
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	817b      	strh	r3, [r7, #10]
	  x++;
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	3301      	adds	r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	e00c      	b.n	8004796 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800477c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d108      	bne.n	8004796 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	813b      	strh	r3, [r7, #8]
	  y++;
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80047a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11a      	bne.n	80047e0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80047b0:	893b      	ldrh	r3, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d83b      	bhi.n	800482e <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80047bc:	893b      	ldrh	r3, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d937      	bls.n	8004832 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80047ce:	1db9      	adds	r1, r7, #6
 80047d0:	f107 000a 	add.w	r0, r7, #10
 80047d4:	f7ff ff3e 	bl	8004654 <u8g2_clip_intersection2>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11a      	bne.n	8004814 <u8g2_DrawHVLine+0xe4>
	  return;
 80047de:	e02f      	b.n	8004840 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d824      	bhi.n	8004836 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d920      	bls.n	800483a <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004804:	1db9      	adds	r1, r7, #6
 8004806:	f107 0008 	add.w	r0, r7, #8
 800480a:	f7ff ff23 	bl	8004654 <u8g2_clip_intersection2>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d014      	beq.n	800483e <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	689c      	ldr	r4, [r3, #8]
 800481a:	8979      	ldrh	r1, [r7, #10]
 800481c:	893a      	ldrh	r2, [r7, #8]
 800481e:	88f8      	ldrh	r0, [r7, #6]
 8004820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	4603      	mov	r3, r0
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	47a0      	blx	r4
 800482c:	e008      	b.n	8004840 <u8g2_DrawHVLine+0x110>
	  return;
 800482e:	bf00      	nop
 8004830:	e006      	b.n	8004840 <u8g2_DrawHVLine+0x110>
	  return;
 8004832:	bf00      	nop
 8004834:	e004      	b.n	8004840 <u8g2_DrawHVLine+0x110>
	  return;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <u8g2_DrawHVLine+0x110>
	  return;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <u8g2_DrawHVLine+0x110>
	  return;
 800483e:	bf00      	nop
    }
}
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	bd90      	pop	{r4, r7, pc}

08004846 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004846:	b490      	push	{r4, r7}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	461a      	mov	r2, r3
 8004854:	4623      	mov	r3, r4
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	4603      	mov	r3, r0
 800485a:	80bb      	strh	r3, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
 8004860:	4613      	mov	r3, r2
 8004862:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004864:	887a      	ldrh	r2, [r7, #2]
 8004866:	88bb      	ldrh	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d20d      	bcs.n	8004888 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800486c:	883a      	ldrh	r2, [r7, #0]
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	429a      	cmp	r2, r3
 8004872:	d901      	bls.n	8004878 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004874:	2301      	movs	r3, #1
 8004876:	e014      	b.n	80048a2 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	883b      	ldrh	r3, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d901      	bls.n	8004884 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004880:	2301      	movs	r3, #1
 8004882:	e00e      	b.n	80048a2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004884:	2300      	movs	r3, #0
 8004886:	e00c      	b.n	80048a2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004888:	883a      	ldrh	r2, [r7, #0]
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	429a      	cmp	r2, r3
 800488e:	d907      	bls.n	80048a0 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004890:	887a      	ldrh	r2, [r7, #2]
 8004892:	883b      	ldrh	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d901      	bls.n	800489c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004898:	2301      	movs	r3, #1
 800489a:	e002      	b.n	80048a2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80048a0:	2300      	movs	r3, #0
    }
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc90      	pop	{r4, r7}
 80048aa:	4770      	bx	lr

080048ac <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	817b      	strh	r3, [r7, #10]
 80048be:	460b      	mov	r3, r1
 80048c0:	813b      	strh	r3, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80048d2:	8b3b      	ldrh	r3, [r7, #24]
 80048d4:	893a      	ldrh	r2, [r7, #8]
 80048d6:	f7ff ffb6 	bl	8004846 <u8g2_is_intersection_decision_tree>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <u8g2_IsIntersection+0x38>
    return 0; 
 80048e0:	2300      	movs	r3, #0
 80048e2:	e00a      	b.n	80048fa <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	897a      	ldrh	r2, [r7, #10]
 80048f4:	f7ff ffa7 	bl	8004846 <u8g2_is_intersection_decision_tree>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004902:	b480      	push	{r7}
 8004904:	b089      	sub	sp, #36	; 0x24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	461a      	mov	r2, r3
 8004910:	4603      	mov	r3, r0
 8004912:	817b      	strh	r3, [r7, #10]
 8004914:	460b      	mov	r3, r1
 8004916:	813b      	strh	r3, [r7, #8]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004920:	7efb      	ldrb	r3, [r7, #27]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004928:	2301      	movs	r3, #1
 800492a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800492c:	7e3a      	ldrb	r2, [r7, #24]
 800492e:	7efb      	ldrb	r3, [r7, #27]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004944:	2b01      	cmp	r3, #1
 8004946:	d801      	bhi.n	800494c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004948:	7e3b      	ldrb	r3, [r7, #24]
 800494a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004956:	7e3b      	ldrb	r3, [r7, #24]
 8004958:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800495a:	893b      	ldrh	r3, [r7, #8]
 800495c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800495e:	8afb      	ldrh	r3, [r7, #22]
 8004960:	f023 0307 	bic.w	r3, r3, #7
 8004964:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	7c1b      	ldrb	r3, [r3, #16]
 800496c:	b29b      	uxth	r3, r3
 800496e:	8afa      	ldrh	r2, [r7, #22]
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800497c:	8afb      	ldrh	r3, [r7, #22]
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004984:	897b      	ldrh	r3, [r7, #10]
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	4413      	add	r3, r2
 800498a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800498c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d117      	bne.n	80049c4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	7ebb      	ldrb	r3, [r7, #26]
 800499a:	4313      	orrs	r3, r2
 800499c:	b2da      	uxtb	r2, r3
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	781a      	ldrb	r2, [r3, #0]
 80049a6:	7e7b      	ldrb	r3, [r7, #25]
 80049a8:	4053      	eors	r3, r2
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	701a      	strb	r2, [r3, #0]
	ptr++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
	len--;
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e8      	bne.n	8004994 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80049c2:	e038      	b.n	8004a36 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	7ebb      	ldrb	r3, [r7, #26]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	7e7b      	ldrb	r3, [r7, #25]
 80049d8:	4053      	eors	r3, r2
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80049e0:	7efb      	ldrb	r3, [r7, #27]
 80049e2:	3301      	adds	r3, #1
 80049e4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80049e6:	7efb      	ldrb	r3, [r7, #27]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	76fb      	strb	r3, [r7, #27]
      len--;
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80049f4:	7efb      	ldrb	r3, [r7, #27]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d114      	bne.n	8004a24 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80049fe:	461a      	mov	r2, r3
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d801      	bhi.n	8004a14 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d008      	beq.n	8004a30 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	767b      	strb	r3, [r7, #25]
 8004a22:	e005      	b.n	8004a30 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8004a24:	7ebb      	ldrb	r3, [r7, #26]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8004a2a:	7e7b      	ldrb	r3, [r7, #25]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1c6      	bne.n	80049c4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004a36:	bf00      	nop
 8004a38:	3724      	adds	r7, #36	; 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	79fa      	ldrb	r2, [r7, #7]
 8004aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ffad 	bl	8004a40 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff fd8c 	bl	8004604 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b10:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	89fa      	ldrh	r2, [r7, #14]
 8004b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	7c1b      	ldrb	r3, [r3, #16]
 8004b22:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	89fa      	ldrh	r2, [r7, #14]
 8004b2e:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b36:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	89fa      	ldrh	r2, [r7, #14]
 8004b42:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004b4c:	89fb      	ldrh	r3, [r7, #14]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004b54:	4413      	add	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	7c52      	ldrb	r2, [r2, #17]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	dd08      	ble.n	8004b70 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	7c5b      	ldrb	r3, [r3, #17]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004b70:	89fb      	ldrh	r3, [r7, #14]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004b92:	89fb      	ldrh	r3, [r7, #14]
 8004b94:	4413      	add	r3, r2
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	8a9a      	ldrh	r2, [r3, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	8ada      	ldrh	r2, [r3, #22]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4603      	mov	r3, r0
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fe63 	bl	80048ac <u8g2_IsIntersection>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004bf4:	e03b      	b.n	8004c6e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d205      	bcs.n	8004c1a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d905      	bls.n	8004c36 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d205      	bcs.n	8004c52 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d905      	bls.n	8004c6e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ff3c 	bl	8004afc <u8g2_update_dimension_common>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff7b 	bl	8004bbc <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	4611      	mov	r1, r2
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	817b      	strh	r3, [r7, #10]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	813b      	strh	r3, [r7, #8]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004ce8:	88f8      	ldrh	r0, [r7, #6]
 8004cea:	893a      	ldrh	r2, [r7, #8]
 8004cec:	8979      	ldrh	r1, [r7, #10]
 8004cee:	7e3b      	ldrb	r3, [r7, #24]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fcfa 	bl	80046ee <u8g2_draw_hv_line_2dir>
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <u8x8_ascii_next+0x18>
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	2b0a      	cmp	r3, #10
 8004d32:	d102      	bne.n	8004d3a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d38:	e001      	b.n	8004d3e <u8x8_ascii_next+0x22>
  return b;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	b29b      	uxth	r3, r3
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691c      	ldr	r4, [r3, #16]
 8004d5a:	7afa      	ldrb	r2, [r7, #11]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2117      	movs	r1, #23
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	47a0      	blx	r4
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}

08004d6e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004d7a:	1cfb      	adds	r3, r7, #3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2101      	movs	r1, #1
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ffe1 	bl	8004d48 <u8x8_byte_SendBytes>
 8004d86:	4603      	mov	r3, r0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691c      	ldr	r4, [r3, #16]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2118      	movs	r1, #24
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	47a0      	blx	r4
 8004da6:	4603      	mov	r3, r0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}

08004db0 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691c      	ldr	r4, [r3, #16]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2119      	movs	r1, #25
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	47a0      	blx	r4
 8004dc6:	4603      	mov	r3, r0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd90      	pop	{r4, r7, pc}

08004dd0 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68dc      	ldr	r4, [r3, #12]
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	2300      	movs	r3, #0
 8004de4:	2115      	movs	r1, #21
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	47a0      	blx	r4
 8004dea:	4603      	mov	r3, r0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}

08004df4 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68dc      	ldr	r4, [r3, #12]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	2300      	movs	r3, #0
 8004e08:	2116      	movs	r1, #22
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	47a0      	blx	r4
 8004e0e:	4603      	mov	r3, r0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}

08004e18 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	460b      	mov	r3, r1
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68dc      	ldr	r4, [r3, #12]
 8004e2a:	7afa      	ldrb	r2, [r7, #11]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2117      	movs	r1, #23
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	47a0      	blx	r4
 8004e34:	4603      	mov	r3, r0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}

08004e3e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004e3e:	b590      	push	{r4, r7, lr}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68dc      	ldr	r4, [r3, #12]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2118      	movs	r1, #24
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	47a0      	blx	r4
 8004e54:	4603      	mov	r3, r0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd90      	pop	{r4, r7, pc}

08004e5e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004e5e:	b590      	push	{r4, r7, lr}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68dc      	ldr	r4, [r3, #12]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2119      	movs	r1, #25
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	47a0      	blx	r4
 8004e74:	4603      	mov	r3, r0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}

08004e7e <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004e7e:	b590      	push	{r4, r7, lr}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	73fb      	strb	r3, [r7, #15]
    data++;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2bfe      	cmp	r3, #254	; 0xfe
 8004e98:	d031      	beq.n	8004efe <u8x8_cad_SendSequence+0x80>
 8004e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e9c:	dc3d      	bgt.n	8004f1a <u8x8_cad_SendSequence+0x9c>
 8004e9e:	2b19      	cmp	r3, #25
 8004ea0:	dc3b      	bgt.n	8004f1a <u8x8_cad_SendSequence+0x9c>
 8004ea2:	2b18      	cmp	r3, #24
 8004ea4:	da23      	bge.n	8004eee <u8x8_cad_SendSequence+0x70>
 8004ea6:	2b16      	cmp	r3, #22
 8004ea8:	dc02      	bgt.n	8004eb0 <u8x8_cad_SendSequence+0x32>
 8004eaa:	2b15      	cmp	r3, #21
 8004eac:	da03      	bge.n	8004eb6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004eae:	e034      	b.n	8004f1a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004eb0:	2b17      	cmp	r3, #23
 8004eb2:	d00e      	beq.n	8004ed2 <u8x8_cad_SendSequence+0x54>
	return;
 8004eb4:	e031      	b.n	8004f1a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68dc      	ldr	r4, [r3, #12]
 8004ec0:	7bba      	ldrb	r2, [r7, #14]
 8004ec2:	7bf9      	ldrb	r1, [r7, #15]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	47a0      	blx	r4
	  data++;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	603b      	str	r3, [r7, #0]
	  break;
 8004ed0:	e022      	b.n	8004f18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004ed8:	f107 030e 	add.w	r3, r7, #14
 8004edc:	461a      	mov	r2, r3
 8004ede:	2101      	movs	r1, #1
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff99 	bl	8004e18 <u8x8_cad_SendData>
	  data++;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	603b      	str	r3, [r7, #0]
	  break;
 8004eec:	e014      	b.n	8004f18 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68dc      	ldr	r4, [r3, #12]
 8004ef2:	7bf9      	ldrb	r1, [r7, #15]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	47a0      	blx	r4
	  break;
 8004efc:	e00c      	b.n	8004f18 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	461a      	mov	r2, r3
 8004f08:	2129      	movs	r1, #41	; 0x29
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa36 	bl	800537c <u8x8_gpio_call>
	  data++;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	3301      	adds	r3, #1
 8004f14:	603b      	str	r3, [r7, #0]
	  break;
 8004f16:	bf00      	nop
    cmd = *data;
 8004f18:	e7b6      	b.n	8004e88 <u8x8_cad_SendSequence+0xa>
	return;
 8004f1a:	bf00      	nop
    }
  }
}
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}

08004f22 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8004f22:	b590      	push	{r4, r7, lr}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff ff2d 	bl	8004d90 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8004f36:	2140      	movs	r1, #64	; 0x40
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff ff18 	bl	8004d6e <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	691c      	ldr	r4, [r3, #16]
 8004f42:	7afa      	ldrb	r2, [r7, #11]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2117      	movs	r1, #23
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff ff2f 	bl	8004db0 <u8x8_byte_EndTransfer>
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}
	...

08004f5c <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	72fb      	strb	r3, [r7, #11]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	3b14      	subs	r3, #20
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d86e      	bhi.n	8005054 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08005013 	.word	0x08005013
 8004f80:	08004f95 	.word	0x08004f95
 8004f84:	08004fc3 	.word	0x08004fc3
 8004f88:	08004fcf 	.word	0x08004fcf
 8004f8c:	08005037 	.word	0x08005037
 8004f90:	0800503f 	.word	0x0800503f
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8004f94:	4b33      	ldr	r3, [pc, #204]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff ff07 	bl	8004db0 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fef4 	bl	8004d90 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8004fa8:	2100      	movs	r1, #0
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fedf 	bl	8004d6e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004fb0:	7abb      	ldrb	r3, [r7, #10]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff feda 	bl	8004d6e <u8x8_byte_SendByte>
      in_transfer = 1;
 8004fba:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8004fc0:	e04a      	b.n	8005058 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8004fc2:	7abb      	ldrb	r3, [r7, #10]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f7ff fed1 	bl	8004d6e <u8x8_byte_SendByte>
      break;      
 8004fcc:	e044      	b.n	8005058 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8004fce:	4b25      	ldr	r3, [pc, #148]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff feea 	bl	8004db0 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004fe0:	e00a      	b.n	8004ff8 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	2118      	movs	r1, #24
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ff9b 	bl	8004f22 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8004fec:	7abb      	ldrb	r3, [r7, #10]
 8004fee:	3b18      	subs	r3, #24
 8004ff0:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3318      	adds	r3, #24
 8004ff6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004ff8:	7abb      	ldrb	r3, [r7, #10]
 8004ffa:	2b18      	cmp	r3, #24
 8004ffc:	d8f1      	bhi.n	8004fe2 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8004ffe:	7abb      	ldrb	r3, [r7, #10]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4619      	mov	r1, r3
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff ff8c 	bl	8004f22 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
      break;
 8005010:	e022      	b.n	8005058 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005018:	2bff      	cmp	r3, #255	; 0xff
 800501a:	d103      	bne.n	8005024 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2278      	movs	r2, #120	; 0x78
 8005020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	691c      	ldr	r4, [r3, #16]
 8005028:	7aba      	ldrb	r2, [r7, #10]
 800502a:	7af9      	ldrb	r1, [r7, #11]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	47a0      	blx	r4
 8005032:	4603      	mov	r3, r0
 8005034:	e011      	b.n	800505a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
      break;
 800503c:	e00c      	b.n	8005058 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff feb2 	bl	8004db0 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
      break;
 8005052:	e001      	b.n	8005058 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8005058:	2301      	movs	r3, #1
}
 800505a:	4618      	mov	r0, r3
 800505c:	371c      	adds	r7, #28
 800505e:	46bd      	mov	sp, r7
 8005060:	bd90      	pop	{r4, r7, pc}
 8005062:	bf00      	nop
 8005064:	20000514 	.word	0x20000514

08005068 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	72fb      	strb	r3, [r7, #11]
 8005076:	4613      	mov	r3, r2
 8005078:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	3b0b      	subs	r3, #11
 800507e:	2b04      	cmp	r3, #4
 8005080:	f200 808a 	bhi.w	8005198 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050a1 	.word	0x080050a1
 8005090:	08005199 	.word	0x08005199
 8005094:	080050bb 	.word	0x080050bb
 8005098:	080050ed 	.word	0x080050ed
 800509c:	0800510d 	.word	0x0800510d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80050a0:	7abb      	ldrb	r3, [r7, #10]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80050a6:	4940      	ldr	r1, [pc, #256]	; (80051a8 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fee8 	bl	8004e7e <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80050ae:	e075      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80050b0:	493e      	ldr	r1, [pc, #248]	; (80051ac <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fee3 	bl	8004e7e <u8x8_cad_SendSequence>
      break;
 80050b8:	e070      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80050ba:	7abb      	ldrb	r3, [r7, #10]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80050c0:	493b      	ldr	r1, [pc, #236]	; (80051b0 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff fedb 	bl	8004e7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	7c9a      	ldrb	r2, [r3, #18]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80050d4:	e062      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80050d6:	4937      	ldr	r1, [pc, #220]	; (80051b4 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff fed0 	bl	8004e7e <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	7cda      	ldrb	r2, [r3, #19]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80050ea:	e057      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fea6 	bl	8004e3e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80050f2:	2181      	movs	r1, #129	; 0x81
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fe6b 	bl	8004dd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80050fa:	7abb      	ldrb	r3, [r7, #10]
 80050fc:	4619      	mov	r1, r3
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fe78 	bl	8004df4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff feaa 	bl	8004e5e <u8x8_cad_EndTransfer>
      break;
 800510a:	e047      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fe96 	bl	8004e3e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	795b      	ldrb	r3, [r3, #5]
 8005116:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	4413      	add	r3, r2
 8005128:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800512a:	2140      	movs	r1, #64	; 0x40
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fe4f 	bl	8004dd0 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005132:	7dfb      	ldrb	r3, [r7, #23]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f043 0310 	orr.w	r3, r3, #16
 800513c:	b2db      	uxtb	r3, r3
 800513e:	4619      	mov	r1, r3
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fe45 	bl	8004dd0 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8005146:	7dfb      	ldrb	r3, [r7, #23]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff fe4f 	bl	8004df4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	799b      	ldrb	r3, [r3, #6]
 800515a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800515e:	b2db      	uxtb	r3, r3
 8005160:	4619      	mov	r1, r3
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff fe46 	bl	8004df4 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	791b      	ldrb	r3, [r3, #4]
 800516c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005174:	7dbb      	ldrb	r3, [r7, #22]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4619      	mov	r1, r3
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff fe4a 	bl	8004e18 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005184:	7abb      	ldrb	r3, [r7, #10]
 8005186:	3b01      	subs	r3, #1
 8005188:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800518a:	7abb      	ldrb	r3, [r7, #10]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1eb      	bne.n	8005168 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fe64 	bl	8004e5e <u8x8_cad_EndTransfer>
      break;
 8005196:	e001      	b.n	800519c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800519c:	2301      	movs	r3, #1
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	08006cbc 	.word	0x08006cbc
 80051ac:	08006cc4 	.word	0x08006cc4
 80051b0:	08006ccc 	.word	0x08006ccc
 80051b4:	08006cd4 	.word	0x08006cd4

080051b8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	72fb      	strb	r3, [r7, #11]
 80051c6:	4613      	mov	r3, r2
 80051c8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80051ca:	7aba      	ldrb	r2, [r7, #10]
 80051cc:	7af9      	ldrb	r1, [r7, #11]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff49 	bl	8005068 <u8x8_d_ssd1306_sh1106_generic>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80051dc:	2301      	movs	r3, #1
 80051de:	e014      	b.n	800520a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	2b09      	cmp	r3, #9
 80051e4:	d009      	beq.n	80051fa <u8x8_d_ssd1306_128x64_noname+0x42>
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d10c      	bne.n	8005204 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f829 	bl	8005242 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80051f0:	4908      	ldr	r1, [pc, #32]	; (8005214 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7ff fe43 	bl	8004e7e <u8x8_cad_SendSequence>
      break;
 80051f8:	e006      	b.n	8005208 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80051fa:	4907      	ldr	r1, [pc, #28]	; (8005218 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f80d 	bl	800521c <u8x8_d_helper_display_setup_memory>
      break;
 8005202:	e001      	b.n	8005208 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8005208:	2301      	movs	r3, #1
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	08006c84 	.word	0x08006c84
 8005218:	08006cdc 	.word	0x08006cdc

0800521c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	7c9a      	ldrb	r2, [r3, #18]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005242:	b590      	push	{r4, r7, lr}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695c      	ldr	r4, [r3, #20]
 800524e:	2300      	movs	r3, #0
 8005250:	2200      	movs	r2, #0
 8005252:	2128      	movs	r1, #40	; 0x28
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68dc      	ldr	r4, [r3, #12]
 800525c:	2300      	movs	r3, #0
 800525e:	2200      	movs	r2, #0
 8005260:	2114      	movs	r1, #20
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005266:	2201      	movs	r2, #1
 8005268:	214b      	movs	r1, #75	; 0x4b
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f886 	bl	800537c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	791b      	ldrb	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	2129      	movs	r1, #41	; 0x29
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f87e 	bl	800537c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005280:	2200      	movs	r2, #0
 8005282:	214b      	movs	r1, #75	; 0x4b
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f879 	bl	800537c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	461a      	mov	r2, r3
 8005292:	2129      	movs	r1, #41	; 0x29
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f871 	bl	800537c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800529a:	2201      	movs	r2, #1
 800529c:	214b      	movs	r1, #75	; 0x4b
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f86c 	bl	800537c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	795b      	ldrb	r3, [r3, #5]
 80052aa:	461a      	mov	r2, r3
 80052ac:	2129      	movs	r1, #41	; 0x29
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f864 	bl	800537c <u8x8_gpio_call>
}    
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd90      	pop	{r4, r7, pc}

080052bc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	4608      	mov	r0, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	461a      	mov	r2, r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	70fb      	strb	r3, [r7, #3]
 80052ce:	460b      	mov	r3, r1
 80052d0:	70bb      	strb	r3, [r7, #2]
 80052d2:	4613      	mov	r3, r2
 80052d4:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80052da:	78bb      	ldrb	r3, [r7, #2]
 80052dc:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80052de:	787b      	ldrb	r3, [r7, #1]
 80052e0:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689c      	ldr	r4, [r3, #8]
 80052ea:	f107 0308 	add.w	r3, r7, #8
 80052ee:	2201      	movs	r2, #1
 80052f0:	210f      	movs	r1, #15
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	47a0      	blx	r4
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689c      	ldr	r4, [r3, #8]
 800530c:	2300      	movs	r3, #0
 800530e:	2200      	movs	r2, #0
 8005310:	2109      	movs	r1, #9
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	47a0      	blx	r4
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}

0800531e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800531e:	b590      	push	{r4, r7, lr}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689c      	ldr	r4, [r3, #8]
 800532a:	2300      	movs	r3, #0
 800532c:	2200      	movs	r2, #0
 800532e:	210a      	movs	r1, #10
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	47a0      	blx	r4
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}

0800533c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689c      	ldr	r4, [r3, #8]
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	2300      	movs	r3, #0
 8005350:	210b      	movs	r1, #11
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	47a0      	blx	r4
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}

0800535e <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800535e:	b590      	push	{r4, r7, lr}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689c      	ldr	r4, [r3, #8]
 800536a:	2300      	movs	r3, #0
 800536c:	2200      	movs	r2, #0
 800536e:	2110      	movs	r1, #16
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	47a0      	blx	r4
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}

0800537c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
 8005388:	4613      	mov	r3, r2
 800538a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	695c      	ldr	r4, [r3, #20]
 8005390:	78ba      	ldrb	r2, [r7, #2]
 8005392:	78f9      	ldrb	r1, [r7, #3]
 8005394:	2300      	movs	r3, #0
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	47a0      	blx	r4
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd90      	pop	{r4, r7, pc}

080053a2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	72fb      	strb	r3, [r7, #11]
 80053b0:	4613      	mov	r3, r2
 80053b2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <u8x8_SetupDefaults+0x58>)
 80053d2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <u8x8_SetupDefaults+0x58>)
 80053d8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <u8x8_SetupDefaults+0x58>)
 80053de:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <u8x8_SetupDefaults+0x58>)
 80053e4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	22ff      	movs	r2, #255	; 0xff
 8005408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	080053a3 	.word	0x080053a3

0800541c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ffc8 	bl	80053c0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff ff59 	bl	8005300 <u8x8_SetupMemory>
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <__errno>:
 8005458:	4b01      	ldr	r3, [pc, #4]	; (8005460 <__errno+0x8>)
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000000c 	.word	0x2000000c

08005464 <__libc_init_array>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	2600      	movs	r6, #0
 8005468:	4d0c      	ldr	r5, [pc, #48]	; (800549c <__libc_init_array+0x38>)
 800546a:	4c0d      	ldr	r4, [pc, #52]	; (80054a0 <__libc_init_array+0x3c>)
 800546c:	1b64      	subs	r4, r4, r5
 800546e:	10a4      	asrs	r4, r4, #2
 8005470:	42a6      	cmp	r6, r4
 8005472:	d109      	bne.n	8005488 <__libc_init_array+0x24>
 8005474:	f000 fc70 	bl	8005d58 <_init>
 8005478:	2600      	movs	r6, #0
 800547a:	4d0a      	ldr	r5, [pc, #40]	; (80054a4 <__libc_init_array+0x40>)
 800547c:	4c0a      	ldr	r4, [pc, #40]	; (80054a8 <__libc_init_array+0x44>)
 800547e:	1b64      	subs	r4, r4, r5
 8005480:	10a4      	asrs	r4, r4, #2
 8005482:	42a6      	cmp	r6, r4
 8005484:	d105      	bne.n	8005492 <__libc_init_array+0x2e>
 8005486:	bd70      	pop	{r4, r5, r6, pc}
 8005488:	f855 3b04 	ldr.w	r3, [r5], #4
 800548c:	4798      	blx	r3
 800548e:	3601      	adds	r6, #1
 8005490:	e7ee      	b.n	8005470 <__libc_init_array+0xc>
 8005492:	f855 3b04 	ldr.w	r3, [r5], #4
 8005496:	4798      	blx	r3
 8005498:	3601      	adds	r6, #1
 800549a:	e7f2      	b.n	8005482 <__libc_init_array+0x1e>
 800549c:	08006d28 	.word	0x08006d28
 80054a0:	08006d28 	.word	0x08006d28
 80054a4:	08006d28 	.word	0x08006d28
 80054a8:	08006d2c 	.word	0x08006d2c

080054ac <memset>:
 80054ac:	4603      	mov	r3, r0
 80054ae:	4402      	add	r2, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <sniprintf>:
 80054bc:	b40c      	push	{r2, r3}
 80054be:	b530      	push	{r4, r5, lr}
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <sniprintf+0x64>)
 80054c2:	1e0c      	subs	r4, r1, #0
 80054c4:	681d      	ldr	r5, [r3, #0]
 80054c6:	b09d      	sub	sp, #116	; 0x74
 80054c8:	da08      	bge.n	80054dc <sniprintf+0x20>
 80054ca:	238b      	movs	r3, #139	; 0x8b
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	b01d      	add	sp, #116	; 0x74
 80054d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d8:	b002      	add	sp, #8
 80054da:	4770      	bx	lr
 80054dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80054e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054e4:	bf0c      	ite	eq
 80054e6:	4623      	moveq	r3, r4
 80054e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f4:	9002      	str	r0, [sp, #8]
 80054f6:	9006      	str	r0, [sp, #24]
 80054f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054fc:	4628      	mov	r0, r5
 80054fe:	ab21      	add	r3, sp, #132	; 0x84
 8005500:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005502:	a902      	add	r1, sp, #8
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 f869 	bl	80055dc <_svfiprintf_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	bfbc      	itt	lt
 800550e:	238b      	movlt	r3, #139	; 0x8b
 8005510:	602b      	strlt	r3, [r5, #0]
 8005512:	2c00      	cmp	r4, #0
 8005514:	d0dd      	beq.n	80054d2 <sniprintf+0x16>
 8005516:	2200      	movs	r2, #0
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e7d9      	b.n	80054d2 <sniprintf+0x16>
 800551e:	bf00      	nop
 8005520:	2000000c 	.word	0x2000000c

08005524 <__ssputs_r>:
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	688e      	ldr	r6, [r1, #8]
 800552a:	4682      	mov	sl, r0
 800552c:	429e      	cmp	r6, r3
 800552e:	460c      	mov	r4, r1
 8005530:	4690      	mov	r8, r2
 8005532:	461f      	mov	r7, r3
 8005534:	d838      	bhi.n	80055a8 <__ssputs_r+0x84>
 8005536:	898a      	ldrh	r2, [r1, #12]
 8005538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800553c:	d032      	beq.n	80055a4 <__ssputs_r+0x80>
 800553e:	6825      	ldr	r5, [r4, #0]
 8005540:	6909      	ldr	r1, [r1, #16]
 8005542:	3301      	adds	r3, #1
 8005544:	eba5 0901 	sub.w	r9, r5, r1
 8005548:	6965      	ldr	r5, [r4, #20]
 800554a:	444b      	add	r3, r9
 800554c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005554:	106d      	asrs	r5, r5, #1
 8005556:	429d      	cmp	r5, r3
 8005558:	bf38      	it	cc
 800555a:	461d      	movcc	r5, r3
 800555c:	0553      	lsls	r3, r2, #21
 800555e:	d531      	bpl.n	80055c4 <__ssputs_r+0xa0>
 8005560:	4629      	mov	r1, r5
 8005562:	f000 fb53 	bl	8005c0c <_malloc_r>
 8005566:	4606      	mov	r6, r0
 8005568:	b950      	cbnz	r0, 8005580 <__ssputs_r+0x5c>
 800556a:	230c      	movs	r3, #12
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	f8ca 3000 	str.w	r3, [sl]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	81a3      	strh	r3, [r4, #12]
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005580:	464a      	mov	r2, r9
 8005582:	6921      	ldr	r1, [r4, #16]
 8005584:	f000 face 	bl	8005b24 <memcpy>
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	81a3      	strh	r3, [r4, #12]
 8005594:	6126      	str	r6, [r4, #16]
 8005596:	444e      	add	r6, r9
 8005598:	6026      	str	r6, [r4, #0]
 800559a:	463e      	mov	r6, r7
 800559c:	6165      	str	r5, [r4, #20]
 800559e:	eba5 0509 	sub.w	r5, r5, r9
 80055a2:	60a5      	str	r5, [r4, #8]
 80055a4:	42be      	cmp	r6, r7
 80055a6:	d900      	bls.n	80055aa <__ssputs_r+0x86>
 80055a8:	463e      	mov	r6, r7
 80055aa:	4632      	mov	r2, r6
 80055ac:	4641      	mov	r1, r8
 80055ae:	6820      	ldr	r0, [r4, #0]
 80055b0:	f000 fac6 	bl	8005b40 <memmove>
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	4432      	add	r2, r6
 80055bc:	2000      	movs	r0, #0
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	6022      	str	r2, [r4, #0]
 80055c2:	e7db      	b.n	800557c <__ssputs_r+0x58>
 80055c4:	462a      	mov	r2, r5
 80055c6:	f000 fb7b 	bl	8005cc0 <_realloc_r>
 80055ca:	4606      	mov	r6, r0
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d1e1      	bne.n	8005594 <__ssputs_r+0x70>
 80055d0:	4650      	mov	r0, sl
 80055d2:	6921      	ldr	r1, [r4, #16]
 80055d4:	f000 face 	bl	8005b74 <_free_r>
 80055d8:	e7c7      	b.n	800556a <__ssputs_r+0x46>
	...

080055dc <_svfiprintf_r>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	4698      	mov	r8, r3
 80055e2:	898b      	ldrh	r3, [r1, #12]
 80055e4:	4607      	mov	r7, r0
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	460d      	mov	r5, r1
 80055ea:	4614      	mov	r4, r2
 80055ec:	b09d      	sub	sp, #116	; 0x74
 80055ee:	d50e      	bpl.n	800560e <_svfiprintf_r+0x32>
 80055f0:	690b      	ldr	r3, [r1, #16]
 80055f2:	b963      	cbnz	r3, 800560e <_svfiprintf_r+0x32>
 80055f4:	2140      	movs	r1, #64	; 0x40
 80055f6:	f000 fb09 	bl	8005c0c <_malloc_r>
 80055fa:	6028      	str	r0, [r5, #0]
 80055fc:	6128      	str	r0, [r5, #16]
 80055fe:	b920      	cbnz	r0, 800560a <_svfiprintf_r+0x2e>
 8005600:	230c      	movs	r3, #12
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e0d1      	b.n	80057ae <_svfiprintf_r+0x1d2>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	616b      	str	r3, [r5, #20]
 800560e:	2300      	movs	r3, #0
 8005610:	9309      	str	r3, [sp, #36]	; 0x24
 8005612:	2320      	movs	r3, #32
 8005614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005618:	2330      	movs	r3, #48	; 0x30
 800561a:	f04f 0901 	mov.w	r9, #1
 800561e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005622:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057c8 <_svfiprintf_r+0x1ec>
 8005626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562a:	4623      	mov	r3, r4
 800562c:	469a      	mov	sl, r3
 800562e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005632:	b10a      	cbz	r2, 8005638 <_svfiprintf_r+0x5c>
 8005634:	2a25      	cmp	r2, #37	; 0x25
 8005636:	d1f9      	bne.n	800562c <_svfiprintf_r+0x50>
 8005638:	ebba 0b04 	subs.w	fp, sl, r4
 800563c:	d00b      	beq.n	8005656 <_svfiprintf_r+0x7a>
 800563e:	465b      	mov	r3, fp
 8005640:	4622      	mov	r2, r4
 8005642:	4629      	mov	r1, r5
 8005644:	4638      	mov	r0, r7
 8005646:	f7ff ff6d 	bl	8005524 <__ssputs_r>
 800564a:	3001      	adds	r0, #1
 800564c:	f000 80aa 	beq.w	80057a4 <_svfiprintf_r+0x1c8>
 8005650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005652:	445a      	add	r2, fp
 8005654:	9209      	str	r2, [sp, #36]	; 0x24
 8005656:	f89a 3000 	ldrb.w	r3, [sl]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80a2 	beq.w	80057a4 <_svfiprintf_r+0x1c8>
 8005660:	2300      	movs	r3, #0
 8005662:	f04f 32ff 	mov.w	r2, #4294967295
 8005666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800566a:	f10a 0a01 	add.w	sl, sl, #1
 800566e:	9304      	str	r3, [sp, #16]
 8005670:	9307      	str	r3, [sp, #28]
 8005672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005676:	931a      	str	r3, [sp, #104]	; 0x68
 8005678:	4654      	mov	r4, sl
 800567a:	2205      	movs	r2, #5
 800567c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005680:	4851      	ldr	r0, [pc, #324]	; (80057c8 <_svfiprintf_r+0x1ec>)
 8005682:	f000 fa41 	bl	8005b08 <memchr>
 8005686:	9a04      	ldr	r2, [sp, #16]
 8005688:	b9d8      	cbnz	r0, 80056c2 <_svfiprintf_r+0xe6>
 800568a:	06d0      	lsls	r0, r2, #27
 800568c:	bf44      	itt	mi
 800568e:	2320      	movmi	r3, #32
 8005690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005694:	0711      	lsls	r1, r2, #28
 8005696:	bf44      	itt	mi
 8005698:	232b      	movmi	r3, #43	; 0x2b
 800569a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800569e:	f89a 3000 	ldrb.w	r3, [sl]
 80056a2:	2b2a      	cmp	r3, #42	; 0x2a
 80056a4:	d015      	beq.n	80056d2 <_svfiprintf_r+0xf6>
 80056a6:	4654      	mov	r4, sl
 80056a8:	2000      	movs	r0, #0
 80056aa:	f04f 0c0a 	mov.w	ip, #10
 80056ae:	9a07      	ldr	r2, [sp, #28]
 80056b0:	4621      	mov	r1, r4
 80056b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056b6:	3b30      	subs	r3, #48	; 0x30
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d94e      	bls.n	800575a <_svfiprintf_r+0x17e>
 80056bc:	b1b0      	cbz	r0, 80056ec <_svfiprintf_r+0x110>
 80056be:	9207      	str	r2, [sp, #28]
 80056c0:	e014      	b.n	80056ec <_svfiprintf_r+0x110>
 80056c2:	eba0 0308 	sub.w	r3, r0, r8
 80056c6:	fa09 f303 	lsl.w	r3, r9, r3
 80056ca:	4313      	orrs	r3, r2
 80056cc:	46a2      	mov	sl, r4
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	e7d2      	b.n	8005678 <_svfiprintf_r+0x9c>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	1d19      	adds	r1, r3, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	9103      	str	r1, [sp, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bfbb      	ittet	lt
 80056de:	425b      	neglt	r3, r3
 80056e0:	f042 0202 	orrlt.w	r2, r2, #2
 80056e4:	9307      	strge	r3, [sp, #28]
 80056e6:	9307      	strlt	r3, [sp, #28]
 80056e8:	bfb8      	it	lt
 80056ea:	9204      	strlt	r2, [sp, #16]
 80056ec:	7823      	ldrb	r3, [r4, #0]
 80056ee:	2b2e      	cmp	r3, #46	; 0x2e
 80056f0:	d10c      	bne.n	800570c <_svfiprintf_r+0x130>
 80056f2:	7863      	ldrb	r3, [r4, #1]
 80056f4:	2b2a      	cmp	r3, #42	; 0x2a
 80056f6:	d135      	bne.n	8005764 <_svfiprintf_r+0x188>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	3402      	adds	r4, #2
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	9203      	str	r2, [sp, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfb8      	it	lt
 8005706:	f04f 33ff 	movlt.w	r3, #4294967295
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057d8 <_svfiprintf_r+0x1fc>
 8005710:	2203      	movs	r2, #3
 8005712:	4650      	mov	r0, sl
 8005714:	7821      	ldrb	r1, [r4, #0]
 8005716:	f000 f9f7 	bl	8005b08 <memchr>
 800571a:	b140      	cbz	r0, 800572e <_svfiprintf_r+0x152>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	eba0 000a 	sub.w	r0, r0, sl
 8005722:	fa03 f000 	lsl.w	r0, r3, r0
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	3401      	adds	r4, #1
 800572a:	4303      	orrs	r3, r0
 800572c:	9304      	str	r3, [sp, #16]
 800572e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005732:	2206      	movs	r2, #6
 8005734:	4825      	ldr	r0, [pc, #148]	; (80057cc <_svfiprintf_r+0x1f0>)
 8005736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800573a:	f000 f9e5 	bl	8005b08 <memchr>
 800573e:	2800      	cmp	r0, #0
 8005740:	d038      	beq.n	80057b4 <_svfiprintf_r+0x1d8>
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <_svfiprintf_r+0x1f4>)
 8005744:	bb1b      	cbnz	r3, 800578e <_svfiprintf_r+0x1b2>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	3307      	adds	r3, #7
 800574a:	f023 0307 	bic.w	r3, r3, #7
 800574e:	3308      	adds	r3, #8
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005754:	4433      	add	r3, r6
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	e767      	b.n	800562a <_svfiprintf_r+0x4e>
 800575a:	460c      	mov	r4, r1
 800575c:	2001      	movs	r0, #1
 800575e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005762:	e7a5      	b.n	80056b0 <_svfiprintf_r+0xd4>
 8005764:	2300      	movs	r3, #0
 8005766:	f04f 0c0a 	mov.w	ip, #10
 800576a:	4619      	mov	r1, r3
 800576c:	3401      	adds	r4, #1
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	4620      	mov	r0, r4
 8005772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005776:	3a30      	subs	r2, #48	; 0x30
 8005778:	2a09      	cmp	r2, #9
 800577a:	d903      	bls.n	8005784 <_svfiprintf_r+0x1a8>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0c5      	beq.n	800570c <_svfiprintf_r+0x130>
 8005780:	9105      	str	r1, [sp, #20]
 8005782:	e7c3      	b.n	800570c <_svfiprintf_r+0x130>
 8005784:	4604      	mov	r4, r0
 8005786:	2301      	movs	r3, #1
 8005788:	fb0c 2101 	mla	r1, ip, r1, r2
 800578c:	e7f0      	b.n	8005770 <_svfiprintf_r+0x194>
 800578e:	ab03      	add	r3, sp, #12
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	462a      	mov	r2, r5
 8005794:	4638      	mov	r0, r7
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <_svfiprintf_r+0x1f8>)
 8005798:	a904      	add	r1, sp, #16
 800579a:	f3af 8000 	nop.w
 800579e:	1c42      	adds	r2, r0, #1
 80057a0:	4606      	mov	r6, r0
 80057a2:	d1d6      	bne.n	8005752 <_svfiprintf_r+0x176>
 80057a4:	89ab      	ldrh	r3, [r5, #12]
 80057a6:	065b      	lsls	r3, r3, #25
 80057a8:	f53f af2c 	bmi.w	8005604 <_svfiprintf_r+0x28>
 80057ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ae:	b01d      	add	sp, #116	; 0x74
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	462a      	mov	r2, r5
 80057ba:	4638      	mov	r0, r7
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <_svfiprintf_r+0x1f8>)
 80057be:	a904      	add	r1, sp, #16
 80057c0:	f000 f87c 	bl	80058bc <_printf_i>
 80057c4:	e7eb      	b.n	800579e <_svfiprintf_r+0x1c2>
 80057c6:	bf00      	nop
 80057c8:	08006cf4 	.word	0x08006cf4
 80057cc:	08006cfe 	.word	0x08006cfe
 80057d0:	00000000 	.word	0x00000000
 80057d4:	08005525 	.word	0x08005525
 80057d8:	08006cfa 	.word	0x08006cfa

080057dc <_printf_common>:
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	4616      	mov	r6, r2
 80057e2:	4699      	mov	r9, r3
 80057e4:	688a      	ldr	r2, [r1, #8]
 80057e6:	690b      	ldr	r3, [r1, #16]
 80057e8:	4607      	mov	r7, r0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfb8      	it	lt
 80057ee:	4613      	movlt	r3, r2
 80057f0:	6033      	str	r3, [r6, #0]
 80057f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f6:	460c      	mov	r4, r1
 80057f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057fc:	b10a      	cbz	r2, 8005802 <_printf_common+0x26>
 80057fe:	3301      	adds	r3, #1
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	0699      	lsls	r1, r3, #26
 8005806:	bf42      	ittt	mi
 8005808:	6833      	ldrmi	r3, [r6, #0]
 800580a:	3302      	addmi	r3, #2
 800580c:	6033      	strmi	r3, [r6, #0]
 800580e:	6825      	ldr	r5, [r4, #0]
 8005810:	f015 0506 	ands.w	r5, r5, #6
 8005814:	d106      	bne.n	8005824 <_printf_common+0x48>
 8005816:	f104 0a19 	add.w	sl, r4, #25
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	6832      	ldr	r2, [r6, #0]
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	42ab      	cmp	r3, r5
 8005822:	dc28      	bgt.n	8005876 <_printf_common+0x9a>
 8005824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005828:	1e13      	subs	r3, r2, #0
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	bf18      	it	ne
 800582e:	2301      	movne	r3, #1
 8005830:	0692      	lsls	r2, r2, #26
 8005832:	d42d      	bmi.n	8005890 <_printf_common+0xb4>
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	47c0      	blx	r8
 800583e:	3001      	adds	r0, #1
 8005840:	d020      	beq.n	8005884 <_printf_common+0xa8>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	68e5      	ldr	r5, [r4, #12]
 8005846:	f003 0306 	and.w	r3, r3, #6
 800584a:	2b04      	cmp	r3, #4
 800584c:	bf18      	it	ne
 800584e:	2500      	movne	r5, #0
 8005850:	6832      	ldr	r2, [r6, #0]
 8005852:	f04f 0600 	mov.w	r6, #0
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	bf08      	it	eq
 800585a:	1aad      	subeq	r5, r5, r2
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	bf08      	it	eq
 8005860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005864:	4293      	cmp	r3, r2
 8005866:	bfc4      	itt	gt
 8005868:	1a9b      	subgt	r3, r3, r2
 800586a:	18ed      	addgt	r5, r5, r3
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xcc>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xac>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xb0>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c4      	b.n	800581a <_printf_common+0x3e>
 8005890:	2030      	movs	r0, #48	; 0x30
 8005892:	18e1      	adds	r1, r4, r3
 8005894:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800589e:	4422      	add	r2, r4
 80058a0:	3302      	adds	r3, #2
 80058a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a6:	e7c5      	b.n	8005834 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa8>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x92>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	7e27      	ldrb	r7, [r4, #24]
 80058c4:	4691      	mov	r9, r2
 80058c6:	2f78      	cmp	r7, #120	; 0x78
 80058c8:	4680      	mov	r8, r0
 80058ca:	469a      	mov	sl, r3
 80058cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d9 	beq.w	8005a90 <_printf_i+0x1d4>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a4 	beq.w	8005a2c <_printf_i+0x170>
 80058e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a001      	add	r0, pc, #4	; (adr r0, 80058fc <_printf_i+0x40>)
 80058f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a77 	.word	0x08005a77
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a59 	.word	0x08005a59
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a99 	.word	0x08005a99
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a61 	.word	0x08005a61
 8005954:	680b      	ldr	r3, [r1, #0]
 8005956:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a4      	b.n	8005ab2 <_printf_i+0x1f6>
 8005968:	6825      	ldr	r5, [r4, #0]
 800596a:	6808      	ldr	r0, [r1, #0]
 800596c:	062e      	lsls	r6, r5, #24
 800596e:	f100 0304 	add.w	r3, r0, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	6805      	ldr	r5, [r0, #0]
 8005976:	600b      	str	r3, [r1, #0]
 8005978:	2d00      	cmp	r5, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	426d      	negs	r5, r5
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	230a      	movs	r3, #10
 8005986:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800598e:	6805      	ldr	r5, [r0, #0]
 8005990:	600b      	str	r3, [r1, #0]
 8005992:	bf18      	it	ne
 8005994:	b22d      	sxthne	r5, r5
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	680b      	ldr	r3, [r1, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	1d18      	adds	r0, r3, #4
 800599e:	6008      	str	r0, [r1, #0]
 80059a0:	0628      	lsls	r0, r5, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681d      	ldr	r5, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0669      	lsls	r1, r5, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881d      	ldrh	r5, [r3, #0]
 80059ae:	2f6f      	cmp	r7, #111	; 0x6f
 80059b0:	bf0c      	ite	eq
 80059b2:	2308      	moveq	r3, #8
 80059b4:	230a      	movne	r3, #10
 80059b6:	4852      	ldr	r0, [pc, #328]	; (8005b00 <_printf_i+0x244>)
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6866      	ldr	r6, [r4, #4]
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	bfa8      	it	ge
 80059c4:	6821      	ldrge	r1, [r4, #0]
 80059c6:	60a6      	str	r6, [r4, #8]
 80059c8:	bfa4      	itt	ge
 80059ca:	f021 0104 	bicge.w	r1, r1, #4
 80059ce:	6021      	strge	r1, [r4, #0]
 80059d0:	b90d      	cbnz	r5, 80059d6 <_printf_i+0x11a>
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	d04d      	beq.n	8005a72 <_printf_i+0x1b6>
 80059d6:	4616      	mov	r6, r2
 80059d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80059dc:	fb03 5711 	mls	r7, r3, r1, r5
 80059e0:	5dc7      	ldrb	r7, [r0, r7]
 80059e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e6:	462f      	mov	r7, r5
 80059e8:	42bb      	cmp	r3, r7
 80059ea:	460d      	mov	r5, r1
 80059ec:	d9f4      	bls.n	80059d8 <_printf_i+0x11c>
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d10b      	bne.n	8005a0a <_printf_i+0x14e>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	07df      	lsls	r7, r3, #31
 80059f6:	d508      	bpl.n	8005a0a <_printf_i+0x14e>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	6861      	ldr	r1, [r4, #4]
 80059fc:	4299      	cmp	r1, r3
 80059fe:	bfde      	ittt	le
 8005a00:	2330      	movle	r3, #48	; 0x30
 8005a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a0a:	1b92      	subs	r2, r2, r6
 8005a0c:	6122      	str	r2, [r4, #16]
 8005a0e:	464b      	mov	r3, r9
 8005a10:	4621      	mov	r1, r4
 8005a12:	4640      	mov	r0, r8
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	aa03      	add	r2, sp, #12
 8005a1a:	f7ff fedf 	bl	80057dc <_printf_common>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d14c      	bne.n	8005abc <_printf_i+0x200>
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	b004      	add	sp, #16
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	4834      	ldr	r0, [pc, #208]	; (8005b00 <_printf_i+0x244>)
 8005a2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a32:	680e      	ldr	r6, [r1, #0]
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a3a:	061f      	lsls	r7, r3, #24
 8005a3c:	600e      	str	r6, [r1, #0]
 8005a3e:	d514      	bpl.n	8005a6a <_printf_i+0x1ae>
 8005a40:	07d9      	lsls	r1, r3, #31
 8005a42:	bf44      	itt	mi
 8005a44:	f043 0320 	orrmi.w	r3, r3, #32
 8005a48:	6023      	strmi	r3, [r4, #0]
 8005a4a:	b91d      	cbnz	r5, 8005a54 <_printf_i+0x198>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
 8005a52:	6023      	str	r3, [r4, #0]
 8005a54:	2310      	movs	r3, #16
 8005a56:	e7af      	b.n	80059b8 <_printf_i+0xfc>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	f043 0320 	orr.w	r3, r3, #32
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	2378      	movs	r3, #120	; 0x78
 8005a62:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a68:	e7e3      	b.n	8005a32 <_printf_i+0x176>
 8005a6a:	065e      	lsls	r6, r3, #25
 8005a6c:	bf48      	it	mi
 8005a6e:	b2ad      	uxthmi	r5, r5
 8005a70:	e7e6      	b.n	8005a40 <_printf_i+0x184>
 8005a72:	4616      	mov	r6, r2
 8005a74:	e7bb      	b.n	80059ee <_printf_i+0x132>
 8005a76:	680b      	ldr	r3, [r1, #0]
 8005a78:	6826      	ldr	r6, [r4, #0]
 8005a7a:	1d1d      	adds	r5, r3, #4
 8005a7c:	6960      	ldr	r0, [r4, #20]
 8005a7e:	600d      	str	r5, [r1, #0]
 8005a80:	0635      	lsls	r5, r6, #24
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	d501      	bpl.n	8005a8a <_printf_i+0x1ce>
 8005a86:	6018      	str	r0, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <_printf_i+0x1d4>
 8005a8a:	0671      	lsls	r1, r6, #25
 8005a8c:	d5fb      	bpl.n	8005a86 <_printf_i+0x1ca>
 8005a8e:	8018      	strh	r0, [r3, #0]
 8005a90:	2300      	movs	r3, #0
 8005a92:	4616      	mov	r6, r2
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	e7ba      	b.n	8005a0e <_printf_i+0x152>
 8005a98:	680b      	ldr	r3, [r1, #0]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	600a      	str	r2, [r1, #0]
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	6862      	ldr	r2, [r4, #4]
 8005aa6:	f000 f82f 	bl	8005b08 <memchr>
 8005aaa:	b108      	cbz	r0, 8005ab0 <_printf_i+0x1f4>
 8005aac:	1b80      	subs	r0, r0, r6
 8005aae:	6060      	str	r0, [r4, #4]
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aba:	e7a8      	b.n	8005a0e <_printf_i+0x152>
 8005abc:	4632      	mov	r2, r6
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	47d0      	blx	sl
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d0ab      	beq.n	8005a22 <_printf_i+0x166>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	079b      	lsls	r3, r3, #30
 8005ace:	d413      	bmi.n	8005af8 <_printf_i+0x23c>
 8005ad0:	68e0      	ldr	r0, [r4, #12]
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	4298      	cmp	r0, r3
 8005ad6:	bfb8      	it	lt
 8005ad8:	4618      	movlt	r0, r3
 8005ada:	e7a4      	b.n	8005a26 <_printf_i+0x16a>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4632      	mov	r2, r6
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	47d0      	blx	sl
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d09b      	beq.n	8005a22 <_printf_i+0x166>
 8005aea:	3501      	adds	r5, #1
 8005aec:	68e3      	ldr	r3, [r4, #12]
 8005aee:	9903      	ldr	r1, [sp, #12]
 8005af0:	1a5b      	subs	r3, r3, r1
 8005af2:	42ab      	cmp	r3, r5
 8005af4:	dcf2      	bgt.n	8005adc <_printf_i+0x220>
 8005af6:	e7eb      	b.n	8005ad0 <_printf_i+0x214>
 8005af8:	2500      	movs	r5, #0
 8005afa:	f104 0619 	add.w	r6, r4, #25
 8005afe:	e7f5      	b.n	8005aec <_printf_i+0x230>
 8005b00:	08006d05 	.word	0x08006d05
 8005b04:	08006d16 	.word	0x08006d16

08005b08 <memchr>:
 8005b08:	4603      	mov	r3, r0
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	b2c9      	uxtb	r1, r1
 8005b0e:	4402      	add	r2, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	d101      	bne.n	8005b1a <memchr+0x12>
 8005b16:	2000      	movs	r0, #0
 8005b18:	e003      	b.n	8005b22 <memchr+0x1a>
 8005b1a:	7804      	ldrb	r4, [r0, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	428c      	cmp	r4, r1
 8005b20:	d1f6      	bne.n	8005b10 <memchr+0x8>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memcpy>:
 8005b24:	440a      	add	r2, r1
 8005b26:	4291      	cmp	r1, r2
 8005b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b2c:	d100      	bne.n	8005b30 <memcpy+0xc>
 8005b2e:	4770      	bx	lr
 8005b30:	b510      	push	{r4, lr}
 8005b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b36:	4291      	cmp	r1, r2
 8005b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b3c:	d1f9      	bne.n	8005b32 <memcpy+0xe>
 8005b3e:	bd10      	pop	{r4, pc}

08005b40 <memmove>:
 8005b40:	4288      	cmp	r0, r1
 8005b42:	b510      	push	{r4, lr}
 8005b44:	eb01 0402 	add.w	r4, r1, r2
 8005b48:	d902      	bls.n	8005b50 <memmove+0x10>
 8005b4a:	4284      	cmp	r4, r0
 8005b4c:	4623      	mov	r3, r4
 8005b4e:	d807      	bhi.n	8005b60 <memmove+0x20>
 8005b50:	1e43      	subs	r3, r0, #1
 8005b52:	42a1      	cmp	r1, r4
 8005b54:	d008      	beq.n	8005b68 <memmove+0x28>
 8005b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b5e:	e7f8      	b.n	8005b52 <memmove+0x12>
 8005b60:	4601      	mov	r1, r0
 8005b62:	4402      	add	r2, r0
 8005b64:	428a      	cmp	r2, r1
 8005b66:	d100      	bne.n	8005b6a <memmove+0x2a>
 8005b68:	bd10      	pop	{r4, pc}
 8005b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b72:	e7f7      	b.n	8005b64 <memmove+0x24>

08005b74 <_free_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d043      	beq.n	8005c04 <_free_r+0x90>
 8005b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b80:	1f0c      	subs	r4, r1, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfb8      	it	lt
 8005b86:	18e4      	addlt	r4, r4, r3
 8005b88:	f000 f8d0 	bl	8005d2c <__malloc_lock>
 8005b8c:	4a1e      	ldr	r2, [pc, #120]	; (8005c08 <_free_r+0x94>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	4610      	mov	r0, r2
 8005b92:	b933      	cbnz	r3, 8005ba2 <_free_r+0x2e>
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	6014      	str	r4, [r2, #0]
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9e:	f000 b8cb 	b.w	8005d38 <__malloc_unlock>
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	d90a      	bls.n	8005bbc <_free_r+0x48>
 8005ba6:	6821      	ldr	r1, [r4, #0]
 8005ba8:	1862      	adds	r2, r4, r1
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bf01      	itttt	eq
 8005bae:	681a      	ldreq	r2, [r3, #0]
 8005bb0:	685b      	ldreq	r3, [r3, #4]
 8005bb2:	1852      	addeq	r2, r2, r1
 8005bb4:	6022      	streq	r2, [r4, #0]
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6004      	str	r4, [r0, #0]
 8005bba:	e7ed      	b.n	8005b98 <_free_r+0x24>
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	b10b      	cbz	r3, 8005bc6 <_free_r+0x52>
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	d9fa      	bls.n	8005bbc <_free_r+0x48>
 8005bc6:	6811      	ldr	r1, [r2, #0]
 8005bc8:	1850      	adds	r0, r2, r1
 8005bca:	42a0      	cmp	r0, r4
 8005bcc:	d10b      	bne.n	8005be6 <_free_r+0x72>
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	4401      	add	r1, r0
 8005bd2:	1850      	adds	r0, r2, r1
 8005bd4:	4283      	cmp	r3, r0
 8005bd6:	6011      	str	r1, [r2, #0]
 8005bd8:	d1de      	bne.n	8005b98 <_free_r+0x24>
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4401      	add	r1, r0
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7d8      	b.n	8005b98 <_free_r+0x24>
 8005be6:	d902      	bls.n	8005bee <_free_r+0x7a>
 8005be8:	230c      	movs	r3, #12
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	e7d4      	b.n	8005b98 <_free_r+0x24>
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	1821      	adds	r1, r4, r0
 8005bf2:	428b      	cmp	r3, r1
 8005bf4:	bf01      	itttt	eq
 8005bf6:	6819      	ldreq	r1, [r3, #0]
 8005bf8:	685b      	ldreq	r3, [r3, #4]
 8005bfa:	1809      	addeq	r1, r1, r0
 8005bfc:	6021      	streq	r1, [r4, #0]
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	6054      	str	r4, [r2, #4]
 8005c02:	e7c9      	b.n	8005b98 <_free_r+0x24>
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	20000518 	.word	0x20000518

08005c0c <_malloc_r>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	1ccd      	adds	r5, r1, #3
 8005c10:	f025 0503 	bic.w	r5, r5, #3
 8005c14:	3508      	adds	r5, #8
 8005c16:	2d0c      	cmp	r5, #12
 8005c18:	bf38      	it	cc
 8005c1a:	250c      	movcc	r5, #12
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	db01      	blt.n	8005c26 <_malloc_r+0x1a>
 8005c22:	42a9      	cmp	r1, r5
 8005c24:	d903      	bls.n	8005c2e <_malloc_r+0x22>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2e:	f000 f87d 	bl	8005d2c <__malloc_lock>
 8005c32:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <_malloc_r+0xac>)
 8005c34:	680a      	ldr	r2, [r1, #0]
 8005c36:	4614      	mov	r4, r2
 8005c38:	b99c      	cbnz	r4, 8005c62 <_malloc_r+0x56>
 8005c3a:	4f20      	ldr	r7, [pc, #128]	; (8005cbc <_malloc_r+0xb0>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	b923      	cbnz	r3, 8005c4a <_malloc_r+0x3e>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 f862 	bl	8005d0c <_sbrk_r>
 8005c48:	6038      	str	r0, [r7, #0]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 f85d 	bl	8005d0c <_sbrk_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	d123      	bne.n	8005c9e <_malloc_r+0x92>
 8005c56:	230c      	movs	r3, #12
 8005c58:	4630      	mov	r0, r6
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	f000 f86c 	bl	8005d38 <__malloc_unlock>
 8005c60:	e7e3      	b.n	8005c2a <_malloc_r+0x1e>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	1b5b      	subs	r3, r3, r5
 8005c66:	d417      	bmi.n	8005c98 <_malloc_r+0x8c>
 8005c68:	2b0b      	cmp	r3, #11
 8005c6a:	d903      	bls.n	8005c74 <_malloc_r+0x68>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	441c      	add	r4, r3
 8005c70:	6025      	str	r5, [r4, #0]
 8005c72:	e004      	b.n	8005c7e <_malloc_r+0x72>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	42a2      	cmp	r2, r4
 8005c78:	bf0c      	ite	eq
 8005c7a:	600b      	streq	r3, [r1, #0]
 8005c7c:	6053      	strne	r3, [r2, #4]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f85a 	bl	8005d38 <__malloc_unlock>
 8005c84:	f104 000b 	add.w	r0, r4, #11
 8005c88:	1d23      	adds	r3, r4, #4
 8005c8a:	f020 0007 	bic.w	r0, r0, #7
 8005c8e:	1ac2      	subs	r2, r0, r3
 8005c90:	d0cc      	beq.n	8005c2c <_malloc_r+0x20>
 8005c92:	1a1b      	subs	r3, r3, r0
 8005c94:	50a3      	str	r3, [r4, r2]
 8005c96:	e7c9      	b.n	8005c2c <_malloc_r+0x20>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	6864      	ldr	r4, [r4, #4]
 8005c9c:	e7cc      	b.n	8005c38 <_malloc_r+0x2c>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d0e3      	beq.n	8005c70 <_malloc_r+0x64>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f82e 	bl	8005d0c <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d1dd      	bne.n	8005c70 <_malloc_r+0x64>
 8005cb4:	e7cf      	b.n	8005c56 <_malloc_r+0x4a>
 8005cb6:	bf00      	nop
 8005cb8:	20000518 	.word	0x20000518
 8005cbc:	2000051c 	.word	0x2000051c

08005cc0 <_realloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	b921      	cbnz	r1, 8005cd4 <_realloc_r+0x14>
 8005cca:	4611      	mov	r1, r2
 8005ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cd0:	f7ff bf9c 	b.w	8005c0c <_malloc_r>
 8005cd4:	b922      	cbnz	r2, 8005ce0 <_realloc_r+0x20>
 8005cd6:	f7ff ff4d 	bl	8005b74 <_free_r>
 8005cda:	4625      	mov	r5, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	f000 f830 	bl	8005d44 <_malloc_usable_size_r>
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d20f      	bcs.n	8005d08 <_realloc_r+0x48>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff8e 	bl	8005c0c <_malloc_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0f2      	beq.n	8005cdc <_realloc_r+0x1c>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	f7ff ff13 	bl	8005b24 <memcpy>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ff37 	bl	8005b74 <_free_r>
 8005d06:	e7e9      	b.n	8005cdc <_realloc_r+0x1c>
 8005d08:	4635      	mov	r5, r6
 8005d0a:	e7e7      	b.n	8005cdc <_realloc_r+0x1c>

08005d0c <_sbrk_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_sbrk_r+0x1c>)
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fa fd32 	bl	8000780 <_sbrk>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_sbrk_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_sbrk_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200005d4 	.word	0x200005d4

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f000 b811 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	200005d8 	.word	0x200005d8

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f000 b80c 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	200005d8 	.word	0x200005d8

08005d44 <_malloc_usable_size_r>:
 8005d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d48:	1f18      	subs	r0, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bfbc      	itt	lt
 8005d4e:	580b      	ldrlt	r3, [r1, r0]
 8005d50:	18c0      	addlt	r0, r0, r3
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <_init>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr

08005d64 <_fini>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr
